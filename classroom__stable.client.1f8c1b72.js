window.chesscom = window.chesscom || {}, window.chesscom.routes = window.chesscom.routes || {}, Object.assign(window.chesscom.routes, {
        web_user_game_settings_email_callback_animation_type: {
            tokens: [
                ["text", "/callback/settings/user/email/animationType"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_user_game_settings_email_callback_board_color: {
            tokens: [
                ["text", "/callback/settings/user/email/boardColor"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_user_game_settings_email_callback_coordinates: {
            tokens: [
                ["text", "/callback/settings/user/email/coordinates"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_user_game_settings_callback_dark_mode_toggle: {
            tokens: [
                ["text", "/callback/settings/user/darkModeToggle"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_user_game_settings_email_callback_evaluation_bar: {
            tokens: [
                ["text", "/callback/settings/user/email/evaluationBar"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_user_game_settings_email_callback_show_legal_moves_toggle: {
            tokens: [
                ["text", "/callback/settings/user/email/showLegalMovesToggle"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_user_game_settings_email_callback_highlight_last_move_toggle: {
            tokens: [
                ["text", "/callback/settings/user/email/highlightLastMoveToggle"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_user_game_settings_email_callback_is_white_on_bottom_toggle: {
            tokens: [
                ["text", "/callback/settings/user/email/isWhiteOnBottom"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_user_game_settings_email_callback_move_list_display_type: {
            tokens: [
                ["text", "/callback/settings/user/email/moveListDisplayType"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_user_game_settings_email_callback_move_method: {
            tokens: [
                ["text", "/callback/settings/user/email/moveMethod"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_user_game_settings_email_callback_piece: {
            tokens: [
                ["text", "/callback/settings/user/email/pieceStyle"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_user_game_settings_email_callback_sound_toggle: {
            tokens: [
                ["text", "/callback/settings/user/email/soundToggle"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_user_game_settings_email_callback_show_timestamps: {
            tokens: [
                ["text", "/callback/settings/user/email/showTimestamps"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_user_game_settings_email_callback_sound_theme: {
            tokens: [
                ["text", "/callback/settings/user/email/soundTheme"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_2fa_login: {
            tokens: [
                ["text", "/2fa"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_fe_log_callback: {
            tokens: [
                ["text", "/metrics/log"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_classroom_room: {
            tokens: [
                ["variable", "/", "[^/]++", "id"],
                ["text", "/classroom"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        explorer_callback_move: {
            tokens: [
                ["text", "/callback/explorer/move"]
            ],
            defaults: [],
            requirements: [],
            hosttokens: [
                ["text", "www.chess-dev.com"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        explorer_callback_get_suggested_moves: {
            tokens: [
                ["text", "/callback/explorer/get-suggested-moves"]
            ],
            defaults: [],
            requirements: [],
            hosttokens: [
                ["text", "www.chess-dev.com"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_game_archive_callback: {
            tokens: [
                ["text", "/callback/games/archive"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["GET"],
            schemes: ["https"]
        },
        web_master_games_callback_search: {
            tokens: [
                ["text", "/callback/games/search"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["GET"],
            schemes: ["https"]
        },
        web_eco_callback_stats_fen_search: {
            tokens: [
                ["text", "/callback/eco/search/fen"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_user_callback_id_to_user_data: {
            tokens: [
                ["text", "/callback/user/id-to-data"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_library_callback_add_from_list_of_pgns_to_collection: {
            tokens: [
                ["text", "/actions/add-from-pgns"],
                ["variable", "/", "[^/]++", "uuid"],
                ["text", "/callback/library/collections"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_library_collection_add_bookmark: {
            tokens: [
                ["text", "/bookmarks"],
                ["variable", "/", "[^/]++", "uuid"],
                ["text", "/callback/library/collections"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_library_collection_add_lookup: {
            tokens: [
                ["text", "/lookups"],
                ["variable", "/", "[^/]++", "uuid"],
                ["text", "/callback/library/collections"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_library_collection_add_participant: {
            tokens: [
                ["text", "/participants"],
                ["variable", "/", "[^/]++", "uuid"],
                ["text", "/callback/library/collections"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_library_callback_add_from_pgn_to_collection: {
            tokens: [
                ["text", "/actions/add-from-pgn"],
                ["variable", "/", "[^/]++", "uuid"],
                ["text", "/callback/library/collections"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_library_callback_add_from_url_to_collection: {
            tokens: [
                ["text", "/actions/add-from-url"],
                ["variable", "/", "[^/]++", "uuid"],
                ["text", "/callback/library/collections"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_library_collection_download_games: {
            tokens: [
                ["text", "/actions/download-pgn"],
                ["variable", "/", "[^/]++", "uuid"],
                ["text", "/callback/library/collections"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_library_callback_collection_items: {
            tokens: [
                ["text", "/items"],
                ["variable", "/", "[^/]++", "uuid"],
                ["text", "/callback/library/collections"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["GET"],
            schemes: ["https"]
        },
        web_library_community_collections: {
            tokens: [
                ["text", "/callback/library/community/collections"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["GET"],
            schemes: ["https"]
        },
        web_library_callback_copy_into_new_collection: {
            tokens: [
                ["text", "/actions/copy-into-new"],
                ["variable", "/", "[^/]++", "uuid"],
                ["text", "/callback/library/collections"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_library_callback_delete_collection: {
            tokens: [
                ["variable", "/", "[^/]++", "uuid"],
                ["text", "/callback/library/collections"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["DELETE"],
            schemes: ["https"]
        },
        web_library_collection_get_lookups: {
            tokens: [
                ["text", "/lookups"],
                ["variable", "/", "[^/]++", "uuid"],
                ["text", "/callback/library/collections"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["GET"],
            schemes: ["https"]
        },
        web_library_bookmarks: {
            tokens: [
                ["text", "/callback/library/bookmarks"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["GET"],
            schemes: ["https"]
        },
        web_library_collections: {
            tokens: [
                ["text", "/callback/library/collections"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["GET"],
            schemes: ["https"]
        },
        web_library_callback_publish_collection: {
            tokens: [
                ["text", "/actions/publish"],
                ["variable", "/", "[^/]++", "uuid"],
                ["text", "/callback/library/collections"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_library_collection_remove_root_bookmark: {
            tokens: [
                ["text", "/actions/remove-root-bookmark"],
                ["variable", "/", "[^/]++", "uuid"],
                ["text", "/callback/library/collections"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_library_collection_remove_items: {
            tokens: [
                ["text", "/actions/remove-items"],
                ["variable", "/", "[^/]++", "uuid"],
                ["text", "/callback/library/collections"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_library_collection_remove_lookup: {
            tokens: [
                ["variable", "/", "[^/]++", "lookup"],
                ["text", "/lookups"],
                ["variable", "/", "[^/]++", "uuid"],
                ["text", "/callback/library/collections"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["DELETE"],
            schemes: ["https"]
        },
        web_library_collection_remove_participant: {
            tokens: [
                ["variable", "/", "[^/]++", "userId"],
                ["text", "/participants"],
                ["variable", "/", "[^/]++", "uuid"],
                ["text", "/callback/library/collections"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["DELETE"],
            schemes: ["https"]
        },
        web_library_shared_collections: {
            tokens: [
                ["text", "/callback/library/shared"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["GET"],
            schemes: ["https"]
        },
        web_library_callback_unpublish_collection: {
            tokens: [
                ["text", "/actions/unpublish"],
                ["variable", "/", "[^/]++", "uuid"],
                ["text", "/callback/library/collections"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_library_callback_update_lucg_details: {
            tokens: [
                ["text", "/details"],
                ["variable", "/", "[^/]++", "uuid"],
                ["text", "/callback/library/lucgs"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_library_callback_update_collection_privacy_settings: {
            tokens: [
                ["text", "/privacy-settings"],
                ["variable", "/", "[^/]++", "uuid"],
                ["text", "/callback/library/collections"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_library_collection_update_thumbnail: {
            tokens: [
                ["text", "/thumbnail"],
                ["variable", "/", "[^/]++", "uuid"],
                ["text", "/callback/library/collections"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_library_collection_upload_thumbnail: {
            tokens: [
                ["text", "/actions/upload-thumbnail"],
                ["variable", "/", "[^/]++", "uuid"],
                ["text", "/callback/library/collections"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_library_callback_create_collection: {
            tokens: [
                ["text", "/callback/library/collections"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_library_collection_update_collection: {
            tokens: [
                ["text", "/actions/update"],
                ["variable", "/", "[^/]++", "uuid"],
                ["text", "/library/collections"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_library_create_collection: {
            tokens: [
                ["text", "/library/collections"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_library_home: {
            tokens: [
                ["text", "/library"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["GET"],
            schemes: ["https"]
        },
        web_analysis_library_game_callback_self_analysis_create: {
            tokens: [
                ["text", "/callback/analysis/library/self"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_library_callback_add_single_game_from_pgn_to_collection: {
            tokens: [
                ["text", "/actions/add-single-game-from-pgn"],
                ["variable", "/", "[^/]++", "uuid"],
                ["text", "/callback/library/collections"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_user_game_settings_email_callback_front_settings: {
            tokens: [
                ["text", "/callback/settings/user/email/frontSettings"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_game_callback_claim_win_on_time: {
            tokens: [
                ["text", "/claim-win-on-time"],
                ["variable", "/", "\\d+", "id"],
                ["text", "/callback/game"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                id: "\\d+",
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_game_callback_decline_draw: {
            tokens: [
                ["text", "/decline-draw"],
                ["variable", "/", "\\d+", "id"],
                ["text", "/callback/game"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                id: "\\d+",
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_game_callback_disable_chat: {
            tokens: [
                ["text", "/disable-chat"],
                ["variable", "/", "\\d+", "id"],
                ["text", "/callback/game"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                id: "\\d+",
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_game_callback_offer_draw: {
            tokens: [
                ["text", "/offer-draw"],
                ["variable", "/", "\\d+", "id"],
                ["text", "/callback/game"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                id: "\\d+",
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_callback_load_game_live_data: {
            tokens: [
                ["variable", "/", "[^/]++", "id"],
                ["text", "/callback/live/game"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_computer_callback_load_game: {
            tokens: [
                ["variable", "/", "\\d+", "id"],
                ["text", "/computer/callback/game"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                id: "\\d+",
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_game_callback_get_chat_messages: {
            tokens: [
                ["text", "/chat-messages"],
                ["variable", "/", "\\d+", "id"],
                ["text", "/callback/game"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                id: "\\d+",
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["GET"],
            schemes: ["https"]
        },
        web_daily_callback_load_game: {
            tokens: [
                ["variable", "/", "\\d+", "id"],
                ["text", "/callback/daily/game"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                id: "\\d+",
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        pubapi_game_last_activity: {
            tokens: [
                ["variable", "/", "\\d+", "id"],
                ["text", "/int/game"]
            ],
            defaults: [],
            requirements: {
                id: "\\d+"
            },
            hosttokens: [
                ["text", "api.chess-dev.com"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_daily_callback_load_next_game: {
            tokens: [
                ["text", "/next"],
                ["variable", "/", "\\d+", "id"],
                ["text", "/callback/daily/game"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                id: "\\d+",
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_daily_callback_load_previous_game: {
            tokens: [
                ["text", "/previous"],
                ["variable", "/", "\\d+", "id"],
                ["text", "/callback/daily/game"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                id: "\\d+",
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_callback_load_previous_game_archive: {
            tokens: [
                ["text", "/previous"],
                ["variable", "/", "\\d+", "id"],
                ["variable", "/", "daily|live", "location"],
                ["text", "/callback/archive/game"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                id: "\\d+",
                location: "daily|live",
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["GET"],
            schemes: ["https"]
        },
        web_callback_load_next_game_archive: {
            tokens: [
                ["text", "/next"],
                ["variable", "/", "\\d+", "id"],
                ["variable", "/", "daily|live", "location"],
                ["text", "/callback/archive/game"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                id: "\\d+",
                location: "daily|live",
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["GET"],
            schemes: ["https"]
        },
        web_game_callback_post_in_chat: {
            tokens: [
                ["text", "/post-in-chat"],
                ["variable", "/", "\\d+", "id"],
                ["text", "/callback/game"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                id: "\\d+",
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_user_game_notes_callback_post_note: {
            tokens: [
                ["text", "/post_note"],
                ["variable", "/", "[^/]++", "id"],
                ["text", "/callback/user_game_notes/game"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_game_callback_get_player_rating_delta: {
            tokens: [
                ["text", "/player-rating-delta"],
                ["variable", "/", "\\d+", "id"],
                ["text", "/callback/game"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                id: "\\d+",
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["GET"],
            schemes: ["https"]
        },
        web_game_callback_resign: {
            tokens: [
                ["text", "/resign"],
                ["variable", "/", "\\d+", "id"],
                ["text", "/callback/game"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                id: "\\d+",
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_game_callback_submit_move: {
            tokens: [
                ["text", "/submit-move"],
                ["variable", "/", "\\d+", "id"],
                ["text", "/callback/game"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                id: "\\d+",
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_game_callback_takeback_ply: {
            tokens: [
                ["text", "/takeback-ply"],
                ["variable", "/", "\\d+", "id"],
                ["text", "/callback/game"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                id: "\\d+",
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_classroom: {
            tokens: [
                ["text", "/classroom"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_themes_data_callback: {
            tokens: [
                ["text", "/callback/themes/data"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["GET"],
            schemes: ["https"]
        },
        web_classroom_callback_twilio_token: {
            tokens: [
                ["variable", "/", "[^/]++", "roomId"],
                ["text", "/callback/classroom/token"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["GET"],
            schemes: ["https"]
        },
        web_classroom_callback_twilio_room: {
            tokens: [
                ["variable", "/", "[^/]++", "roomId"],
                ["text", "/callback/classroom/twilio/room"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["GET"],
            schemes: ["https"]
        },
        web_game_live: {
            tokens: [
                ["variable", "/", "[^/]++", "id"],
                ["text", "/game/live"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_game_rcn: {
            tokens: [
                ["variable", "/", "[^/]++", "id"],
                ["text", "/game/rcn"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_puzzles_mode_battle_view: {
            tokens: [
                ["variable", "/", "[^/]++", "shortUuid"],
                ["text", "/puzzles/battle"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_league_callback_user_league_search: {
            tokens: [
                ["variable", "/", "[^/]++", "username"],
                ["text", "/callback/leagues/user-league/search"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_security_register: {
            tokens: [
                ["text", "/register"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["GET"],
            schemes: ["https"]
        },
        web_security_login_and_go: {
            tokens: [
                ["text", "/login_and_go"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_member_callback_trophy_list: {
            tokens: [
                ["variable", "/", "[^/]++", "trophyType"],
                ["variable", "/", "[^/]++", "username"],
                ["text", "/callback/member/trophy"]
            ],
            defaults: {
                trophyType: null,
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_callback_get_trophies: {
            tokens: [
                ["text", "/callback/trophies"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_user_trophy_showcase_callback: {
            tokens: [
                ["text", "/showcase"],
                ["variable", "/", "[^/]++", "username"],
                ["text", "/callback/user/trophy"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_callback_count_user_trophies: {
            tokens: [
                ["variable", "/", "[^/]++", "username"],
                ["text", "/callback/count/user_trophy"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_feature_trophy_callback: {
            tokens: [
                ["variable", "/", "0|1", "featured"],
                ["variable", "/", "\\d+", "id"],
                ["text", "/callback/feature/trophy"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                id: "\\d+",
                featured: "0|1",
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_award_trophy_callback: {
            tokens: [
                ["variable", "/", "\\d+", "trophyId"],
                ["variable", "/", "[^/]++", "username"],
                ["text", "/callback/award/trophy"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                trophyId: "\\d+",
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_blog_view: {
            tokens: [
                ["variable", "/", ".+", "url"],
                ["text", "/blog"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                url: ".+",
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_member_callback_block_member: {
            tokens: [
                ["variable", "/", "[^/]++", "username"],
                ["text", "/callback/member/block"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_user_callback_delete_comment: {
            tokens: [
                ["variable", "/", "\\d+", "id"],
                ["text", "/callback/comment"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                id: "\\d+",
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["DELETE"],
            schemes: ["https"]
        },
        web_user_callback_get_available_flair: {
            tokens: [
                ["variable", "/", "[^/]++", "username"],
                ["text", "/callback/user/get-available-flair"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_user_callback_load_notes: {
            tokens: [
                ["text", "/callback/user/notes"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["GET"],
            schemes: ["https"]
        },
        web_member_callback_mute_account: {
            tokens: [
                ["variable", "/", "[^/]++", "user"],
                ["text", "/callback/member/mute-account"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_user_callback_post_note: {
            tokens: [
                ["text", "/callback/user/note"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_user_callback_set_flair: {
            tokens: [
                ["text", "/callback/user/set-flair"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_user_callback_set_status: {
            tokens: [
                ["text", "/callback/user/set-status"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_user_settings_edit: {
            tokens: [
                ["text", "/settings"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_member_view: {
            tokens: [
                ["variable", "/", "[^/]++", "username"],
                ["text", "/member"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_policies_community: {
            tokens: [
                ["text", "/legal/community"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_member_callback_disable: {
            tokens: [
                ["variable", "/", "\\d+", "id"],
                ["text", "/callback/members/disable"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                id: "\\d+",
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["DELETE"],
            schemes: ["https"]
        },
        web_member_enable: {
            tokens: [
                ["variable", "/", "\\d+", "id"],
                ["text", "/members/enable"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                id: "\\d+",
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_user_home: {
            tokens: [
                ["text", "/home"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_master_player_view: {
            tokens: [
                ["variable", "/", ".+", "url"],
                ["text", "/players"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                url: ".+",
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_member_mute: {
            tokens: [
                ["variable", "/", "[^/]++", "username"],
                ["text", "/member/mute"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_member_callback_remove_avatar: {
            tokens: [
                ["variable", "/", "[^/]++", "username"],
                ["text", "/callback/member/remove_avatar"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["DELETE"],
            schemes: ["https"]
        },
        web_user_callback_remove_user_custom_background: {
            tokens: [
                ["variable", "/", "[^/]++", "user"],
                ["text", "/callback/remove/user_custom_background"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_member_reset_flair: {
            tokens: [
                ["variable", "/", "[^/]++", "username"],
                ["text", "/member/reset_flair"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_member_unmute: {
            tokens: [
                ["variable", "/", "[^/]++", "username"],
                ["text", "/member/unmute"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_play_new: {
            tokens: [
                ["text", "/play/online/new"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_verification_index: {
            tokens: [
                ["text", "/verified"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_archive_index: {
            tokens: [
                ["variable", "/", "[^/]++", "username"],
                ["text", "/games/archive"]
            ],
            defaults: {
                username: null,
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_member_titled_players: {
            tokens: [
                ["text", "/members/titled-players"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_user_settings_themes: {
            tokens: [
                ["text", "/settings/themes"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_user_settings_board: {
            tokens: [
                ["text", "/settings/board"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_article_view: {
            tokens: [
                ["variable", "/", "[^/]++", "url"],
                ["text", "/article/view"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_coaches: {
            tokens: [
                ["text", "/coaches"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_classroom_callback_get_countries: {
            tokens: [
                ["text", "/callback/classroom/get-countries"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["GET"],
            schemes: ["https"]
        },
        web_master_games_callback_player: {
            tokens: [
                ["text", "/callback/games/player"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["GET"],
            schemes: ["https"]
        },
        web_library_callback_single_collection: {
            tokens: [
                ["variable", "/", "[^/]++", "uuid"],
                ["text", "/callback/library/collections"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["GET"],
            schemes: ["https"]
        },
        web_user_callback_popup: {
            tokens: [
                ["variable", "/", "[^/]++", "username"],
                ["text", "/callback/user/popup"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_friend_callback_friends_search: {
            tokens: [
                ["text", "/search"],
                ["variable", "/", "[^/]++", "user"],
                ["text", "/callback/friends"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_classroom_import_study: {
            tokens: [
                ["text", "/callback/classroom/import-study"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["GET"],
            schemes: ["https"]
        },
        explorer_index: {
            tokens: [
                ["text", "/explorer"]
            ],
            defaults: [],
            requirements: [],
            hosttokens: [
                ["text", "www.chess-dev.com"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_openings_view: {
            tokens: [
                ["variable", "/", "[^/]++", "cleanUrl"],
                ["text", "/openings"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_membership: {
            tokens: [
                ["text", "/membership"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_master_games_search: {
            tokens: [
                ["text", "/games/search"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["GET"],
            schemes: ["https"]
        },
        web_analysis_board_editor: {
            tokens: [
                ["text", "/analysis"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_practice_custom: {
            tokens: [
                ["text", "/practice/custom"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_play_computer: {
            tokens: [
                ["text", "/play/computer"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_user_callback_get_board_settings: {
            tokens: [
                ["text", "/callback/board-settings"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_article_callback_list_authors: {
            tokens: [
                ["text", "/callback/articles/authors"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_blog_callback_authors: {
            tokens: [
                ["text", "/callback/blogs/authors"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_content_callback_load_more: {
            tokens: [
                ["variable", "/", "[1-9]+[0-9]*", "page"],
                ["variable", "/", "article|news|blog", "contentType"],
                ["text", "/callback/content/list"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                page: "[1-9]+[0-9]*",
                contentType: "article|news|blog",
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_news_callback_list_authors: {
            tokens: [
                ["text", "/callback/news/authors"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_content_callback_feature_article: {
            tokens: [
                ["variable", "/", "[^/]++", "id"],
                ["text", "/callback/content/feature/article"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_blog_callback_feature: {
            tokens: [
                ["text", "/headline"],
                ["variable", "/", "[^/]++", "id"],
                ["text", "/callback/blog"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_content_callback_feature_lesson_course: {
            tokens: [
                ["variable", "/", "[^/]++", "id"],
                ["text", "/callback/content/feature/lesson_course"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_content_callback_feature_news: {
            tokens: [
                ["variable", "/", "[^/]++", "id"],
                ["text", "/callback/content/feature/news"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_content_callback_feature_chess_video: {
            tokens: [
                ["variable", "/", "[^/]++", "id"],
                ["text", "/callback/content/feature/chess_video"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_user_callback_set_content_language: {
            tokens: [
                ["text", "/callback/user/content-language/set"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_survey_callback_vote: {
            tokens: [
                ["variable", "/", "\\d+", "optionId"],
                ["text", "/vote"],
                ["variable", "/", "\\d+", "id"],
                ["text", "/callback/survey"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                id: "\\d+",
                optionId: "\\d+",
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_team_match_view: {
            tokens: [
                ["variable", "/", "\\d+", "match"],
                ["text", "/club/matches"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                match: "\\d+",
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_tournament_view: {
            tokens: [
                ["variable", "/", "[^/]++", "url"],
                ["text", "/tournament"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_user_callback_report_user: {
            tokens: [
                ["text", "/callback/report-user"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_tv_callback_report: {
            tokens: [
                ["variable", "/", "[^/]++", "video"],
                ["variable", "/", "[^/]++", "reason"],
                ["text", "/chess-tv/callback/report"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_about: {
            tokens: [
                ["text", "/about"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_user_callback_username_search: {
            tokens: [
                ["variable", "/", "[^/]++", "username"],
                ["text", "/callback/user/search"]
            ],
            defaults: {
                username: null,
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_league_division: {
            tokens: [
                ["variable", "/", "[\\w]{6,}", "division"],
                ["variable", "/", "\\w+", "league"],
                ["text", "/leagues"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                league: "\\w+",
                division: "[\\w]{6,}",
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_stats: {
            tokens: [
                ["variable", "/", "[^/]++", "username"],
                ["text", "/stats"]
            ],
            defaults: {
                username: null,
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_friend_accept_request_callback: {
            tokens: [
                ["variable", "/", "[^/]++", "user"],
                ["text", "/callback/friend/accept"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["PUT"],
            schemes: ["https"]
        },
        web_friend_request_callback: {
            tokens: [
                ["variable", "/", "[^/]++", "user"],
                ["text", "/callback/friend/request"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_friend_cancel_request_callback: {
            tokens: [
                ["variable", "/", "[^/]++", "user"],
                ["text", "/callback/friend/cancel/request"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_user_callback_valid_username: {
            tokens: [
                ["text", "/callback/user/valid"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_friend_decline_request_callback: {
            tokens: [
                ["variable", "/", "[^/]++", "user"],
                ["text", "/callback/friend/decline/request"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["DELETE"],
            schemes: ["https"]
        },
        web_friend_delete_callback: {
            tokens: [
                ["variable", "/", "[^/]++", "user"],
                ["text", "/callback/friend/delete"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["DELETE"],
            schemes: ["https"]
        },
        web_user_callback_dismiss_follow_suggestion: {
            tokens: [
                ["variable", "/", "[^/]++", "username"],
                ["text", "/callback/user/dismiss_follow"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                id: "\\d+",
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_user_callback_report_reasons: {
            tokens: [
                ["text", "/callback/report-user"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        pubapi_player_profile: {
            tokens: [
                ["variable", "/", "[^/]++", "username"],
                ["text", "/pub/player"]
            ],
            defaults: [],
            requirements: [],
            hosttokens: [
                ["text", "api.chess-dev.com"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_user_callback_follow_suggestions: {
            tokens: [
                ["text", "/callback/user/follow_suggestions"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_user_callback_recent_opponents: {
            tokens: [
                ["text", "/callback/recent/opponents"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_security_callback_user_roles: {
            tokens: [
                ["text", "/callback/security/user/roles"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_guest_update_skill_level: {
            tokens: [
                ["text", "/guest/update-skill-level"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_user_callback_set_archive_view: {
            tokens: [
                ["text", "/callback/user/archive-view"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_user_callback_set_fair_play_agree: {
            tokens: [
                ["variable", "/", "1|0", "fairPlayAgree"],
                ["text", "/callback/user/set-fair-play-agree"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                fairPlayAgree: "1|0",
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_user_callback_set_home_recent_content_type: {
            tokens: [
                ["text", "/callback/user/home-recent-content-type"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_member_callback_track_member: {
            tokens: [
                ["variable", "/", "[^/]++", "username"],
                ["text", "/callback/member/track"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_member_callback_unblock_member: {
            tokens: [
                ["variable", "/", "[^/]++", "username"],
                ["text", "/callback/member/unblock"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_member_callback_untrack_member: {
            tokens: [
                ["variable", "/", "[^/]++", "username"],
                ["text", "/callback/member/untrack"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_play_app_view: {
            tokens: [
                ["variable", "/", "ios|iphone|android|huawei", "type"],
                ["text", "/play/apps"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                type: "ios|iphone|android|huawei",
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_index: {
            tokens: [
                ["text", "/"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_user_callback_custom_criteria_search: {
            tokens: [
                ["text", "/callback/user/custom-criteria-search"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_friend_registration_invite_link_callback: {
            tokens: [
                ["text", "/callback/friend/registration-invite-link"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: [],
            schemes: ["https"]
        },
        web_game_callback_shared: {
            tokens: [
                ["variable", "/", "facebook|twitter", "type"],
                ["text", "/callback/game/shared"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                type: "facebook|twitter",
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_tv_callback_set_watched: {
            tokens: [
                ["variable", "/", "[^/]++", "url"],
                ["text", "/chess-tv/callback/set-watched"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        },
        web_video_callback_set_watched: {
            tokens: [
                ["variable", "/", "[^/]++", "video"],
                ["text", "/video/callback/setWatched"]
            ],
            defaults: {
                subdomain: "www"
            },
            requirements: {
                subdomain: "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy"
            },
            hosttokens: [
                ["text", ".chess-dev.com"],
                ["variable", "", "www|schach|ru|uk|ajedrez|fr|scacchi|sakk|schaken|szachy", "subdomain"]
            ],
            methods: ["POST"],
            schemes: ["https"]
        }
    }),
    function() {
        var e, t, s, a, o, n, r, i, l, c, d, u = {
                4593: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        Z: function() {
                            return i
                        }
                    });
                    var a = s(7203),
                        o = s(6673);
                    let n = null;
                    var r = new class VisibilityObserver {
                        constructor() {
                            return null == n && (n = this, this.observer = new IntersectionObserver((e => {
                                e.forEach((e => {
                                    e.intersectionRatio > 0 && (o.Z.emit("visibility-observer-change", e.target), this.observer.unobserve(e.target))
                                }))
                            }), {
                                rootMargin: "200px 0px",
                                threshold: .01
                            })), n
                        }
                        observe(e) {
                            this.observer.observe(e)
                        }
                        unobserve(e) {
                            this.observer.unobserve(e)
                        }
                    };
                    const cacheBinding = (e, t) => {
                            e.dataset.chessSrc = t.value.src, e.dataset.chessSrcset = t.value.srcset
                        },
                        setAttributes = e => {
                            const t = e.dataset.chessSrc,
                                s = "false" !== e.dataset.chessSrcset ? `${(0,a.q)(t)} 2x` : void 0;
                            t && e.setAttribute("src", t), s && e.setAttribute("srcset", s)
                        };
                    var i = {
                        bind: (e, t) => {
                            cacheBinding(e, t), o.Z.on("visibility-observer-change", (t => {
                                t === e && (setAttributes(e), e.dataset.visible = !0, r.unobserve(e))
                            })), r.observe(e)
                        },
                        componentUpdated(e, t) {
                            cacheBinding(e, t), void 0 !== e.dataset.visible && setAttributes(e)
                        }
                    }
                },
                9947: function(e, t) {
                    "use strict";
                    t.Z = {
                        props: {
                            darkMode: {
                                type: Boolean,
                                default: !1
                            },
                            lightMode: {
                                type: Boolean,
                                default: !1
                            }
                        },
                        computed: {
                            themeClasses() {
                                return {
                                    "light-mode": this.lightMode,
                                    "dark-mode": this.darkMode
                                }
                            }
                        }
                    }
                },
                2597: function(e, t) {
                    "use strict";
                    t.Z = {
                        props: {
                            isDarkMode: {
                                type: Boolean,
                                default: !1
                            }
                        },
                        methods: {
                            componentClasses() {
                                return {
                                    [this.$style.component]: !0,
                                    [this.$style.darkMode]: this.isDarkMode
                                }
                            }
                        }
                    }
                },
                4606: function(e, t) {
                    var s, a, o, n;
                    n = function() {
                        "use strict";
                        var e = Object.assign || function(e) {
                                for (var t = 1; t < arguments.length; t++) {
                                    var s = arguments[t];
                                    for (var a in s) Object.prototype.hasOwnProperty.call(s, a) && (e[a] = s[a])
                                }
                                return e
                            },
                            t = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                                return typeof e
                            } : function(e) {
                                return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e
                            },
                            s = function() {
                                function defineProperties(e, t) {
                                    for (var s = 0; s < t.length; s++) {
                                        var a = t[s];
                                        a.enumerable = a.enumerable || !1, a.configurable = !0, "value" in a && (a.writable = !0), Object.defineProperty(e, a.key, a)
                                    }
                                }
                                return function(e, t, s) {
                                    return t && defineProperties(e.prototype, t), s && defineProperties(e, s), e
                                }
                            }();

                        function _classCallCheck(e, t) {
                            if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")
                        }
                        var a = function() {
                            function Router2(e, t) {
                                _classCallCheck(this, Router2), this.context_ = e || {
                                    base_url: "",
                                    prefix: "",
                                    host: "",
                                    port: "",
                                    scheme: "",
                                    locale: ""
                                }, this.setRoutes(t || {})
                            }
                            return s(Router2, [{
                                key: "setRoutingData",
                                value: function setRoutingData(e) {
                                    this.setBaseUrl(e.base_url), this.setRoutes(e.routes), "prefix" in e && this.setPrefix(e.prefix), "port" in e && this.setPort(e.port), "locale" in e && this.setLocale(e.locale), this.setHost(e.host), this.setScheme(e.scheme)
                                }
                            }, {
                                key: "setRoutes",
                                value: function setRoutes(e) {
                                    this.routes_ = Object.freeze(e)
                                }
                            }, {
                                key: "getRoutes",
                                value: function getRoutes() {
                                    return this.routes_
                                }
                            }, {
                                key: "setBaseUrl",
                                value: function setBaseUrl(e) {
                                    this.context_.base_url = e
                                }
                            }, {
                                key: "getBaseUrl",
                                value: function getBaseUrl() {
                                    return this.context_.base_url
                                }
                            }, {
                                key: "setPrefix",
                                value: function setPrefix(e) {
                                    this.context_.prefix = e
                                }
                            }, {
                                key: "setScheme",
                                value: function setScheme(e) {
                                    this.context_.scheme = e
                                }
                            }, {
                                key: "getScheme",
                                value: function getScheme() {
                                    return this.context_.scheme
                                }
                            }, {
                                key: "setHost",
                                value: function setHost(e) {
                                    this.context_.host = e
                                }
                            }, {
                                key: "getHost",
                                value: function getHost() {
                                    return this.context_.host
                                }
                            }, {
                                key: "setPort",
                                value: function setPort(e) {
                                    this.context_.port = e
                                }
                            }, {
                                key: "getPort",
                                value: function getPort() {
                                    return this.context_.port
                                }
                            }, {
                                key: "setLocale",
                                value: function setLocale(e) {
                                    this.context_.locale = e
                                }
                            }, {
                                key: "getLocale",
                                value: function getLocale() {
                                    return this.context_.locale
                                }
                            }, {
                                key: "buildQueryParams",
                                value: function buildQueryParams(e, s, a) {
                                    var o = this,
                                        n = void 0,
                                        r = new RegExp(/\[\]$/);
                                    if (s instanceof Array) s.forEach((function(s, n) {
                                        r.test(e) ? a(e, s) : o.buildQueryParams(e + "[" + ("object" === (void 0 === s ? "undefined" : t(s)) ? n : "") + "]", s, a)
                                    }));
                                    else if ("object" === (void 0 === s ? "undefined" : t(s)))
                                        for (n in s) this.buildQueryParams(e + "[" + n + "]", s[n], a);
                                    else a(e, s)
                                }
                            }, {
                                key: "getRoute",
                                value: function getRoute(e) {
                                    var t = [this.context_.prefix + e, e + "." + this.context_.locale, this.context_.prefix + e + "." + this.context_.locale, e];
                                    for (var s in t)
                                        if (t[s] in this.routes_) return this.routes_[t[s]];
                                    throw new Error('The route "' + e + '" does not exist.')
                                }
                            }, {
                                key: "generate",
                                value: function generate(t, s) {
                                    var a = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
                                        o = this.getRoute(t),
                                        n = s || {},
                                        r = e({}, n),
                                        i = "",
                                        l = !0,
                                        c = "",
                                        d = void 0 === this.getPort() || null === this.getPort() ? "" : this.getPort();
                                    if (o.tokens.forEach((function(e) {
                                            if ("text" === e[0]) return i = Router2.encodePathComponent(e[1]) + i, void(l = !1);
                                            if ("variable" !== e[0]) throw new Error('The token type "' + e[0] + '" is not supported.');
                                            var s = o.defaults && e[3] in o.defaults;
                                            if (!1 === l || !s || e[3] in n && n[e[3]] != o.defaults[e[3]]) {
                                                var a = void 0;
                                                if (e[3] in n) a = n[e[3]], delete r[e[3]];
                                                else {
                                                    if (!s) {
                                                        if (l) return;
                                                        throw new Error('The route "' + t + '" requires the parameter "' + e[3] + '".')
                                                    }
                                                    a = o.defaults[e[3]]
                                                }
                                                if (!0 !== a && !1 !== a && "" !== a || !l) {
                                                    var c = Router2.encodePathComponent(a);
                                                    "null" === c && null === a && (c = ""), i = e[1] + c + i
                                                }
                                                l = !1
                                            } else s && e[3] in r && delete r[e[3]]
                                        })), "" === i && (i = "/"), o.hosttokens.forEach((function(e) {
                                            var t = void 0;
                                            "text" !== e[0] ? "variable" === e[0] && (e[3] in n ? (t = n[e[3]], delete r[e[3]]) : o.defaults && e[3] in o.defaults && (t = o.defaults[e[3]]), c = e[1] + t + c) : c = e[1] + c
                                        })), i = this.context_.base_url + i, o.requirements && "_scheme" in o.requirements && this.getScheme() != o.requirements._scheme) {
                                        var u = c || this.getHost();
                                        i = o.requirements._scheme + "://" + u + (u.indexOf(":" + d) > -1 || "" === d ? "" : ":" + d) + i
                                    } else if (void 0 !== o.schemes && void 0 !== o.schemes[0] && this.getScheme() !== o.schemes[0]) {
                                        var m = c || this.getHost();
                                        i = o.schemes[0] + "://" + m + (m.indexOf(":" + d) > -1 || "" === d ? "" : ":" + d) + i
                                    } else c && this.getHost() !== c + (c.indexOf(":" + d) > -1 || "" === d ? "" : ":" + d) ? i = this.getScheme() + "://" + c + (c.indexOf(":" + d) > -1 || "" === d ? "" : ":" + d) + i : !0 === a && (i = this.getScheme() + "://" + this.getHost() + (this.getHost().indexOf(":" + d) > -1 || "" === d ? "" : ":" + d) + i);
                                    if (Object.keys(r).length > 0) {
                                        var h = void 0,
                                            p = [],
                                            b = function add2(e, t) {
                                                t = null === (t = "function" == typeof t ? t() : t) ? "" : t, p.push(Router2.encodeQueryComponent(e) + "=" + Router2.encodeQueryComponent(t))
                                            };
                                        for (h in r) this.buildQueryParams(h, r[h], b);
                                        i = i + "?" + p.join("&")
                                    }
                                    return i
                                }
                            }], [{
                                key: "getInstance",
                                value: function getInstance() {
                                    return o
                                }
                            }, {
                                key: "setData",
                                value: function setData(e) {
                                    Router2.getInstance().setRoutingData(e)
                                }
                            }, {
                                key: "customEncodeURIComponent",
                                value: function customEncodeURIComponent(e) {
                                    return encodeURIComponent(e).replace(/%2F/g, "/").replace(/%40/g, "@").replace(/%3A/g, ":").replace(/%21/g, "!").replace(/%3B/g, ";").replace(/%2C/g, ",").replace(/%2A/g, "*").replace(/\(/g, "%28").replace(/\)/g, "%29").replace(/'/g, "%27")
                                }
                            }, {
                                key: "encodePathComponent",
                                value: function encodePathComponent(e) {
                                    return Router2.customEncodeURIComponent(e).replace(/%3D/g, "=").replace(/%2B/g, "+").replace(/%21/g, "!").replace(/%7C/g, "|")
                                }
                            }, {
                                key: "encodeQueryComponent",
                                value: function encodeQueryComponent(e) {
                                    return Router2.customEncodeURIComponent(e).replace(/%3F/g, "?")
                                }
                            }]), Router2
                        }();
                        a.Route, a.Context;
                        var o = new a;
                        return {
                            Router: a,
                            Routing: o
                        }
                    }(), a = [], s = n.Routing, void 0 === (o = "function" == typeof s ? s.apply(t, a) : s) || (e.exports = o)
                },
                4452: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        MD: function() {
                            return getUserPopoverPosition
                        },
                        bt: function() {
                            return getPosition
                        },
                        _O: function() {
                            return positionTooltip
                        },
                        fs: function() {
                            return removePositionStyle
                        }
                    });
                    var a = s(3644);
                    const o = "top",
                        n = "right",
                        r = "bottom",
                        i = "left",
                        l = "bottom-left",
                        getUserPopoverPosition = (e, t = 172, s = 300) => {
                            const a = {
                                    top: null,
                                    left: null,
                                    right: null,
                                    x: null,
                                    y: null
                                },
                                l = e.width / 2,
                                c = window,
                                d = e.bottom + t < c.innerHeight,
                                u = s - 28 - 12,
                                m = s - u,
                                h = e.left + l + u < c.innerWidth;
                            return d ? (a.top = e.bottom, a.y = r) : (a.top = e.top - t, a.y = o), h ? (a.left = e.left + l - m, a.right = window.innerWidth - e.right, a.x = n) : (a.left = e.left + l - u, a.right = window.innerWidth - e.right, a.x = i), a.top = Math.round(a.top), a.left = Math.round(a.left), a.right = Math.round(a.right), a
                        },
                        getPosition = (e, t, s, a = 0) => {
                            if (!e || !t) return null;
                            const c = e.getBoundingClientRect(),
                                d = {},
                                u = window.innerWidth - c.x,
                                canFitTop = () => c.top - (t.clientHeight + a) > 0,
                                canFitLeft = () => c.left - (t.clientWidth + a) > 0;
                            return s === o && canFitTop() || s === r && !(c.bottom + t.clientHeight + a < window.innerHeight) ? (d.left = c.left - (t.clientWidth - c.width) / 2, d.rtlLeft = u - t.clientWidth / 2 - c.width / 2, d.top = c.top - t.clientHeight - a, d.placement = o) : s === r || s === o && !canFitTop() ? (d.left = c.left - (t.clientWidth - c.width) / 2, d.rtlLeft = u - t.clientWidth / 2 - c.width / 2, d.top = c.bottom + a, d.placement = r) : s === i && canFitLeft() || s === n && !(c.right + t.clientWidth + a < window.innerWidth) ? (d.left = c.left - t.clientWidth - a, d.rtlLeft = c.rtlLeft - t.clientWidth - a, d.top = c.top - (t.clientHeight - c.height) / 2, d.placement = i) : s === n || s === i && !canFitLeft() ? (d.left = c.right + a, d.rtlLeft = c.rtlLeft + a, d.top = c.top - (t.clientHeight - c.height) / 2, d.placement = n) : s === l && (d.left = c.right - c.width / 2 - t.clientWidth - a, d.rtlLeft = c.rtlLeft - t.clientWidth - a, d.top = c.bottom + a, d.placement = l), {
                                left: Math.round(d.left),
                                placement: d.placement,
                                rtlLeft: Math.round(d.rtlLeft),
                                top: Math.round(d.top)
                            }
                        },
                        positionTooltip = (e, t, s, o = 0) => {
                            if (!e || !t) return null;
                            const n = getPosition(e, t, s, o);
                            return (0, a.t)() ? t.style.transform = `translate(-${n.rtlLeft}px, ${n.top}px)` : t.style.transform = `translate(${n.left}px, ${n.top}px)`, t.classList.add(n.placement), t
                        },
                        removePositionStyle = e => e ? (e.style.transform = "translate(-100%, -100%)", e.classList.remove(i, n, r, o), e) : null
                },
                3157: function(e, t, s) {
                    "use strict";

                    function getECOPath() {
                        return `${self.location.origin}${window.Config.pathToEcoJson}`
                    }
                    s.d(t, {
                        K: function() {
                            return getECOPath
                        }
                    })
                },
                169: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        GO: function() {
                            return a
                        }
                    });
                    const a = {
                        PUZZLE_BATTLE_CHALLENGE_TOASTER: "puzzle-battle-challenge-toaster",
                        PUZZLE_BATTLE_CHALLENGE_USER: "puzzle-battle-challenge-user",
                        HOME_NOTIFICATIONS: "home-sb-notifications",
                        LOGIN_REGISTER_MODAL: "login-register-modal",
                        OFFLINE_CHALLENGE_TOASTER: "offline-challenge-toaster",
                        NAV_ROOT: "sb",
                        NOTIFICATION_TOASTERS: "notification-toasters",
                        SHAREABLE_GAME_URL_MODAL: "shareable-game-url-modal",
                        SHAREABLE_GAME_SHORT_UUID: "shareable-game-short-uuid"
                    }
                },
                7835: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        R: function() {
                            return a
                        }
                    });
                    const a = {
                        BOARD_IMAGES: "chessboard_board_images",
                        BODY_TARGET_FOR_ONBOARD_AND_UPGRADE_MODALS: "body_target_for_onboard_and_upgrade_modals",
                        CLUBS_SEARCH_SORTING_BEST_MATCH: "clubs_search_sorting_best_match",
                        CHESSBOARD_BETA: "chessboard_beta",
                        CHESSBOARD_EFFECTS_SYNC: "chessboard_annotations_effects_sync",
                        CHESSBOARD_REPORTING_PLUGIN: "chessboard_loggly_error_reporting",
                        CHESSBOARD_RECORDER_PLUGIN: "chessboard_recorder_plugin",
                        CHESSTV_DETAILS: "additional_event_details_for_chesstv",
                        DAILY_PUZZLE_PAYWALL: "web_daily_puzzle_paywall",
                        EVENTS_REDIRECT: "new_events_nav_redirect",
                        GAME_REVIEW: "analysis_game_review",
                        HOME_COACH_TOOLTIPS: "home_coach_tooltips",
                        HOME_PAGE_PRODUCT: "home_page_product",
                        IS_LIVE: "isLive",
                        IS_NOT_MESSAGEABLE_REASON: "is_not_messageable_reason",
                        LEADERBOARD_TREND: "client_leaderboard_trend",
                        LEAGUES_PRODUCT: "leagues_product",
                        LEAGUES_DIVISION_DROPDOWN: "leagues_division_dropdown",
                        LEAGUES_LEADERBOARD_DROPDOWN: "leagues_leaderboard_dropdown",
                        UPGRADE_MODAL_COURSE_COMPLETION: "lessons_upgrade_modal_course_completion",
                        OPENING_EXPLORER_LINK: "opening_explorer_link",
                        OPENING_SEARCH_AUTOFILL: "opening_search_autofill",
                        PGN_ANNOTATIONS: "pgn_annotation_for_download",
                        POST_NOTE_WITH_TEXTAREA: "post_note_with_textarea",
                        PUZZLE_RUSH_LEADERBOARD_FIX: "puzzle_rush_leaderboard_fix",
                        SEO_EXIT_RETENTION_MODAL: "seo_exit_retention_modal",
                        SHOW_MEMBERSHIP_ICON_FALLBACK: "show_membership_icon_fallback",
                        SPLIT_SEARCH_AUTOFILL: "split_search_autofill_requests",
                        VS_PERSONALITIES_SAVE_REVIEW: "vs_personalities_save_review",
                        WDL_EVAL_BAR_OPTION: "wdl_eval_bar_option"
                    }
                },
                942: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        F: function() {
                            return hasFeatureAccess
                        }
                    });
                    var a = s(169);
                    const o = {},
                        n = document.getElementById(a.GO.NAV_ROOT),
                        hasFeatureAccess = (e, t) => {
                            var s, a;
                            if (null == (a = null == (s = window.chesscom) ? void 0 : s.features) ? void 0 : a.includes(e)) return !0;
                            const r = t || n;
                            return o[e] || (o[e] = Boolean(r && r.getAttribute(e))), o[e]
                        }
                },
                5213: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        H: function() {
                            return BaseComponent
                        }
                    });
                    var a = s(3291);
                    class BaseComponent extends HTMLElement {
                        constructor() {
                            super(), this.boardId = null, this.boardInitializedHandler = this.boardInitialized.bind(this)
                        }
                        static get observedAttributes() {
                            return [a._.ObservedAttributes.BoardId]
                        }
                        attributeChangedCallback() {
                            this.createOnNextTick()
                        }
                        boardInitialized({
                            detail: e
                        }) {
                            const t = `board-${e}`;
                            this.boardId = t, this.setAttribute(a._.ObservedAttributes.BoardId, t), this.boardReady()
                        }
                        connectedCallback() {
                            this.createOnNextTick()
                        }
                        disconnectedCallback() {
                            this.destroy()
                        }
                        getBoard() {
                            const e = this.boardId && document.getElementById(this.boardId);
                            e && (this.board = e)
                        }
                        destroy() {
                            var e, t;
                            this.componentDestroy(), null == (t = null == (e = this.board) ? void 0 : e.removeEventListener) || t.call(e, a._.Events.BoardInitialized, this.boardInitializedHandler)
                        }
                        createOnNextTick() {
                            clearTimeout(this.timeout), this.timeout = window.setTimeout((() => {
                                this.create(), this.attributesChanged()
                            }))
                        }
                        create() {
                            var e, t, s, o, n;
                            const r = this.getAttribute(a._.ObservedAttributes.BoardId);
                            r && this.boardId === r || (this.boardId = r, this.destroy(), this.componentReady(), this.getBoard(), (null == (e = this.board) ? void 0 : e.game) ? (null == (n = (o = this.board).removeEventListener) || n.call(o, a._.Events.BoardInitialized, this.boardInitializedHandler), this.boardReady()) : null == (s = null == (t = this.board) ? void 0 : t.addEventListener) || s.call(t, a._.Events.BoardInitialized, this.boardInitializedHandler))
                        }
                        addBoardEventListener(e, t) {
                            var s, a;
                            null == (a = null == (s = this.board) ? void 0 : s.game) || a.on(e, t)
                        }
                        removeBoardEventListener(e, t) {
                            var s, a;
                            try {
                                null == (a = null == (s = this.board) ? void 0 : s.game) || a.off({
                                    type: e,
                                    handler: t
                                })
                            } catch (o) {}
                        }
                        boardReady() {}
                        componentReady() {}
                        componentDestroy() {}
                        attributesChanged() {}
                    }
                },
                3291: function(e, t, s) {
                    "use strict";
                    var a;
                    s.d(t, {
                        _: function() {
                            return a
                        }
                    }), (e => {
                        let t;
                        var s;
                        let a;
                        var o;
                        let n;
                        var r;
                        (s = t = e.ObservedAttributes || (e.ObservedAttributes = {})).BoardId = "board-id", s.ColorsEnabled = "colors-enabled", s.Direction = "direction", s.DisableContextMenu = "disable-context-menu", s.DisplayType = "display-type", s.EngineName = "engine-name", s.IsActive = "is-active", s.Lines = "lines", s.LinkToExplorer = "link-to-explorer", s.MoveListId = "move-list-id", s.OpeningIsClickable = "opening-is-clickable", s.ExplorerIsClickable = "explorer-is-clickable", s.ResultNodeIsSelectable = "result-node-is-selectable", s.ScrollContainerId = "scroll-container-id", s.TimestampMethod = "timestamp-method", s.ToggleTimestamps = "toggle-timestamps", s.Color = "color", s.UpdateManually = "update-manually", s.VerticalLayout = "vertical-layout", (o = a = e.Events || (e.Events = {})).BoardInitialized = "board-initialized", o.BoardAttached = "board-attached", o.BoardDetached = "board-detached", (r = n = e.Elements || (e.Elements = {})).ChessBoard = "chess-board", r.HorizontalMoveList = "horizontal-move-list", r.VerticalMoveList = "vertical-move-list", r.CapturedPieces = "captured-pieces", r.EcoOpening = "eco-opening", r.MoveList = "move-list"
                    })(a || (a = {}))
                },
                517: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        f: function() {
                            return a
                        }
                    });
                    const a = {
                        animationType: "web_user_game_settings_email_callback_animation_type",
                        boardStyle: "web_user_game_settings_email_callback_board_color",
                        coordinates: "web_user_game_settings_email_callback_coordinates",
                        darkMode: "web_user_game_settings_callback_dark_mode_toggle",
                        evaluationBarType: "web_user_game_settings_email_callback_evaluation_bar",
                        highlightLegalMoves: "web_user_game_settings_email_callback_show_legal_moves_toggle",
                        highlightMoves: "web_user_game_settings_email_callback_highlight_last_move_toggle",
                        isWhiteOnBottom: "web_user_game_settings_email_callback_is_white_on_bottom_toggle",
                        moveListDisplayType: "web_user_game_settings_email_callback_move_list_display_type",
                        moveMethod: "web_user_game_settings_email_callback_move_method",
                        pieceStyle: "web_user_game_settings_email_callback_piece",
                        playSounds: "web_user_game_settings_email_callback_sound_toggle",
                        showTimestamps: "web_user_game_settings_email_callback_show_timestamps",
                        soundTheme: "web_user_game_settings_email_callback_sound_theme"
                    }
                },
                5696: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        n: function() {
                            return u
                        }
                    });
                    var a = s(528),
                        o = s(1681),
                        n = Object.defineProperty,
                        r = Object.getOwnPropertySymbols,
                        i = Object.prototype.hasOwnProperty,
                        l = Object.prototype.propertyIsEnumerable,
                        __defNormalProp = (e, t, s) => t in e ? n(e, t, {
                            enumerable: !0,
                            configurable: !0,
                            writable: !0,
                            value: s
                        }) : e[t] = s,
                        __spreadValues = (e, t) => {
                            for (var s in t || (t = {})) i.call(t, s) && __defNormalProp(e, s, t[s]);
                            if (r)
                                for (var s of r(t)) l.call(t, s) && __defNormalProp(e, s, t[s]);
                            return e
                        };
                    const c = "chessComAppState",
                        d = ["id", "enabled", "allowMarkings", "captureKeyStrokes", "fadeSetup", "fetched", "flipBoard", "flipped", "highlightColor", "highlightOpacity", "moveListContextMenuEnabled", "overlayInAnalysisMode"],
                        u = {
                            getBoardOptions() {
                                var e;
                                const t = (0, a.Q)(o.Z.get(c)),
                                    s = Object.assign({}, null == (e = null == t ? void 0 : t.board) ? void 0 : e.boardOptions);
                                return d.forEach((e => {
                                    delete s[e]
                                })), s.highlightColor = void 0, s
                            },
                            setBoardOptions(e) {
                                var t;
                                let s = (0, a.Q)(o.Z.get(c));
                                (null == (t = null == s ? void 0 : s.board) ? void 0 : t.boardOptions) ? Object.assign(s.board.boardOptions, __spreadValues({}, e)): s = {
                                    board: {
                                        boardOptions: __spreadValues({}, e)
                                    }
                                }, d.forEach((e => {
                                    delete s.board.boardOptions[e]
                                })), o.Z.set(c, (0, a.P)(s))
                            }
                        }
                },
                6833: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        a: function() {
                            return a
                        }
                    });
                    const a = (0, s(4713).kr)()
                },
                632: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        z: function() {
                            return a
                        }
                    });
                    var a = (e => (e.Embed = "embed", e.Event = "event", e.Gif = "gif", e.Image = "image", e.Pgn = "pgn", e))(a || {})
                },
                8137: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        J: function() {
                            return a
                        }
                    });
                    const a = (0, s(4713).kr)()
                },
                528: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        Q: function() {
                            return parse
                        },
                        P: function() {
                            return stringify
                        }
                    });
                    const parse = (e, ...t) => JSON.parse(e, ...t),
                        stringify = (e, ...t) => JSON.stringify(e, ...t)
                },
                2866: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        Fl: function() {
                            return a.Fl
                        },
                        aZ: function() {
                            return a.aZ
                        },
                        qj: function() {
                            return a.qj
                        },
                        iH: function() {
                            return a.iH
                        }
                    });
                    s(3182);
                    var a = s(835);
                    t.ZP = a.ZP
                },
                3182: function(e, t, s) {
                    "use strict";
                    s.r(t);
                    var a = s(538),
                        o = s(9958),
                        n = s(835);
                    a.Z.use(n.ZP), a.Z.config.productionTip = !1, a.Z.mixin(o.Z), t.default = a.Z
                },
                1128: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        U: function() {
                            return getAmplitude
                        }
                    });
                    Object.create, Object.defineProperty, Object.getOwnPropertyDescriptor, Object.getOwnPropertyNames, Object.getPrototypeOf, Object.prototype.hasOwnProperty;
                    let a;

                    function getAmplitude() {
                        var e;
                        return (null == (e = window.chesscom) ? void 0 : e.amplitude) ? window.chesscom.amplitude : (a || (a = s.e(790).then(s.t.bind(s, 3790, 23)).then((({
                            default: e
                        }) => {
                            const {
                                user: t,
                                amplitudeKey: s
                            } = window.context || {}, a = t && !t.isGuest ? t.id : null;
                            return e.getInstance().init(s, null, {
                                includeUtm: !0,
                                includeReferrer: !0,
                                includeGclid: !0,
                                saveParamsReferrerOncePerSession: !1
                            }), e.getInstance().setUserId(a), window.chesscom.amplitude = e, e
                        }))), a)
                    }
                },
                5700: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        K: function() {
                            return logEvent
                        }
                    });
                    var a = s(1128);
                    var o = s(844).Z;
                    async function logEvent(e, t, s, n) {
                        const r = await (0, a.U)();
                        await async function logUserProperties(e) {
                            const t = await (0, a.U)();
                            null != e && t.getInstance().setUserProperties(e)
                        }(s), await async function incrementUserProperties(e) {
                            const t = await (0, a.U)();
                            if (null == e) return;
                            const s = new t.Identify;
                            o(e, ((e, t) => {
                                s.add(t, e)
                            })), t.getInstance().identify(s)
                        }(n), r.getInstance().logEvent(e, t || {})
                    }
                },
                6910: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        n: function() {
                            return generateUrl
                        }
                    });
                    var a = {
                        "bundles/web/images/game-preview-loading.png": "bundles/web/images/game-preview-loading.png",
                        "bundles/web/images/image-default.svg": "bundles/web/images/image-default.svg",
                        "bundles/web/images/noavatar_l.gif": "bundles/web/images/noavatar_l.gif",
                        "bundles/web/images/svg/tic.svg": "bundles/web/images/svg/tic.svg",
                        "bundles/web/images/svg/white-tic.svg": "bundles/web/images/svg/white-tic.svg",
                        "bundles/web/images/user-image.svg": "bundles/web/images/user-image.svg",
                        "bundles/web/images/web/learn-to-play.png": "bundles/web/images/web/learn-to-play.png",
                        "bundles/web/images/web/tablet.jpg": "bundles/web/images/web/tablet.jpg",
                        "bundles/web/images/webgl_data/2d/arcade/active-field-black-glow.png": "bundles/web/images/webgl_data/2d/arcade/active-field-black-glow.png",
                        "bundles/web/images/webgl_data/2d/arcade/active-field-white-glow.png": "bundles/web/images/webgl_data/2d/arcade/active-field-white-glow.png",
                        "bundles/web/images/webgl_data/2d/arcade/capture-lightning-black.json": "bundles/web/images/webgl_data/2d/arcade/capture-lightning-black.json",
                        "bundles/web/images/webgl_data/2d/arcade/capture-lightning-black.png": "bundles/web/images/webgl_data/2d/arcade/capture-lightning-black.png",
                        "bundles/web/images/webgl_data/2d/arcade/capture-lightning-white.json": "bundles/web/images/webgl_data/2d/arcade/capture-lightning-white.json",
                        "bundles/web/images/webgl_data/2d/arcade/capture-lightning-white.png": "bundles/web/images/webgl_data/2d/arcade/capture-lightning-white.png",
                        "bundles/web/images/webgl_data/2d/arcade/check-lightning-small.json": "bundles/web/images/webgl_data/2d/arcade/check-lightning-small.json",
                        "bundles/web/images/webgl_data/2d/arcade/check-lightning-small.png": "bundles/web/images/webgl_data/2d/arcade/check-lightning-small.png",
                        "bundles/web/images/webgl_data/2d/arcade/check-lightning.json": "bundles/web/images/webgl_data/2d/arcade/check-lightning.json",
                        "bundles/web/images/webgl_data/2d/arcade/check-lightning.png": "bundles/web/images/webgl_data/2d/arcade/check-lightning.png",
                        "bundles/web/images/webgl_data/2d/arcade/check-mate-lightning-black.json": "bundles/web/images/webgl_data/2d/arcade/check-mate-lightning-black.json",
                        "bundles/web/images/webgl_data/2d/arcade/check-mate-lightning-black.png": "bundles/web/images/webgl_data/2d/arcade/check-mate-lightning-black.png",
                        "bundles/web/images/webgl_data/2d/arcade/check-mate-lightning-white.json": "bundles/web/images/webgl_data/2d/arcade/check-mate-lightning-white.json",
                        "bundles/web/images/webgl_data/2d/arcade/check-mate-lightning-white.png": "bundles/web/images/webgl_data/2d/arcade/check-mate-lightning-white.png",
                        "bundles/web/images/webgl_data/2d/arcade/legal-move-arcade-black.png": "bundles/web/images/webgl_data/2d/arcade/legal-move-arcade-black.png",
                        "bundles/web/images/webgl_data/2d/arcade/legal-move-arcade-white.png": "bundles/web/images/webgl_data/2d/arcade/legal-move-arcade-white.png",
                        "bundles/web/images/webgl_data/2d/arcade/lightning-horizontal.png": "bundles/web/images/webgl_data/2d/arcade/lightning-horizontal.png",
                        "bundles/web/images/webgl_data/2d/arcade/move-lightning-large-black.json": "bundles/web/images/webgl_data/2d/arcade/move-lightning-large-black.json",
                        "bundles/web/images/webgl_data/2d/arcade/move-lightning-large-black.png": "bundles/web/images/webgl_data/2d/arcade/move-lightning-large-black.png",
                        "bundles/web/images/webgl_data/2d/arcade/move-lightning-large-white.json": "bundles/web/images/webgl_data/2d/arcade/move-lightning-large-white.json",
                        "bundles/web/images/webgl_data/2d/arcade/move-lightning-large-white.png": "bundles/web/images/webgl_data/2d/arcade/move-lightning-large-white.png",
                        "bundles/web/images/webgl_data/2d/arcade/move-lightning-medium-black.json": "bundles/web/images/webgl_data/2d/arcade/move-lightning-medium-black.json",
                        "bundles/web/images/webgl_data/2d/arcade/move-lightning-medium-black.png": "bundles/web/images/webgl_data/2d/arcade/move-lightning-medium-black.png",
                        "bundles/web/images/webgl_data/2d/arcade/move-lightning-medium-white.json": "bundles/web/images/webgl_data/2d/arcade/move-lightning-medium-white.json",
                        "bundles/web/images/webgl_data/2d/arcade/move-lightning-medium-white.png": "bundles/web/images/webgl_data/2d/arcade/move-lightning-medium-white.png",
                        "bundles/web/images/webgl_data/2d/arcade/move-lightning-regular-black.json": "bundles/web/images/webgl_data/2d/arcade/move-lightning-regular-black.json",
                        "bundles/web/images/webgl_data/2d/arcade/move-lightning-regular-black.png": "bundles/web/images/webgl_data/2d/arcade/move-lightning-regular-black.png",
                        "bundles/web/images/webgl_data/2d/arcade/move-lightning-regular-white.json": "bundles/web/images/webgl_data/2d/arcade/move-lightning-regular-white.json",
                        "bundles/web/images/webgl_data/2d/arcade/move-lightning-regular-white.png": "bundles/web/images/webgl_data/2d/arcade/move-lightning-regular-white.png",
                        "bundles/web/images/webgl_data/2d/arcade/move-lightning-small-black.json": "bundles/web/images/webgl_data/2d/arcade/move-lightning-small-black.json",
                        "bundles/web/images/webgl_data/2d/arcade/move-lightning-small-black.png": "bundles/web/images/webgl_data/2d/arcade/move-lightning-small-black.png",
                        "bundles/web/images/webgl_data/2d/arcade/move-lightning-small-white.json": "bundles/web/images/webgl_data/2d/arcade/move-lightning-small-white.json",
                        "bundles/web/images/webgl_data/2d/arcade/move-lightning-small-white.png": "bundles/web/images/webgl_data/2d/arcade/move-lightning-small-white.png",
                        "bundles/web/images/webgl_data/2d/arcade/select-lightning-black.json": "bundles/web/images/webgl_data/2d/arcade/select-lightning-black.json",
                        "bundles/web/images/webgl_data/2d/arcade/select-lightning-black.png": "bundles/web/images/webgl_data/2d/arcade/select-lightning-black.png",
                        "bundles/web/images/webgl_data/2d/arcade/select-lightning-white.json": "bundles/web/images/webgl_data/2d/arcade/select-lightning-white.json",
                        "bundles/web/images/webgl_data/2d/arcade/select-lightning-white.png": "bundles/web/images/webgl_data/2d/arcade/select-lightning-white.png",
                        "bundles/web/images/webgl_data/2d/capture-dust.json": "bundles/web/images/webgl_data/2d/capture-dust.json",
                        "bundles/web/images/webgl_data/2d/capture-dust.png": "bundles/web/images/webgl_data/2d/capture-dust.png",
                        "bundles/web/images/webgl_data/2d/dust-big.json": "bundles/web/images/webgl_data/2d/dust-big.json",
                        "bundles/web/images/webgl_data/2d/dust-big.png": "bundles/web/images/webgl_data/2d/dust-big.png",
                        "bundles/web/images/webgl_data/2d/dust-regular.json": "bundles/web/images/webgl_data/2d/dust-regular.json",
                        "bundles/web/images/webgl_data/2d/dust-regular.png": "bundles/web/images/webgl_data/2d/dust-regular.png",
                        "bundles/web/images/webgl_data/2d/dust-small.json": "bundles/web/images/webgl_data/2d/dust-small.json",
                        "bundles/web/images/webgl_data/2d/dust-small.png": "bundles/web/images/webgl_data/2d/dust-small.png",
                        "bundles/web/images/webgl_data/2d/field-shadow.png": "bundles/web/images/webgl_data/2d/field-shadow.png",
                        "bundles/web/images/webgl_data/2d/hand.json": "bundles/web/images/webgl_data/2d/hand.json",
                        "bundles/web/images/webgl_data/2d/hand.png": "bundles/web/images/webgl_data/2d/hand.png",
                        "bundles/web/images/webgl_data/3d/board/board.json": "bundles/web/images/webgl_data/3d/board/board.json",
                        "bundles/web/images/webgl_data/3d/board/textures/board_8_bit.jpg": "bundles/web/images/webgl_data/3d/board/textures/board_8_bit.jpg",
                        "bundles/web/images/webgl_data/3d/board/textures/board_8_bit_notation.png": "bundles/web/images/webgl_data/3d/board/textures/board_8_bit_notation.png",
                        "bundles/web/images/webgl_data/3d/board/textures/board_bases.jpg": "bundles/web/images/webgl_data/3d/board/textures/board_bases.jpg",
                        "bundles/web/images/webgl_data/3d/board/textures/board_bases_notation.png": "bundles/web/images/webgl_data/3d/board/textures/board_bases_notation.png",
                        "bundles/web/images/webgl_data/3d/board/textures/board_blackwhite.jpg": "bundles/web/images/webgl_data/3d/board/textures/board_blackwhite.jpg",
                        "bundles/web/images/webgl_data/3d/board/textures/board_blackwhite_notation.png": "bundles/web/images/webgl_data/3d/board/textures/board_blackwhite_notation.png",
                        "bundles/web/images/webgl_data/3d/board/textures/board_blue.jpg": "bundles/web/images/webgl_data/3d/board/textures/board_blue.jpg",
                        "bundles/web/images/webgl_data/3d/board/textures/board_blue_notation.png": "bundles/web/images/webgl_data/3d/board/textures/board_blue_notation.png",
                        "bundles/web/images/webgl_data/3d/board/textures/board_brown.jpg": "bundles/web/images/webgl_data/3d/board/textures/board_brown.jpg",
                        "bundles/web/images/webgl_data/3d/board/textures/board_brown_notation.png": "bundles/web/images/webgl_data/3d/board/textures/board_brown_notation.png",
                        "bundles/web/images/webgl_data/3d/board/textures/board_bubblegum.jpg": "bundles/web/images/webgl_data/3d/board/textures/board_bubblegum.jpg",
                        "bundles/web/images/webgl_data/3d/board/textures/board_bubblegum_notation.png": "bundles/web/images/webgl_data/3d/board/textures/board_bubblegum_notation.png",
                        "bundles/web/images/webgl_data/3d/board/textures/board_burled_wood.jpg": "bundles/web/images/webgl_data/3d/board/textures/board_burled_wood.jpg",
                        "bundles/web/images/webgl_data/3d/board/textures/board_burled_wood_notation.png": "bundles/web/images/webgl_data/3d/board/textures/board_burled_wood_notation.png",
                        "bundles/web/images/webgl_data/3d/board/textures/board_dark_wood.jpg": "bundles/web/images/webgl_data/3d/board/textures/board_dark_wood.jpg",
                        "bundles/web/images/webgl_data/3d/board/textures/board_dark_wood_notation.png": "bundles/web/images/webgl_data/3d/board/textures/board_dark_wood_notation.png",
                        "bundles/web/images/webgl_data/3d/board/textures/board_dash.jpg": "bundles/web/images/webgl_data/3d/board/textures/board_dash.jpg",
                        "bundles/web/images/webgl_data/3d/board/textures/board_dash_notation.png": "bundles/web/images/webgl_data/3d/board/textures/board_dash_notation.png",
                        "bundles/web/images/webgl_data/3d/board/textures/board_glass.jpg": "bundles/web/images/webgl_data/3d/board/textures/board_glass.jpg",
                        "bundles/web/images/webgl_data/3d/board/textures/board_glass_notation.png": "bundles/web/images/webgl_data/3d/board/textures/board_glass_notation.png",
                        "bundles/web/images/webgl_data/3d/board/textures/board_graffiti.jpg": "bundles/web/images/webgl_data/3d/board/textures/board_graffiti.jpg",
                        "bundles/web/images/webgl_data/3d/board/textures/board_graffiti_notation.png": "bundles/web/images/webgl_data/3d/board/textures/board_graffiti_notation.png",
                        "bundles/web/images/webgl_data/3d/board/textures/board_green.jpg": "bundles/web/images/webgl_data/3d/board/textures/board_green.jpg",
                        "bundles/web/images/webgl_data/3d/board/textures/board_green_notation.png": "bundles/web/images/webgl_data/3d/board/textures/board_green_notation.png",
                        "bundles/web/images/webgl_data/3d/board/textures/board_grey.jpg": "bundles/web/images/webgl_data/3d/board/textures/board_grey.jpg",
                        "bundles/web/images/webgl_data/3d/board/textures/board_grey_notation.png": "bundles/web/images/webgl_data/3d/board/textures/board_grey_notation.png",
                        "bundles/web/images/webgl_data/3d/board/textures/board_icy_sea.jpg": "bundles/web/images/webgl_data/3d/board/textures/board_icy_sea.jpg",
                        "bundles/web/images/webgl_data/3d/board/textures/board_icy_sea_notation.png": "bundles/web/images/webgl_data/3d/board/textures/board_icy_sea_notation.png",
                        "bundles/web/images/webgl_data/3d/board/textures/board_light.jpg": "bundles/web/images/webgl_data/3d/board/textures/board_light.jpg",
                        "bundles/web/images/webgl_data/3d/board/textures/board_light_notation.png": "bundles/web/images/webgl_data/3d/board/textures/board_light_notation.png",
                        "bundles/web/images/webgl_data/3d/board/textures/board_lolz.jpg": "bundles/web/images/webgl_data/3d/board/textures/board_lolz.jpg",
                        "bundles/web/images/webgl_data/3d/board/textures/board_lolz_notation.png": "bundles/web/images/webgl_data/3d/board/textures/board_lolz_notation.png",
                        "bundles/web/images/webgl_data/3d/board/textures/board_marble.jpg": "bundles/web/images/webgl_data/3d/board/textures/board_marble.jpg",
                        "bundles/web/images/webgl_data/3d/board/textures/board_marble_notation.png": "bundles/web/images/webgl_data/3d/board/textures/board_marble_notation.png",
                        "bundles/web/images/webgl_data/3d/board/textures/board_marbleblue.jpg": "bundles/web/images/webgl_data/3d/board/textures/board_marbleblue.jpg",
                        "bundles/web/images/webgl_data/3d/board/textures/board_marbleblue_notation.png": "bundles/web/images/webgl_data/3d/board/textures/board_marbleblue_notation.png",
                        "bundles/web/images/webgl_data/3d/board/textures/board_marblebrown.jpg": "bundles/web/images/webgl_data/3d/board/textures/board_marblebrown.jpg",
                        "bundles/web/images/webgl_data/3d/board/textures/board_marblebrown_notation.png": "bundles/web/images/webgl_data/3d/board/textures/board_marblebrown_notation.png",
                        "bundles/web/images/webgl_data/3d/board/textures/board_marblegreen.jpg": "bundles/web/images/webgl_data/3d/board/textures/board_marblegreen.jpg",
                        "bundles/web/images/webgl_data/3d/board/textures/board_marblegreen_notation.png": "bundles/web/images/webgl_data/3d/board/textures/board_marblegreen_notation.png",
                        "bundles/web/images/webgl_data/3d/board/textures/board_metal.jpg": "bundles/web/images/webgl_data/3d/board/textures/board_metal.jpg",
                        "bundles/web/images/webgl_data/3d/board/textures/board_metal_notation.png": "bundles/web/images/webgl_data/3d/board/textures/board_metal_notation.png",
                        "bundles/web/images/webgl_data/3d/board/textures/board_neon.jpg": "bundles/web/images/webgl_data/3d/board/textures/board_neon.jpg",
                        "bundles/web/images/webgl_data/3d/board/textures/board_neon_notation.png": "bundles/web/images/webgl_data/3d/board/textures/board_neon_notation.png",
                        "bundles/web/images/webgl_data/3d/board/textures/board_newspaper.jpg": "bundles/web/images/webgl_data/3d/board/textures/board_newspaper.jpg",
                        "bundles/web/images/webgl_data/3d/board/textures/board_newspaper_notation.png": "bundles/web/images/webgl_data/3d/board/textures/board_newspaper_notation.png",
                        "bundles/web/images/webgl_data/3d/board/textures/board_orange.jpg": "bundles/web/images/webgl_data/3d/board/textures/board_orange.jpg",
                        "bundles/web/images/webgl_data/3d/board/textures/board_orange_notation.png": "bundles/web/images/webgl_data/3d/board/textures/board_orange_notation.png",
                        "bundles/web/images/webgl_data/3d/board/textures/board_overlay.jpg": "bundles/web/images/webgl_data/3d/board/textures/board_overlay.jpg",
                        "bundles/web/images/webgl_data/3d/board/textures/board_overlay_notation.png": "bundles/web/images/webgl_data/3d/board/textures/board_overlay_notation.png",
                        "bundles/web/images/webgl_data/3d/board/textures/board_parchment.jpg": "bundles/web/images/webgl_data/3d/board/textures/board_parchment.jpg",
                        "bundles/web/images/webgl_data/3d/board/textures/board_parchment_notation.png": "bundles/web/images/webgl_data/3d/board/textures/board_parchment_notation.png",
                        "bundles/web/images/webgl_data/3d/board/textures/board_pink.jpg": "bundles/web/images/webgl_data/3d/board/textures/board_pink.jpg",
                        "bundles/web/images/webgl_data/3d/board/textures/board_pink_notation.png": "bundles/web/images/webgl_data/3d/board/textures/board_pink_notation.png",
                        "bundles/web/images/webgl_data/3d/board/textures/board_purple.jpg": "bundles/web/images/webgl_data/3d/board/textures/board_purple.jpg",
                        "bundles/web/images/webgl_data/3d/board/textures/board_purple_notation.png": "bundles/web/images/webgl_data/3d/board/textures/board_purple_notation.png",
                        "bundles/web/images/webgl_data/3d/board/textures/board_red.jpg": "bundles/web/images/webgl_data/3d/board/textures/board_red.jpg",
                        "bundles/web/images/webgl_data/3d/board/textures/board_red_notation.png": "bundles/web/images/webgl_data/3d/board/textures/board_red_notation.png",
                        "bundles/web/images/webgl_data/3d/board/textures/board_sand.jpg": "bundles/web/images/webgl_data/3d/board/textures/board_sand.jpg",
                        "bundles/web/images/webgl_data/3d/board/textures/board_sand_notation.png": "bundles/web/images/webgl_data/3d/board/textures/board_sand_notation.png",
                        "bundles/web/images/webgl_data/3d/board/textures/board_shadow.png": "bundles/web/images/webgl_data/3d/board/textures/board_shadow.png",
                        "bundles/web/images/webgl_data/3d/board/textures/board_sky.jpg": "bundles/web/images/webgl_data/3d/board/textures/board_sky.jpg",
                        "bundles/web/images/webgl_data/3d/board/textures/board_sky_notation.png": "bundles/web/images/webgl_data/3d/board/textures/board_sky_notation.png",
                        "bundles/web/images/webgl_data/3d/board/textures/board_stone.jpg": "bundles/web/images/webgl_data/3d/board/textures/board_stone.jpg",
                        "bundles/web/images/webgl_data/3d/board/textures/board_stone_notation.png": "bundles/web/images/webgl_data/3d/board/textures/board_stone_notation.png",
                        "bundles/web/images/webgl_data/3d/board/textures/board_tan.jpg": "bundles/web/images/webgl_data/3d/board/textures/board_tan.jpg",
                        "bundles/web/images/webgl_data/3d/board/textures/board_tan_notation.png": "bundles/web/images/webgl_data/3d/board/textures/board_tan_notation.png",
                        "bundles/web/images/webgl_data/3d/board/textures/board_tournament.jpg": "bundles/web/images/webgl_data/3d/board/textures/board_tournament.jpg",
                        "bundles/web/images/webgl_data/3d/board/textures/board_tournament_notation.png": "bundles/web/images/webgl_data/3d/board/textures/board_tournament_notation.png",
                        "bundles/web/images/webgl_data/3d/board/textures/board_translucent.jpg": "bundles/web/images/webgl_data/3d/board/textures/board_translucent.jpg",
                        "bundles/web/images/webgl_data/3d/board/textures/board_translucent_notation.png": "bundles/web/images/webgl_data/3d/board/textures/board_translucent_notation.png",
                        "bundles/web/images/webgl_data/3d/board/textures/board_walnut.jpg": "bundles/web/images/webgl_data/3d/board/textures/board_walnut.jpg",
                        "bundles/web/images/webgl_data/3d/board/textures/board_walnut_notation.png": "bundles/web/images/webgl_data/3d/board/textures/board_walnut_notation.png",
                        "bundles/web/images/webgl_data/3d/board/textures/board_winboard.jpg": "bundles/web/images/webgl_data/3d/board/textures/board_winboard.jpg",
                        "bundles/web/images/webgl_data/3d/board/textures/board_winboard_notation.png": "bundles/web/images/webgl_data/3d/board/textures/board_winboard_notation.png",
                        "bundles/web/images/webgl_data/3d/board/textures/board_wood.jpg": "bundles/web/images/webgl_data/3d/board/textures/board_wood.jpg",
                        "bundles/web/images/webgl_data/3d/board/textures/board_wood_notation.png": "bundles/web/images/webgl_data/3d/board/textures/board_wood_notation.png",
                        "bundles/web/images/webgl_data/3d/board/textures/board_wooddark.jpg": "bundles/web/images/webgl_data/3d/board/textures/board_wooddark.jpg",
                        "bundles/web/images/webgl_data/3d/board/textures/board_wooddark_notation.png": "bundles/web/images/webgl_data/3d/board/textures/board_wooddark_notation.png",
                        "bundles/web/images/webgl_data/3d/board/textures/board_woodlight.jpg": "bundles/web/images/webgl_data/3d/board/textures/board_woodlight.jpg",
                        "bundles/web/images/webgl_data/3d/board/textures/board_woodlight_notation.png": "bundles/web/images/webgl_data/3d/board/textures/board_woodlight_notation.png",
                        "bundles/web/images/webgl_data/3d/board/textures/board_woodmid.jpg": "bundles/web/images/webgl_data/3d/board/textures/board_woodmid.jpg",
                        "bundles/web/images/webgl_data/3d/board/textures/board_woodmid_notation.png": "bundles/web/images/webgl_data/3d/board/textures/board_woodmid_notation.png",
                        "bundles/web/images/webgl_data/3d/board/textures/board_woodolive.jpg": "bundles/web/images/webgl_data/3d/board/textures/board_woodolive.jpg",
                        "bundles/web/images/webgl_data/3d/board/textures/board_woodolive_notation.png": "bundles/web/images/webgl_data/3d/board/textures/board_woodolive_notation.png",
                        "bundles/web/images/webgl_data/3d/marking_arrow_L.json": "bundles/web/images/webgl_data/3d/marking_arrow_L.json",
                        "bundles/web/images/webgl_data/3d/marking_arrow_straight.json": "bundles/web/images/webgl_data/3d/marking_arrow_straight.json",
                        "bundles/web/images/webgl_data/3d/pieces/staunton_executive/bishop.json": "bundles/web/images/webgl_data/3d/pieces/staunton_executive/bishop.json",
                        "bundles/web/images/webgl_data/3d/pieces/staunton_executive/bishop_promotion_black.jpg": "bundles/web/images/webgl_data/3d/pieces/staunton_executive/bishop_promotion_black.jpg",
                        "bundles/web/images/webgl_data/3d/pieces/staunton_executive/bishop_promotion_white.jpg": "bundles/web/images/webgl_data/3d/pieces/staunton_executive/bishop_promotion_white.jpg",
                        "bundles/web/images/webgl_data/3d/pieces/staunton_executive/king.json": "bundles/web/images/webgl_data/3d/pieces/staunton_executive/king.json",
                        "bundles/web/images/webgl_data/3d/pieces/staunton_executive/knight.json": "bundles/web/images/webgl_data/3d/pieces/staunton_executive/knight.json",
                        "bundles/web/images/webgl_data/3d/pieces/staunton_executive/knight_promotion_black.jpg": "bundles/web/images/webgl_data/3d/pieces/staunton_executive/knight_promotion_black.jpg",
                        "bundles/web/images/webgl_data/3d/pieces/staunton_executive/knight_promotion_white.jpg": "bundles/web/images/webgl_data/3d/pieces/staunton_executive/knight_promotion_white.jpg",
                        "bundles/web/images/webgl_data/3d/pieces/staunton_executive/pawn.json": "bundles/web/images/webgl_data/3d/pieces/staunton_executive/pawn.json",
                        "bundles/web/images/webgl_data/3d/pieces/staunton_executive/queen.json": "bundles/web/images/webgl_data/3d/pieces/staunton_executive/queen.json",
                        "bundles/web/images/webgl_data/3d/pieces/staunton_executive/queen_promotion_black.jpg": "bundles/web/images/webgl_data/3d/pieces/staunton_executive/queen_promotion_black.jpg",
                        "bundles/web/images/webgl_data/3d/pieces/staunton_executive/queen_promotion_white.jpg": "bundles/web/images/webgl_data/3d/pieces/staunton_executive/queen_promotion_white.jpg",
                        "bundles/web/images/webgl_data/3d/pieces/staunton_executive/rook.json": "bundles/web/images/webgl_data/3d/pieces/staunton_executive/rook.json",
                        "bundles/web/images/webgl_data/3d/pieces/staunton_executive/rook_promotion_black.jpg": "bundles/web/images/webgl_data/3d/pieces/staunton_executive/rook_promotion_black.jpg",
                        "bundles/web/images/webgl_data/3d/pieces/staunton_executive/rook_promotion_white.jpg": "bundles/web/images/webgl_data/3d/pieces/staunton_executive/rook_promotion_white.jpg",
                        "bundles/web/images/webgl_data/3d/pieces/staunton_executive/textures/bishop_shadow.png": "bundles/web/images/webgl_data/3d/pieces/staunton_executive/textures/bishop_shadow.png",
                        "bundles/web/images/webgl_data/3d/pieces/staunton_executive/textures/envmap/negx.jpg": "bundles/web/images/webgl_data/3d/pieces/staunton_executive/textures/envmap/negx.jpg",
                        "bundles/web/images/webgl_data/3d/pieces/staunton_executive/textures/envmap/negy.jpg": "bundles/web/images/webgl_data/3d/pieces/staunton_executive/textures/envmap/negy.jpg",
                        "bundles/web/images/webgl_data/3d/pieces/staunton_executive/textures/envmap/negz.jpg": "bundles/web/images/webgl_data/3d/pieces/staunton_executive/textures/envmap/negz.jpg",
                        "bundles/web/images/webgl_data/3d/pieces/staunton_executive/textures/envmap/posx.jpg": "bundles/web/images/webgl_data/3d/pieces/staunton_executive/textures/envmap/posx.jpg",
                        "bundles/web/images/webgl_data/3d/pieces/staunton_executive/textures/envmap/posy.jpg": "bundles/web/images/webgl_data/3d/pieces/staunton_executive/textures/envmap/posy.jpg",
                        "bundles/web/images/webgl_data/3d/pieces/staunton_executive/textures/envmap/posz.jpg": "bundles/web/images/webgl_data/3d/pieces/staunton_executive/textures/envmap/posz.jpg",
                        "bundles/web/images/webgl_data/3d/pieces/staunton_executive/textures/king_shadow.png": "bundles/web/images/webgl_data/3d/pieces/staunton_executive/textures/king_shadow.png",
                        "bundles/web/images/webgl_data/3d/pieces/staunton_executive/textures/knight_shadow.png": "bundles/web/images/webgl_data/3d/pieces/staunton_executive/textures/knight_shadow.png",
                        "bundles/web/images/webgl_data/3d/pieces/staunton_executive/textures/pawn_shadow.png": "bundles/web/images/webgl_data/3d/pieces/staunton_executive/textures/pawn_shadow.png",
                        "bundles/web/images/webgl_data/3d/pieces/staunton_executive/textures/piece_black.jpg": "bundles/web/images/webgl_data/3d/pieces/staunton_executive/textures/piece_black.jpg",
                        "bundles/web/images/webgl_data/3d/pieces/staunton_executive/textures/piece_marble_black.jpg": "bundles/web/images/webgl_data/3d/pieces/staunton_executive/textures/piece_marble_black.jpg",
                        "bundles/web/images/webgl_data/3d/pieces/staunton_executive/textures/piece_marble_white.jpg": "bundles/web/images/webgl_data/3d/pieces/staunton_executive/textures/piece_marble_white.jpg",
                        "bundles/web/images/webgl_data/3d/pieces/staunton_executive/textures/piece_metal_black.jpg": "bundles/web/images/webgl_data/3d/pieces/staunton_executive/textures/piece_metal_black.jpg",
                        "bundles/web/images/webgl_data/3d/pieces/staunton_executive/textures/piece_metal_white.jpg": "bundles/web/images/webgl_data/3d/pieces/staunton_executive/textures/piece_metal_white.jpg",
                        "bundles/web/images/webgl_data/3d/pieces/staunton_executive/textures/piece_plastic_black.jpg": "bundles/web/images/webgl_data/3d/pieces/staunton_executive/textures/piece_plastic_black.jpg",
                        "bundles/web/images/webgl_data/3d/pieces/staunton_executive/textures/piece_plastic_white.jpg": "bundles/web/images/webgl_data/3d/pieces/staunton_executive/textures/piece_plastic_white.jpg",
                        "bundles/web/images/webgl_data/3d/pieces/staunton_executive/textures/piece_white.jpg": "bundles/web/images/webgl_data/3d/pieces/staunton_executive/textures/piece_white.jpg",
                        "bundles/web/images/webgl_data/3d/pieces/staunton_executive/textures/piece_wood_black.jpg": "bundles/web/images/webgl_data/3d/pieces/staunton_executive/textures/piece_wood_black.jpg",
                        "bundles/web/images/webgl_data/3d/pieces/staunton_executive/textures/piece_wood_white.jpg": "bundles/web/images/webgl_data/3d/pieces/staunton_executive/textures/piece_wood_white.jpg",
                        "bundles/web/images/webgl_data/3d/pieces/staunton_executive/textures/queen_shadow.png": "bundles/web/images/webgl_data/3d/pieces/staunton_executive/textures/queen_shadow.png",
                        "bundles/web/images/webgl_data/3d/pieces/staunton_executive/textures/rook_shadow.png": "bundles/web/images/webgl_data/3d/pieces/staunton_executive/textures/rook_shadow.png",
                        "bundles/web/images/webgl_data/README.md": "bundles/web/images/webgl_data/README.md",
                        "bundles/web/images/webgl_data/three-d/board/board.json": "bundles/web/images/webgl_data/three-d/board/board.json",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_8_bit.jpg": "bundles/web/images/webgl_data/three-d/board/textures/board_8_bit.jpg",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_8_bit_notation.png": "bundles/web/images/webgl_data/three-d/board/textures/board_8_bit_notation.png",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_bases.jpg": "bundles/web/images/webgl_data/three-d/board/textures/board_bases.jpg",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_bases_notation.png": "bundles/web/images/webgl_data/three-d/board/textures/board_bases_notation.png",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_blackwhite.jpg": "bundles/web/images/webgl_data/three-d/board/textures/board_blackwhite.jpg",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_blackwhite_notation.png": "bundles/web/images/webgl_data/three-d/board/textures/board_blackwhite_notation.png",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_blue.jpg": "bundles/web/images/webgl_data/three-d/board/textures/board_blue.jpg",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_blue_notation.png": "bundles/web/images/webgl_data/three-d/board/textures/board_blue_notation.png",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_brown.jpg": "bundles/web/images/webgl_data/three-d/board/textures/board_brown.jpg",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_brown_notation.png": "bundles/web/images/webgl_data/three-d/board/textures/board_brown_notation.png",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_bubblegum.jpg": "bundles/web/images/webgl_data/three-d/board/textures/board_bubblegum.jpg",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_bubblegum_notation.png": "bundles/web/images/webgl_data/three-d/board/textures/board_bubblegum_notation.png",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_burled_wood.jpg": "bundles/web/images/webgl_data/three-d/board/textures/board_burled_wood.jpg",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_burled_wood_notation.png": "bundles/web/images/webgl_data/three-d/board/textures/board_burled_wood_notation.png",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_dark_wood.jpg": "bundles/web/images/webgl_data/three-d/board/textures/board_dark_wood.jpg",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_dark_wood_notation.png": "bundles/web/images/webgl_data/three-d/board/textures/board_dark_wood_notation.png",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_dash.jpg": "bundles/web/images/webgl_data/three-d/board/textures/board_dash.jpg",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_dash_notation.png": "bundles/web/images/webgl_data/three-d/board/textures/board_dash_notation.png",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_glass.jpg": "bundles/web/images/webgl_data/three-d/board/textures/board_glass.jpg",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_glass_notation.png": "bundles/web/images/webgl_data/three-d/board/textures/board_glass_notation.png",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_graffiti.jpg": "bundles/web/images/webgl_data/three-d/board/textures/board_graffiti.jpg",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_graffiti_notation.png": "bundles/web/images/webgl_data/three-d/board/textures/board_graffiti_notation.png",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_green.jpg": "bundles/web/images/webgl_data/three-d/board/textures/board_green.jpg",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_green_notation.png": "bundles/web/images/webgl_data/three-d/board/textures/board_green_notation.png",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_grey.jpg": "bundles/web/images/webgl_data/three-d/board/textures/board_grey.jpg",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_grey_notation.png": "bundles/web/images/webgl_data/three-d/board/textures/board_grey_notation.png",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_icy_sea.jpg": "bundles/web/images/webgl_data/three-d/board/textures/board_icy_sea.jpg",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_icy_sea_notation.png": "bundles/web/images/webgl_data/three-d/board/textures/board_icy_sea_notation.png",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_light.jpg": "bundles/web/images/webgl_data/three-d/board/textures/board_light.jpg",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_light_notation.png": "bundles/web/images/webgl_data/three-d/board/textures/board_light_notation.png",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_lolz.jpg": "bundles/web/images/webgl_data/three-d/board/textures/board_lolz.jpg",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_lolz_notation.png": "bundles/web/images/webgl_data/three-d/board/textures/board_lolz_notation.png",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_marble.jpg": "bundles/web/images/webgl_data/three-d/board/textures/board_marble.jpg",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_marble_notation.png": "bundles/web/images/webgl_data/three-d/board/textures/board_marble_notation.png",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_marbleblue.jpg": "bundles/web/images/webgl_data/three-d/board/textures/board_marbleblue.jpg",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_marbleblue_notation.png": "bundles/web/images/webgl_data/three-d/board/textures/board_marbleblue_notation.png",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_marblebrown.jpg": "bundles/web/images/webgl_data/three-d/board/textures/board_marblebrown.jpg",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_marblebrown_notation.png": "bundles/web/images/webgl_data/three-d/board/textures/board_marblebrown_notation.png",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_marblegreen.jpg": "bundles/web/images/webgl_data/three-d/board/textures/board_marblegreen.jpg",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_marblegreen_notation.png": "bundles/web/images/webgl_data/three-d/board/textures/board_marblegreen_notation.png",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_metal.jpg": "bundles/web/images/webgl_data/three-d/board/textures/board_metal.jpg",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_metal_notation.png": "bundles/web/images/webgl_data/three-d/board/textures/board_metal_notation.png",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_neon.jpg": "bundles/web/images/webgl_data/three-d/board/textures/board_neon.jpg",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_neon_notation.png": "bundles/web/images/webgl_data/three-d/board/textures/board_neon_notation.png",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_newspaper.jpg": "bundles/web/images/webgl_data/three-d/board/textures/board_newspaper.jpg",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_newspaper_notation.png": "bundles/web/images/webgl_data/three-d/board/textures/board_newspaper_notation.png",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_orange.jpg": "bundles/web/images/webgl_data/three-d/board/textures/board_orange.jpg",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_orange_notation.png": "bundles/web/images/webgl_data/three-d/board/textures/board_orange_notation.png",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_overlay.jpg": "bundles/web/images/webgl_data/three-d/board/textures/board_overlay.jpg",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_overlay_notation.png": "bundles/web/images/webgl_data/three-d/board/textures/board_overlay_notation.png",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_parchment.jpg": "bundles/web/images/webgl_data/three-d/board/textures/board_parchment.jpg",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_parchment_notation.png": "bundles/web/images/webgl_data/three-d/board/textures/board_parchment_notation.png",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_pink.jpg": "bundles/web/images/webgl_data/three-d/board/textures/board_pink.jpg",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_pink_notation.png": "bundles/web/images/webgl_data/three-d/board/textures/board_pink_notation.png",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_purple.jpg": "bundles/web/images/webgl_data/three-d/board/textures/board_purple.jpg",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_purple_notation.png": "bundles/web/images/webgl_data/three-d/board/textures/board_purple_notation.png",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_red.jpg": "bundles/web/images/webgl_data/three-d/board/textures/board_red.jpg",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_red_notation.png": "bundles/web/images/webgl_data/three-d/board/textures/board_red_notation.png",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_sand.jpg": "bundles/web/images/webgl_data/three-d/board/textures/board_sand.jpg",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_sand_notation.png": "bundles/web/images/webgl_data/three-d/board/textures/board_sand_notation.png",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_shadow.png": "bundles/web/images/webgl_data/three-d/board/textures/board_shadow.png",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_sky.jpg": "bundles/web/images/webgl_data/three-d/board/textures/board_sky.jpg",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_sky_notation.png": "bundles/web/images/webgl_data/three-d/board/textures/board_sky_notation.png",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_stone.jpg": "bundles/web/images/webgl_data/three-d/board/textures/board_stone.jpg",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_stone_notation.png": "bundles/web/images/webgl_data/three-d/board/textures/board_stone_notation.png",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_tan.jpg": "bundles/web/images/webgl_data/three-d/board/textures/board_tan.jpg",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_tan_notation.png": "bundles/web/images/webgl_data/three-d/board/textures/board_tan_notation.png",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_tournament.jpg": "bundles/web/images/webgl_data/three-d/board/textures/board_tournament.jpg",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_tournament_notation.png": "bundles/web/images/webgl_data/three-d/board/textures/board_tournament_notation.png",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_translucent.jpg": "bundles/web/images/webgl_data/three-d/board/textures/board_translucent.jpg",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_translucent_notation.png": "bundles/web/images/webgl_data/three-d/board/textures/board_translucent_notation.png",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_walnut.jpg": "bundles/web/images/webgl_data/three-d/board/textures/board_walnut.jpg",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_walnut_notation.png": "bundles/web/images/webgl_data/three-d/board/textures/board_walnut_notation.png",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_winboard.jpg": "bundles/web/images/webgl_data/three-d/board/textures/board_winboard.jpg",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_winboard_notation.png": "bundles/web/images/webgl_data/three-d/board/textures/board_winboard_notation.png",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_wood.jpg": "bundles/web/images/webgl_data/three-d/board/textures/board_wood.jpg",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_wood_notation.png": "bundles/web/images/webgl_data/three-d/board/textures/board_wood_notation.png",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_wooddark.jpg": "bundles/web/images/webgl_data/three-d/board/textures/board_wooddark.jpg",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_wooddark_notation.png": "bundles/web/images/webgl_data/three-d/board/textures/board_wooddark_notation.png",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_woodlight.jpg": "bundles/web/images/webgl_data/three-d/board/textures/board_woodlight.jpg",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_woodlight_notation.png": "bundles/web/images/webgl_data/three-d/board/textures/board_woodlight_notation.png",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_woodmid.jpg": "bundles/web/images/webgl_data/three-d/board/textures/board_woodmid.jpg",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_woodmid_notation.png": "bundles/web/images/webgl_data/three-d/board/textures/board_woodmid_notation.png",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_woodolive.jpg": "bundles/web/images/webgl_data/three-d/board/textures/board_woodolive.jpg",
                        "bundles/web/images/webgl_data/three-d/board/textures/board_woodolive_notation.png": "bundles/web/images/webgl_data/three-d/board/textures/board_woodolive_notation.png",
                        "bundles/web/images/webgl_data/three-d/marking_arrow_L.json": "bundles/web/images/webgl_data/three-d/marking_arrow_L.json",
                        "bundles/web/images/webgl_data/three-d/marking_arrow_straight.json": "bundles/web/images/webgl_data/three-d/marking_arrow_straight.json",
                        "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/bishop.json": "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/bishop.json",
                        "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/bishop_promotion_black.jpg": "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/bishop_promotion_black.jpg",
                        "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/bishop_promotion_white.jpg": "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/bishop_promotion_white.jpg",
                        "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/king.json": "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/king.json",
                        "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/knight.json": "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/knight.json",
                        "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/knight_promotion_black.jpg": "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/knight_promotion_black.jpg",
                        "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/knight_promotion_white.jpg": "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/knight_promotion_white.jpg",
                        "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/pawn.json": "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/pawn.json",
                        "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/queen.json": "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/queen.json",
                        "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/queen_promotion_black.jpg": "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/queen_promotion_black.jpg",
                        "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/queen_promotion_white.jpg": "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/queen_promotion_white.jpg",
                        "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/rook.json": "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/rook.json",
                        "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/rook_promotion_black.jpg": "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/rook_promotion_black.jpg",
                        "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/rook_promotion_white.jpg": "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/rook_promotion_white.jpg",
                        "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/textures/bishop_shadow.png": "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/textures/bishop_shadow.png",
                        "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/textures/envmap/negx.jpg": "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/textures/envmap/negx.jpg",
                        "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/textures/envmap/negy.jpg": "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/textures/envmap/negy.jpg",
                        "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/textures/envmap/negz.jpg": "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/textures/envmap/negz.jpg",
                        "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/textures/envmap/posx.jpg": "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/textures/envmap/posx.jpg",
                        "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/textures/envmap/posy.jpg": "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/textures/envmap/posy.jpg",
                        "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/textures/envmap/posz.jpg": "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/textures/envmap/posz.jpg",
                        "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/textures/king_shadow.png": "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/textures/king_shadow.png",
                        "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/textures/knight_shadow.png": "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/textures/knight_shadow.png",
                        "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/textures/pawn_shadow.png": "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/textures/pawn_shadow.png",
                        "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/textures/piece_black.jpg": "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/textures/piece_black.jpg",
                        "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/textures/piece_marble_black.jpg": "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/textures/piece_marble_black.jpg",
                        "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/textures/piece_marble_white.jpg": "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/textures/piece_marble_white.jpg",
                        "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/textures/piece_metal_black.jpg": "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/textures/piece_metal_black.jpg",
                        "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/textures/piece_metal_white.jpg": "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/textures/piece_metal_white.jpg",
                        "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/textures/piece_plastic_black.jpg": "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/textures/piece_plastic_black.jpg",
                        "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/textures/piece_plastic_white.jpg": "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/textures/piece_plastic_white.jpg",
                        "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/textures/piece_white.jpg": "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/textures/piece_white.jpg",
                        "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/textures/piece_wood_black.jpg": "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/textures/piece_wood_black.jpg",
                        "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/textures/piece_wood_white.jpg": "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/textures/piece_wood_white.jpg",
                        "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/textures/queen_shadow.png": "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/textures/queen_shadow.png",
                        "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/textures/rook_shadow.png": "bundles/web/images/webgl_data/three-d/pieces/staunton_executive/textures/rook_shadow.png",
                        "bundles/web/images/webgl_data/two-d/arcade/capture-hint-hide.svg": "bundles/web/images/webgl_data/two-d/arcade/capture-hint-hide.svg",
                        "bundles/web/images/webgl_data/two-d/arcade/capture-hint-out.svg": "bundles/web/images/webgl_data/two-d/arcade/capture-hint-out.svg",
                        "bundles/web/images/webgl_data/two-d/arcade/capture-hint-over.svg": "bundles/web/images/webgl_data/two-d/arcade/capture-hint-over.svg",
                        "bundles/web/images/webgl_data/two-d/arcade/capture-hint-show.svg": "bundles/web/images/webgl_data/two-d/arcade/capture-hint-show.svg",
                        "bundles/web/images/webgl_data/two-d/arcade/king-check.svg": "bundles/web/images/webgl_data/two-d/arcade/king-check.svg",
                        "bundles/web/images/webgl_data/two-d/arcade/move-hint-hide.svg": "bundles/web/images/webgl_data/two-d/arcade/move-hint-hide.svg",
                        "bundles/web/images/webgl_data/two-d/arcade/move-hint-out.svg": "bundles/web/images/webgl_data/two-d/arcade/move-hint-out.svg",
                        "bundles/web/images/webgl_data/two-d/arcade/move-hint-over.svg": "bundles/web/images/webgl_data/two-d/arcade/move-hint-over.svg",
                        "bundles/web/images/webgl_data/two-d/arcade/move-hint-show.svg": "bundles/web/images/webgl_data/two-d/arcade/move-hint-show.svg",
                        "bundles/web/images/webgl_data/two-d/arcade/piece-capture.svg": "bundles/web/images/webgl_data/two-d/arcade/piece-capture.svg",
                        "bundles/web/images/webgl_data/two-d/arcade/piece-grab.svg": "bundles/web/images/webgl_data/two-d/arcade/piece-grab.svg",
                        "bundles/web/images/webgl_data/two-d/arcade/piece-release.svg": "bundles/web/images/webgl_data/two-d/arcade/piece-release.svg",
                        "bundles/web/images/webgl_data/two-d/arcade/piece-trail.svg": "bundles/web/images/webgl_data/two-d/arcade/piece-trail.svg",
                        "bundles/web/images/webgl_data/two-d/arcade/square-fill.svg": "bundles/web/images/webgl_data/two-d/arcade/square-fill.svg",
                        "bundles/web/images/webgl_data/two-d/hover-square.png": "bundles/web/images/webgl_data/two-d/hover-square.png",
                        "bundles/web/images/webgl_data/two-d/natural/piece-trail-long.png": "bundles/web/images/webgl_data/two-d/natural/piece-trail-long.png",
                        "bundles/web/images/webgl_data/two-d/natural/piece-trail.png": "bundles/web/images/webgl_data/two-d/natural/piece-trail.png"
                    };
                    let o;
                    o = window.Config["domain.static"] && !window.Config.cypress ? "https" : "http";
                    const generateUrl = (e, t = !0, s = o) => `${t?`${s}:${window.Config["domain.static"]}`:""}/${null!=a[e]?a[e]:e}`
                },
                2793: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        j7: function() {
                            return getWindowTitle
                        },
                        bM: function() {
                            return getWindowLocation
                        },
                        k_: function() {
                            return a
                        },
                        qD: function() {
                            return o
                        },
                        e0: function() {
                            return n
                        },
                        sJ: function() {
                            return bookmarkPage
                        },
                        kY: function() {
                            return r
                        },
                        Cz: function() {
                            return sendEmail
                        },
                        tq: function() {
                            return isMobile
                        }
                    });
                    const getWindowTitle = () => encodeURIComponent(window.document.title),
                        getWindowLocation = () => encodeURIComponent(window.location.href),
                        a = window.location.pathname,
                        o = getWindowTitle(),
                        n = getWindowLocation(),
                        bookmarkPage = () => {
                            if (window.sidebar && window.sidebar.addPanel) window.sidebar.addPanel(o, n, "");
                            else if (window.external && "AddFavorite" in window.external) window.external.AddFavorite(n, o);
                            else {
                                const e = -1 !== window.navigator.userAgent.toLowerCase().indexOf("mac") ? "Cmd" : "Ctrl";
                                alert(`Press ${e}+D to bookmark this page.`)
                            }
                        },
                        r = (Number.POSITIVE_INFINITY, () => {
                            window.print()
                        }),
                        sendEmail = (e, t) => {
                            window.location.href = `mailto:?${e}&${t}`
                        },
                        isMobile = (e = window.navigator.userAgent) => /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(e)
                },
                1681: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        Z: function() {
                            return a
                        }
                    });
                    class CacheProvider {
                        constructor() {
                            this.enabled = function localStorageWorks() {
                                const e = "test";
                                try {
                                    return localStorage.setItem(e, e), localStorage.removeItem(e), !0
                                } catch (t) {
                                    return !1
                                }
                            }()
                        }
                        get(e) {
                            return JSON.parse(localStorage.getItem(e))
                        }
                        set(e, t) {
                            localStorage.setItem(e, JSON.stringify(t))
                        }
                    }
                    var a = new class CacheService {
                        constructor(e, t = {}) {
                            this.cache = new CacheProvider, this.cacheKey = e, this.memory = t
                        }
                        get ready() {
                            return !1 !== this.cache.enabled
                        }
                        get(e, t = null) {
                            return this.memory[e] ? this.memory[e] : this.ready ? (this.pull(), void 0 !== this.memory[e] ? this.memory[e] : t) : t
                        }
                        pull() {
                            return this.memory = this.cache.get(this.cacheKey) || {}, this
                        }
                        push() {
                            return this.cache.set(this.cacheKey, this.memory), this
                        }
                        remove(e) {
                            return this.ready ? (this.pull(), void 0 === this.memory[e] ? this : (delete this.memory[e], this.push())) : this
                        }
                        set(e, t) {
                            return this.ready ? (this.pull(), this.memory[e] = t, this.push()) : this
                        }
                    }("json_settings")
                },
                5236: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        KZ: function() {
                            return getIsDarkMode
                        }
                    });
                    s(7597);
                    const a = "dark-mode",
                        getIsDarkMode = () => document.body.classList.contains(a);
                    getIsDarkMode()
                },
                7241: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        Z: function() {
                            return v
                        }
                    });
                    var a = s(3182),
                        o = s(4452),
                        n = s(7597);

                    function isNull(e) {
                        return null === e
                    }

                    function isUndefined(e) {
                        return void 0 === e
                    }

                    function isObject(e) {
                        return !isNull(e) && "object" == typeof e
                    }
                    var r = {
                        isString: e => "string" == typeof e,
                        isFunction: e => "function" == typeof e,
                        isNumber: e => "number" == typeof e,
                        isNil: e => isNull(e) || isUndefined(e),
                        isObject: isObject,
                        isPlainObject: e => !!isObject(e) && (e.constructor && "Object" === e.constructor.name),
                        isArray: e => Array.isArray(e),
                        isError(e) {
                            if (!isObject(e)) return !1;
                            const t = Object.prototype.toString.call(e);
                            return "[object Error]" === t || "[object DOMException]" === t
                        },
                        isUndefined: isUndefined
                    };
                    const getValue = (e, t) => r.isString(t) && r.isObject(e) ? e[t] : r.isFunction(t) ? t(e) : void 0,
                        compareValues = (e, t, s, a) => {
                            const o = getValue(e, s),
                                n = getValue(t, s);
                            return null == o ? 1 : null == n ? -1 : o > n ? "desc" === a ? -1 : 1 : o < n ? "desc" === a ? 1 : -1 : 0
                        };
                    var i = {
                        remove(e, t) {
                            const s = r.isFunction(t) ? e.findIndex(t) : e.indexOf(t); - 1 !== s && e.splice(s, 1)
                        },
                        range(e, t) {
                            const s = [];
                            for (let a = e; a < t; a++) s.push(a);
                            return s
                        },
                        uniq: (e, t) => r.isFunction(t) ? e.filter(((s, a) => e.findIndex((e => t(e) === t(s))) === a)) : t ? e.filter(((s, a) => e.findIndex((e => e[t] === s[t])) === a)) : e.filter(((t, s) => e.indexOf(t) === s)),
                        sortBy(e, t, s) {
                            const a = r.isArray(t) ? t : [t],
                                o = r.isArray(s) ? s : [s],
                                n = e.slice(0);
                            return n.sort(((e, t) => {
                                let s = 0;
                                for (let n = 0; n < a.length && 0 === s; n++) s = compareValues(e, t, a[n], o[n]);
                                return s
                            })), n
                        }
                    };
                    let l;
                    l = "undefined" != typeof window ? window : void 0 !== s.g ? s.g : "undefined" != typeof self ? self : {};
                    var c = l;
                    const d = {};
                    ["setTimeout", "setInterval", "clearTimeout", "clearInterval"].forEach((e => {
                        d[e] = c[e].bind(c)
                    }));
                    var u = d;
                    const getOptions = e => r.isString(e.value) ? {
                            content: e.value
                        } : e.value,
                        noop = () => {};
                    var m = {
                            name: "Tooltip",
                            created() {
                                this.active = null, this.hideOnDocumentVisibilityChangeHandler = noop, this.hideOnScrollHandler = noop, this.instances = []
                            },
                            beforeDestroy() {
                                this.instances = null, this.clearTooltip()
                            },
                            methods: {
                                bind(e, t) {
                                    this.instances.push({
                                        element: e,
                                        options: getOptions(t || {
                                            value: e.getAttribute("title")
                                        })
                                    }), e.removeAttribute("title"), e.addEventListener("mouseenter", this.showTooltip)
                                },
                                update(e, t) {
                                    const s = this.instances.find((t => t.element === e));
                                    s && (s.options = getOptions(t))
                                },
                                unbind(e) {
                                    const t = this.instances.find((t => t.element === e));
                                    t && (this.active === t && this.hideTooltip({
                                        target: t.element
                                    }), i.remove(this.instances, t), e.removeEventListener("mouseenter", this.showTooltip), e.removeEventListener("mouseleave", this.hideTooltip))
                                },
                                showTooltip({
                                    target: e
                                }) {
                                    const t = this.instances.find((t => t.element === e));
                                    if (!t || !t.options || !t.options.content) return;
                                    const s = t.options.delay || 400,
                                        a = t.options.position || "top",
                                        r = t.options.padding || 0;
                                    this.clearTooltip(), t.element.classList.contains(n.xL.CONFIRM_OPEN) || (this.active = t, t.element.addEventListener("mouseleave", this.hideTooltip), this.showTimeout = u.setTimeout((() => {
                                        this.showFrame = window.requestAnimationFrame((() => {
                                            this.$refs && this.$refs.content && t.options && (this.$refs.content.textContent = t.options.content), this.$el.classList.add(a), (0, o._O)(t.element, this.$el, a, r)
                                        }))
                                    }), s)), !1 !== t.options.closeOnScroll && this.hideOnScroll(e), this.hideOnDocumentVisibilityChange(e)
                                },
                                hideOnDocumentVisibilityChange(e) {
                                    this.hideOnDocumentVisibilityChangeHandler = () => {
                                        this.hideTooltip({
                                            target: e
                                        })
                                    }, document.addEventListener("visibilitychange", this.hideOnDocumentVisibilityChangeHandler)
                                },
                                hideOnScroll(e) {
                                    this.hideOnScrollHandler = () => {
                                        this.hideTooltip({
                                            target: e
                                        })
                                    }, window.addEventListener("scroll", this.hideOnScrollHandler)
                                },
                                hideTooltip({
                                    target: e
                                }) {
                                    this.instances.find((t => t.element === e)) && (this.clearTooltip(), this.hideFrame = window.requestAnimationFrame((() => {
                                        this.$refs && this.$refs.content && (this.$refs.content.textContent = null), (0, o.fs)(this.$el)
                                    })))
                                },
                                clearTooltip() {
                                    this.active && (this.active.element.removeEventListener("mouseleave", this.hideTooltip), this.active = null), u.clearTimeout(this.showTimeout), window.cancelAnimationFrame(this.hideFrame), window.cancelAnimationFrame(this.showFrame), window.removeEventListener("scroll", this.hideOnScrollHandler), document.removeEventListener("visibilitychange", this.hideOnDocumentVisibilityChangeHandler)
                                }
                            }
                        },
                        h = (0, s(1900).Z)(m, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                staticClass: "tooltip tip vue-tooltip"
                            }, [s("div", {
                                staticClass: "arrow"
                            }), e._v(" "), s("div", {
                                ref: "content",
                                staticClass: "inner"
                            })])
                        }), [], !1, null, null, null).exports;
                    const p = a.default.extend(h);
                    let b, g = !1;
                    const getTooltip = () => {
                        if (b || (b = new p), !g) {
                            const e = document.createElement("div");
                            document.body.appendChild(e), b.$mount(e), g = !0
                        }
                        return b
                    };
                    var v = {
                        bind: (e, t) => getTooltip().bind(e, t),
                        componentUpdated: (e, t) => getTooltip().update(e, t),
                        unbind: (e, t) => getTooltip().unbind(e, t)
                    }
                },
                6673: function(e, t, s) {
                    "use strict";
                    var a = s(4279);
                    const o = new(s.n(a)());
                    t.Z = o
                },
                1353: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        FR: function() {
                            return hasFeatureAccess
                        }
                    });
                    const a = {},
                        hasFeatureAccess = e => {
                            var t, s;
                            return !!(null == (s = null == (t = window.chesscom) ? void 0 : t.features) ? void 0 : s.includes(e)) || Boolean(a[e])
                        }
                },
                2101: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        kN: function() {
                            return o
                        },
                        _$: function() {
                            return n
                        },
                        Ux: function() {
                            return setCheckboxModel
                        },
                        sY: function() {
                            return setCheckboxUi
                        },
                        nj: function() {
                            return getPgnOpts
                        }
                    });
                    var a = s(2866);
                    const o = (0, a.qj)({
                            isCommentsCheckboxVisible: !1,
                            isHighlightsCheckboxVisible: !1,
                            isAnalyzedPgnCheckboxVisible: !1
                        }),
                        n = (0, a.qj)({
                            isAnalyzedPgnEnabled: !1,
                            isCommentsEnabled: !0,
                            isHighlightsEnabled: !1,
                            isTimestampsEnabled: !1
                        });

                    function setCheckboxModel(e) {
                        Object.keys(e).forEach((t => {
                            n[t] = e[t]
                        }))
                    }

                    function setCheckboxUi(e) {
                        Object.keys(e).forEach((t => {
                            o[t] = e[t]
                        }))
                    }
                    const getPgnOpts = ({
                        isCommentsEnabled: e,
                        isHighlightsEnabled: t,
                        isTimestampsEnabled: s
                    }) => {
                        const a = !e,
                            o = [];
                        return s && o.push("clk", "timestamp"), t && o.push("c_effect", "c_arrow", "c_highlight"), {
                            hideComments: a,
                            restrictCommands: o
                        }
                    }
                },
                5134: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        h: function() {
                            return fetch
                        }
                    });
                    var a = s(2433),
                        o = s(3754);
                    const n = {},
                        r = {};
                    async function fetch(e) {
                        var t;
                        const s = a.Z.get(o.Z.generate(e)),
                            i = await s;
                        return n[e] = i, null == (t = r[e]) || t.forEach((t => t(n[e]))), i
                    }
                },
                4164: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        i: function() {
                            return getMessageFromError
                        }
                    });
                    var a = s(9790);
                    s(8160);
                    const getMessageFromError = e => {
                        if (e.response && 401 !== e.response.status) return (e.response.data && e.response.data.message ? e.response.data.message : a.R0.badRequest) || e.response.statusText
                    }
                },
                2433: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        Z: function() {
                            return d
                        }
                    });
                    var a = s(9669),
                        o = s.n(a)();
                    const n = ["delete", "patch", "post", "put"];
                    var r = s(169);
                    const random = () => Math.random().toString(36).substring(2, 15);
                    const boolToInt = e => (Object.keys(e).forEach((t => {
                        const s = e[t];
                        "boolean" == typeof s && (e[t] = Number(s)), "object" == typeof s && null !== s && (e[t] = boolToInt(s))
                    })), e);
                    var i = [function addCsrfToken(e) {
                        return n.includes(e.method) ? (e.data instanceof FormData || e.data instanceof URLSearchParams ? e.data.append("_token", window.context.csrf.token) : e.data = Object.assign({
                            _token: window.context.csrf.token
                        }, e.data || {}), e) : e
                    }, function addRequestId(e) {
                        return (() => {
                            const e = document.getElementById(r.GO.NAV_ROOT);
                            return !!e && Boolean(e.dataset.featureClientRequestId)
                        })() && (e.headers.common["X-Chesscom-Request-Id"] = (e => {
                            let t = random();
                            for (; t.length < e;) t += random();
                            return t.substring(0, e)
                        })(32)), e
                    }, function castBoolsToInts(e) {
                        return "object" == typeof e.data && (e.data = boolToInt(e.data)), e
                    }];

                    function responseErrorInterceptor(e) {
                        const t = e.config,
                            s = e.response;
                        if ("Cancel" === e.toString()) return Promise.reject(e);
                        try {
                            t.data = JSON.parse(t.data)
                        } catch (a) {
                            return Promise.reject(e)
                        }
                        if (s && 403 === s.status && s.headers["x-chesscom-csrf-token"] && t && !t.data.retry) {
                            const e = s.headers["x-chesscom-csrf-token"];
                            return t.data._token = e, t.data.retry = !0, window.context.csrf.token = e, o(t)
                        }
                        return Promise.reject(e)
                    }
                    var l = s(3207),
                        c = s(4770);
                    const checkWindowObject = () => {
                            (({
                                key: e,
                                value: t
                            }) => {
                                window.chesscom || (window.chesscom = {}), window.chesscom[e] || (window.chesscom[e] = t)
                            })({
                                key: "logData",
                                value: {}
                            })
                        },
                        log = ({
                            key: e,
                            value: t
                        }) => {
                            checkWindowObject(), window.chesscom.logData[e] = t, async function setSentryContext(e) {
                                if (!(await (0, l.U)())) return;
                                (await (0, c.m)()).configureScope((t => {
                                    Object.keys(e).forEach((s => {
                                        t.setExtra(s, e[s])
                                    }))
                                }))
                            }({
                                [e]: t
                            })
                        };

                    function responseInterceptor(e) {
                        return e.headers && e.headers["x-chesscom-request-id-cdn"] && (log({
                            key: "x-chesscom-request-id-cdn",
                            value: e.headers["x-chesscom-request-id-cdn"]
                        }), log({
                            key: "x-chesscom-request-id-lb",
                            value: e.headers["x-chesscom-request-id-lb"]
                        })), e
                    }

                    function findExistingInterceptor(e, t) {
                        var s;
                        if (!t.name) throw new Error("interceptor must be a named function");
                        return null == (s = e.handlers) ? void 0 : s.find((e => {
                            var s;
                            return (null == (s = e.fulfilled) ? void 0 : s.name) === t.name
                        }))
                    }! function registerInterceptors(e) {
                        i.forEach((t => {
                            findExistingInterceptor(e.interceptors.request, t) || e.interceptors.request.use(t)
                        })), findExistingInterceptor(e.interceptors.response, responseInterceptor) || e.interceptors.response.use(responseInterceptor, responseErrorInterceptor)
                    }(o);
                    var d = o
                },
                6272: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        p6: function() {
                            return p
                        }
                    });
                    var a = s(7597),
                        o = s(8160),
                        n = Object.defineProperty,
                        r = Object.getOwnPropertySymbols,
                        i = Object.prototype.hasOwnProperty,
                        l = Object.prototype.propertyIsEnumerable,
                        __defNormalProp = (e, t, s) => t in e ? n(e, t, {
                            enumerable: !0,
                            configurable: !0,
                            writable: !0,
                            value: s
                        }) : e[t] = s,
                        __spreadValues = (e, t) => {
                            for (var s in t || (t = {})) i.call(t, s) && __defNormalProp(e, s, t[s]);
                            if (r)
                                for (var s of r(t)) l.call(t, s) && __defNormalProp(e, s, t[s]);
                            return e
                        };

                    function getLocale(e = "", t = "-") {
                        return (e || (Object.prototype.hasOwnProperty.call(window, "context") ? window.context.i18n.locale : "en-US")).replace("_", t)
                    }
                    const c = 31536e6,
                        d = (() => {
                            const e = 864e5;
                            switch ((new Date).getMonth()) {
                                case 3:
                                case 5:
                                case 8:
                                case 10:
                                    return 30 * e;
                                case 1:
                                    return (new Date).getFullYear() % 4 == 0 ? 29 * e : 28 * e;
                                default:
                                    return 31 * e
                            }
                        })(),
                        u = 864e5,
                        m = 36e5,
                        h = 6e4,
                        p = {
                            mergeOptions: e => __spreadValues({
                                abbreviateHours: !1,
                                abbreviateMinutes: !0,
                                includeDays: !1
                            }, e),
                            getUnitsInInt(e, t = {}) {
                                let s = 0,
                                    a = 0,
                                    o = 0,
                                    n = e;
                                return !0 === p.mergeOptions(t).includeDays && (s = Math.floor(n / 86400), n -= 86400 * s), a = Math.floor(n / 3600), n -= 3600 * a, o = Math.floor(n / 60), {
                                    minutes: o,
                                    hours: a,
                                    days: s
                                }
                            },
                            getDaysHoursMinutesAsString(e, t = {}) {
                                const s = p.getDaysHoursMinutesAsObject(e, t),
                                    {
                                        minutes: a,
                                        hours: o,
                                        days: n
                                    } = p.getUnitsInInt(e, t),
                                    r = [];
                                return n > 0 && r.push(s.days), o > 0 && r.push(s.hours), (a > 0 || 0 === r.length) && r.push(s.minutes), r.join(" ")
                            },
                            getDaysHoursMinutesAsObject(e, t = {}) {
                                const s = p.mergeOptions(t),
                                    {
                                        minutes: a,
                                        hours: n,
                                        days: r
                                    } = p.getUnitsInInt(e, t),
                                    i = o.Z.transChoice("{0} 0 days|{1} 1 day|]1,Inf] %1$s% days", r, {
                                        "%1$s%": r
                                    });
                                let l = o.Z.transChoice("{0} 0 hours|{1} 1 hour|]1,Inf] %1$s% hours", Math.floor(n), {
                                        "%1$s%": n
                                    }),
                                    c = o.Z.transChoice("{0} 0 min|{1} 1 min|]1,Inf] %1$s% min", a, {
                                        "%1$s%": a
                                    });
                                return s.abbreviateHours && (l = o.Z.transChoice("{0} 0 hrs|{1} 1 hr|]1,Inf] %1$s% hrs", Math.floor(n), {
                                    "%1$s%": n
                                })), s.abbreviateMinutes || (c = o.Z.transChoice("{1} 1 minute|]1,Inf] %1$s% minutes", a, {
                                    "%1$s%": a
                                })), {
                                    days: i,
                                    hours: l,
                                    minutes: c
                                }
                            },
                            long: (e = new Date, t = {}) => {
                                const s = e instanceof Date ? e : new Date(e);
                                return new Intl.DateTimeFormat(getLocale(), __spreadValues(__spreadValues({}, {
                                    year: "numeric",
                                    month: "short",
                                    day: "numeric"
                                }), t)).format(s)
                            },
                            full: (e = new Date, t = {}) => {
                                const s = e instanceof Date ? e : new Date(e);
                                return new Intl.DateTimeFormat(getLocale(), __spreadValues(__spreadValues({}, {
                                    year: "numeric",
                                    month: "short",
                                    day: "numeric",
                                    hour: "numeric",
                                    minute: "numeric",
                                    second: "numeric",
                                    timeZoneName: "short"
                                }), t)).format(s)
                            },
                            numeric: (e = new Date, t = {}) => {
                                const s = e instanceof Date ? e : new Date(e);
                                if (window.Intl) {
                                    const e = getLocale();
                                    return new Intl.DateTimeFormat(e, Object.assign({
                                        day: "2-digit",
                                        month: "2-digit",
                                        year: "numeric"
                                    }, t)).format(s)
                                }
                                return `${`0${s.getMonth()+1}`.slice(-2)}/${`0${s.getDate()}`.slice(-2)}/${s.getFullYear()}`
                            },
                            relative: (e, t = !0, s = !0, a = !1, n = Date.now()) => {
                                let r, i;
                                const l = (e instanceof Date ? e : new Date(e)).getTime(),
                                    p = a ? l - n : n - l;
                                if (Math.abs(p) > d && t) {
                                    const e = {
                                        year: "numeric",
                                        month: "short",
                                        day: "numeric"
                                    };
                                    return new Intl.DateTimeFormat(getLocale(), e).format(l)
                                }
                                if (p >= c) i = "year", r = Math.abs(Math.floor(p / c));
                                else if (p >= d) i = "month", r = Math.abs(Math.floor(p / d));
                                else if (p >= u) i = "day", r = Math.abs(Math.floor(p / u));
                                else if (p >= m) i = "hour", r = Math.abs(Math.floor(p / m));
                                else {
                                    if (!(p >= h)) return a ? o.Z.trans("Right now") : o.Z.trans("Just now");
                                    i = "minute", r = Math.abs(Math.floor(p / h))
                                }
                                return function getTimeAgo(e, t, s) {
                                    return "year" === e ? t ? o.Z.transChoice("{1} 1 year ago|]1,Inf] %1$s% years ago", s, {
                                        "%1$s%": s
                                    }) : o.Z.transChoice("{1} 1 year|]1,Inf] %1$s% years", s, {
                                        "%1$s%": s
                                    }) : "month" === e ? t ? o.Z.transChoice("{1} 1 month ago|]1,Inf] %1$s% months ago", s, {
                                        "%1$s%": s
                                    }) : o.Z.transChoice("{1} 1 month|]1,Inf] %1$s% months", s, {
                                        "%1$s%": s
                                    }) : "day" === e ? t ? o.Z.transChoice("{1} 1 day ago|]1,Inf] %1$s% days ago", s, {
                                        "%1$s%": s
                                    }) : o.Z.transChoice("{1} 1 day|]1,Inf] %1$s% days", s, {
                                        "%1$s%": s
                                    }) : "hour" === e ? t ? o.Z.transChoice("{1} 1 hour ago|]1,Inf] %1$s% hours ago", s, {
                                        "%1$s%": s
                                    }) : o.Z.transChoice("{1} 1 hour|]1,Inf] %1$s% hours", s, {
                                        "%1$s%": s
                                    }) : "minute" === e ? t ? o.Z.transChoice("{1} 1 minute ago|]1,Inf] %1$s% minutes ago", s, {
                                        "%1$s%": s
                                    }) : o.Z.transChoice("{1} 1 minute|]1,Inf] %1$s% minutes", s, {
                                        "%1$s%": s
                                    }) : ""
                                }(i, Math.abs(p) === p && s, r)
                            },
                            customNumericDate: (e = new Date, t = "/", s = "m/d/y") => {
                                const a = e instanceof Date ? e : new Date(e),
                                    o = {
                                        d: `0${a.getDate()}`.slice(-2),
                                        m: `0${a.getMonth()+1}`.slice(-2),
                                        y: `${a.getFullYear()}`
                                    };
                                if (!["m", "d", "y"].every((e => s.split("/").includes(e)))) return `${o.m}${t}${o.d}${t}${o.y}`;
                                return s.split("/").reduce(((e, t) => (e.push(o[t]), e)), []).join(t)
                            },
                            userDate: e => {
                                const t = window.context.user ? new Date(1e3 * e).toLocaleString("en-US", {
                                        timeZone: window.context.user.timezone
                                    }) : new Date(1e3 * e),
                                    s = new Date(t).setMilliseconds(0),
                                    o = new Date(s),
                                    n = a.Iz.daysOfWeek[o.getDay()],
                                    r = o.getDate(),
                                    i = a.Iz.months[o.getMonth()],
                                    l = o.toLocaleTimeString(getLocale()),
                                    c = l.split(" ").length > 1 ? l.split(" ")[1] : "",
                                    d = l.split(" ")[0].split(":");
                                d.pop();
                                return `${n}, ${i} ${r}, ${d.join(":")}${c}`
                            }
                        }
                },
                7203: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        q: function() {
                            return pixelDensity
                        },
                        b: function() {
                            return retinaImageSrcset
                        }
                    });
                    const pixelDensity = (e, t) => {
                            if (!e) return;
                            let s = "@2x";
                            return /\.svg$/.test(e) ? e : ([1.5, 3, 4].indexOf(t) > -1 && (s = `@${t}x`), e.replace(/(\.\w+)$/, (e => s + e)))
                        },
                        retinaImageSrcset = e => {
                            if (!e) return null;
                            const t = e.substring(e.lastIndexOf("/") + 1),
                                s = e.replace(t, "");
                            return `${e}, ${s}${pixelDensity(t)} 2x`
                        }
                },
                2220: function(e, t, s) {
                    "use strict";
                    var a = s(3754);
                    t.Z = () => -1 !== window.location.href.indexOf(a.Z.generate("web_2fa_login"))
                },
                6301: function(e, t, s) {
                    "use strict";

                    function getDefaultFen() {
                        return "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1"
                    }
                    s.d(t, {
                        H: function() {
                            return getDefaultFen
                        }
                    })
                },
                3754: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        Z: function() {
                            return n
                        }
                    });
                    s(1047);
                    var a = s(4606),
                        o = s.n(a);

                    function getRouting() {
                        return o()
                    }
                    var n = new class Router {
                        generate(e, t, s) {
                            const a = t || {};
                            "string" == typeof a.username && (a.username = a.username.toLowerCase()),
                                function copyRoute(e) {
                                    var t, s, a;
                                    const o = getRouting();
                                    if (!o.routes_[e]) {
                                        try {
                                            Object.assign(o.context_, {
                                                base_url: "",
                                                prefix: "",
                                                host: "www.chess-dev.com",
                                                port: "",
                                                scheme: "https",
                                                locale: ""
                                            })
                                        } catch (n) {}
                                        if (Object.isFrozen(o.routes_) && (o.routes_ = Object.assign({}, o.routes_)), null == (s = null == (t = window.chesscom) ? void 0 : t.routes) ? void 0 : s[e]) {
                                            const t = window.chesscom.routes[e],
                                                s = ".chess-dev.com",
                                                n = window.location.host.replace(/^[^.]+/, "");
                                            n && (null == (a = t.hosttokens) || a.forEach((e => {
                                                e.forEach(((t, a) => {
                                                    t.includes(s) && (e[a] = t.replace(s, n))
                                                }))
                                            }))), o.routes_[e] = t
                                        }
                                    }
                                }(e);
                            try {
                                return getRouting().generate(e, a, s)
                            } catch (o) {
                                const t = new Error(`Couldn't find missing route '${e}'.`);
                                return console.error(t), "/"
                            }
                        }
                    }
                },
                1047: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        T: function() {
                            return captureException
                        }
                    });
                    var a = s(3207),
                        o = s(4770);
                    async function captureException(e, t) {
                        if (!(await (0, a.U)())) return;
                        !async function enableSentry(e = 0) {
                            var t;
                            if (!(await (0, a.U)())) return;
                            window.chesscom.sudoEnableSentry = !0;
                            const s = await (0, o.m)();
                            for (; null == (t = window.chesscom.queuedSentryReports) ? void 0 : t.length;) s.captureException(window.chesscom.queuedSentryReports.shift());
                            if (e > 0) {
                                const t = Date.now() + 24 * e * 60 * 60 * 1e3;
                                window.localStorage.setItem("enableSentryUntil", t.toString())
                            }
                        }();
                        const s = await (0, o.m)(),
                            n = e instanceof Error ? e : new Error(e);
                        t ? s.withScope((e => {
                            Object.keys(t).forEach((s => e.setExtra(s, t[s]))), s.captureException(n)
                        })) : s.captureException(n)
                    }
                },
                4770: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        m: function() {
                            return getSentryBrowser
                        }
                    });
                    Object.create, Object.defineProperty, Object.getOwnPropertyDescriptor, Object.getOwnPropertyNames, Object.getPrototypeOf, Object.prototype.hasOwnProperty;
                    async function getSentryBrowser() {
                        return s.e(631).then(s.bind(s, 6048))
                    }
                },
                3207: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        U: function() {
                            return isSentryAvailable
                        }
                    });
                    var a = s(4770);
                    async function isSentryAvailable() {
                        try {
                            const e = await (0, a.m)();
                            return Boolean(e.getCurrentHub().getClient())
                        } catch (e) {
                            return !1
                        }
                    }
                },
                9958: function(e, t, s) {
                    "use strict";
                    var a = s(2305);
                    t.Z = {
                        methods: {
                            $trans: a.dW,
                            $transChoice: a.jn
                        }
                    }
                },
                2305: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        dW: function() {
                            return trans
                        },
                        jn: function() {
                            return transChoice
                        },
                        ox: function() {
                            return getCountries
                        },
                        $H: function() {
                            return u
                        }
                    });
                    var a, o, n, r, i = s(2475),
                        l = s.n(i);
                    const c = "fr_FR" === (null == (o = null == (a = window.context) ? void 0 : a.i18n) ? void 0 : o.locale),
                        d = null == (r = null == (n = window.chesscom) ? void 0 : n.features) ? void 0 : r.includes("french_trans_choice");
                    l().placeHolderPrefix = "", l().placeHolderSuffix = "";
                    const escapeParameters = e => {
                            const t = {};
                            return null != e && Object.keys(e).forEach((s => {
                                const a = s.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
                                null != a && a.length > 0 && (t[a] = e[s])
                            })), t
                        },
                        getTranslatedPhrase = (e, t = "messages", s) => window.chesscom_translations && window.chesscom_translations[t] && window.chesscom_translations[t][e] ? window.chesscom_translations[t][e] : window.chesscom_live_translations && window.chesscom_live_translations[t] && window.chesscom_live_translations[t][e] ? window.chesscom_live_translations[t][e] : "live" === t && window.i18n_phrases && window.i18n_phrases[e] ? window.i18n_phrases : "countries" === t && window.Country && window.Country[e] ? window.Country : s ? void 0 : "javascript" !== t ? getTranslatedPhrase(e, "javascript") : e,
                        trans = (e, t, s) => l().trans(getTranslatedPhrase(e, s), escapeParameters(t), s),
                        transChoice = (e, t, s, a) => {
                            if (void 0 === t) return "";
                            const o = getTranslatedPhrase(e, a),
                                n = escapeParameters(s);
                            return c && d ? function frenchTransChoice(e, t, s, a) {
                                const [o, n, r] = e.split("|").map((e => e.trim()));
                                if (0 === t || 1 === t) return l().trans(o, s, a);
                                if (t % 1e6 == 0) return l().trans(n, s, a);
                                return l().trans(r, s, a)
                            }(o, t, n, a) : l().transChoice(o, t, n)
                        };
                    const getCountries = () => window.chesscom_translations && window.chesscom_translations.countries ? window.chesscom_translations.countries : window.chesscom_live_translations && window.chesscom_live_translations.countries ? window.chesscom_live_translations.countries : window.Country ? window.Country : void 0,
                        u = {
                            trans: trans,
                            transChoice: transChoice
                        }
                },
                8160: function(e, t, s) {
                    "use strict";
                    var a = s(2305);
                    t.Z = a.$H
                },
                2910: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        vV: function() {
                            return isValidEmail
                        },
                        Ip: function() {
                            return isValidZipCode
                        },
                        jv: function() {
                            return isValidUrl
                        }
                    });
                    const isValidEmail = e => /^([A-Za-z0-9_\-.+])+@([A-Za-z0-9_\-.])+\.([A-Za-z]{2,})$/.test(e),
                        isValidZipCode = e => /^[0-9]{5}(?:-[0-9]{4})?$/.test(e),
                        isValidUrl = e => /(http|https):\/\/(\w+:{0,1}\w*)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%!\-/]))?/.test(e)
                },
                6989: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        XP: function() {
                            return h
                        },
                        nv: function() {
                            return g
                        },
                        YE: function() {
                            return fetchEngineConfig
                        }
                    });
                    var a = s(2305),
                        o = s(3527),
                        n = s.n(o),
                        r = s(1353),
                        i = Object.defineProperty,
                        l = Object.defineProperties,
                        c = Object.getOwnPropertyDescriptors,
                        d = Object.getOwnPropertySymbols,
                        u = Object.prototype.hasOwnProperty,
                        m = Object.prototype.propertyIsEnumerable,
                        __defNormalProp = (e, t, s) => t in e ? i(e, t, {
                            enumerable: !0,
                            configurable: !0,
                            writable: !0,
                            value: s
                        }) : e[t] = s,
                        __spreadValues = (e, t) => {
                            for (var s in t || (t = {})) u.call(t, s) && __defNormalProp(e, s, t[s]);
                            if (d)
                                for (var s of d(t)) m.call(t, s) && __defNormalProp(e, s, t[s]);
                            return e
                        },
                        __spreadProps = (e, t) => l(e, c(t));
                    const h = {
                            KOMODO: "KOMODO",
                            STOCKFISH: "STOCKFISH",
                            STOCKFISH_NNUE: "STOCKFISH (NNUE)",
                            OFF: "OFF"
                        },
                        p = {
                            name: n().supportsMultithreading() ? (0, r.FR)("web_client_stockfish_15") ? "Stockfish 15" : "Stockfish 14.1" : "Stockfish 11",
                            description: n().supportsMultithreading() ? (0, a.dW)("faster") : "",
                            paths: {
                                engines: {
                                    multiThreaded: {
                                        loader: window.Config.threadedEnginePaths.stockfish.multiThreaded.loader,
                                        engine: window.Config.threadedEnginePaths.stockfish.multiThreaded.engine
                                    },
                                    singleThreaded: {
                                        loader: window.Config.threadedEnginePaths.stockfish.singleThreaded.loader,
                                        engine: window.Config.threadedEnginePaths.stockfish.singleThreaded.engine
                                    },
                                    asm: window.Config.threadedEnginePaths.stockfish.asm
                                },
                                pathToBook: window.Config.pathToBookSmall
                            }
                        },
                        b = {
                            [h.STOCKFISH]: __spreadValues({}, p),
                            [h.STOCKFISH_NNUE]: __spreadProps(__spreadValues({}, p), {
                                name: (0, r.FR)("web_client_stockfish_15") ? "Stockfish 15 NNUE" : "Stockfish 14.1 NNUE",
                                description: (0, a.dW)("stronger, %filesize%", {
                                    "%filesize%": "45MB"
                                }),
                                paths: __spreadProps(__spreadValues({}, p.paths), {
                                    settings: {
                                        EvalFile: window.Config.threadedEnginePaths.stockfish.multiThreaded.nnue,
                                        Threads: (navigator.hardwareConcurrency / 2).toString(),
                                        "Use NNUE": "true"
                                    }
                                }),
                                multithreadingRequired: !0
                            }),
                            [h.KOMODO]: {
                                name: "Komodo",
                                paths: {
                                    pathToEngineWorker: (0, r.FR)("use_new_komodo_skill_for_engine_bots") ? window.Config.pathToExplanationEngineWorker : window.Config.pathToKomodoWorker,
                                    pathToWasmEngine: (0, r.FR)("use_new_komodo_skill_for_engine_bots") ? window.Config.pathToWasmExplanationEngine : window.Config.pathToWasmKomodo,
                                    pathToNonWasmEngine: window.Config.pathToNonWasmKomodo
                                }
                            },
                            [h.OFF]: {
                                label: (0, a.dW)("Engine Off"),
                                name: "Engine Off"
                            }
                        },
                        g = (window.Config.pathToExplanationEngineWorker, window.Config.pathToWasmExplanationEngine, "STOCKFISH");

                    function fetchEngineConfig(e) {
                        var t;
                        return null != (t = b[e]) ? t : b[g]
                    }
                },
                4176: function(e, t, s) {
                    "use strict";
                    var a = s(4713),
                        o = (e => (e.Mark = "mark", e.Position = "position", e.Move = "move", e))(o || {});

                    function addChessboardPlugins(e, t) {
                        t.forEach((t => {
                            e.game.plugins.has(t.name) || e.game.plugins.add(t)
                        }))
                    }
                    var n = s(7104),
                        r = s(2433),
                        i = s(3754);
                    const l = (0, a.kr)();
                    var c = s(5696),
                        d = (e => (e[e.Never = 0] = "Never", e[e.ArchiveOnly = 1] = "ArchiveOnly", e[e.Always = 2] = "Always", e))(d || {});
                    var u = Object.defineProperty,
                        m = Object.getOwnPropertySymbols,
                        h = Object.prototype.hasOwnProperty,
                        p = Object.prototype.propertyIsEnumerable,
                        __defNormalProp = (e, t, s) => t in e ? u(e, t, {
                            enumerable: !0,
                            configurable: !0,
                            writable: !0,
                            value: s
                        }) : e[t] = s,
                        __spreadValues = (e, t) => {
                            for (var s in t || (t = {})) h.call(t, s) && __defNormalProp(e, s, t[s]);
                            if (m)
                                for (var s of m(t)) p.call(t, s) && __defNormalProp(e, s, t[s]);
                            return e
                        };
                    const b = {
                        soundPlugin: null,
                        arrowKeysPlugin: null,
                        chessboards: {},
                        boardOptions: __spreadValues(__spreadValues({}, function getDefaultBoardOptions() {
                            const {
                                animationType: e,
                                boardStyle: t,
                                coordinates: s,
                                darkMode: a,
                                highlightLegalMoves: o,
                                highlightMoves: r,
                                moveListDisplayType: i,
                                moveMethod: l,
                                pieceStyle: c,
                                playSounds: u,
                                soundTheme: m
                            } = (0, n.jw)();
                            return {
                                animationType: e,
                                boardSize: 0,
                                boardStyle: t,
                                coordinates: s,
                                darkMode: a,
                                evaluationBarType: 0,
                                highlightLegalMoves: o,
                                highlightMoves: r,
                                isWhiteOnBottom: !1,
                                moveListDisplayType: i,
                                moveMethod: l,
                                pieceStyle: c,
                                playSounds: u,
                                showTimestamps: d.Always,
                                soundTheme: m
                            }
                        }()), c.n.getBoardOptions()),
                        boardStyles: null
                    };
                    var g = s(2866),
                        v = s(3291),
                        w = s(2599).Z;
                    var f = s(942),
                        y = s(7835);
                    var _ = Object.defineProperty,
                        k = Object.defineProperties,
                        C = Object.getOwnPropertyDescriptors,
                        S = Object.getOwnPropertySymbols,
                        x = Object.prototype.hasOwnProperty,
                        $ = Object.prototype.propertyIsEnumerable,
                        create_chessboard_defNormalProp = (e, t, s) => t in e ? _(e, t, {
                            enumerable: !0,
                            configurable: !0,
                            writable: !0,
                            value: s
                        }) : e[t] = s,
                        create_chessboard_spreadValues = (e, t) => {
                            for (var s in t || (t = {})) x.call(t, s) && create_chessboard_defNormalProp(e, s, t[s]);
                            if (S)
                                for (var s of S(t)) $.call(t, s) && create_chessboard_defNormalProp(e, s, t[s]);
                            return e
                        };

                    function createChessboard(e) {
                        var t, s, a;
                        const {
                            id: o,
                            options: c,
                            mode: d,
                            plugins: u,
                            state: m,
                            excludedPlugins: h
                        } = e;
                        if (o in b.chessboards) throw new Error("Chessboard already created");
                        const p = (0, n.n8)((0, n.NQ)({
                                exclude: null != h ? h : []
                            }), null != (a = null == (s = (t = l).getDefaultChessboardPlugins) ? void 0 : s.call(t)) ? a : []),
                            _ = p.find((e => e.name === n.th.Sounds.Plugin.Name)),
                            S = p.find((e => e.name === n.th.ArrowKeys.Plugin.Name));
                        !b.arrowKeysPlugin && S && (b.arrowKeysPlugin = S), !b.soundPlugin && _ && (b.soundPlugin = _);
                        const x = (0, n.n8)(p, u || []).filter((e => e.name !== n.th.Sounds.Plugin.Name)).concat(b.soundPlugin),
                            $ = document.createElement("chess-board");
                        var P, E;
                        $.className = "board", $.createGame({
                            el: $,
                            options: (P = create_chessboard_spreadValues(create_chessboard_spreadValues({}, b.boardOptions), c), E = {
                                id: o,
                                test: Boolean(window.Config.cypress)
                            }, k(P, C(E))),
                            mode: d,
                            plugins: x
                        }), (0, f.F)(y.R.BOARD_IMAGES) && !(null == h ? void 0 : h.includes(n.th.BoardImages.Plugin.Name)) && function addChessboardImagesPlugin(e) {
                            addChessboardPlugins(e, [(0, n.qU)(), (0, n.YP)(), (0, n.gb)({
                                imagesBaseURL: "/bundles/web/images/sprites/board-images",
                                soundsBaseURL: "/bundles/web/sounds/board-images"
                            })])
                        }($), m && ($.state = function createChessboardState(e, t) {
                            const s = {};
                            return Object.keys(t).forEach((a => {
                                const o = t[a],
                                    handler = () => {
                                        const t = o.getValue(e);
                                        t !== s[a] && (s[a] = t)
                                    };
                                handler();
                                const n = w(handler, o.debounce);
                                e.parentNode && e.game.onMany(o.events, n), e.addEventListener(v._.Events.BoardAttached, (() => {
                                    handler(), e.game.onMany(o.events, n)
                                })), e.addEventListener(v._.Events.BoardDetached, (() => {
                                    e.game.offMany(o.events.map((e => ({
                                        type: e,
                                        handler: n
                                    }))))
                                }))
                            })), (0, g.iH)(s), s
                        }($, m)), window.chesscom.features.includes("chessboard_loggly_error_reporting") && function addChessboardReportingPlugin(e) {
                            const t = (0, n.sC)({
                                onError: t => {
                                    var s, a, o;
                                    const n = i.Z.generate("web_fe_log_callback", {
                                        message: JSON.stringify({
                                            "Board Options": e.game.getOptions(),
                                            "Device Info": null == (s = window.navigator) ? void 0 : s.appVersion,
                                            Entry: t,
                                            "Mode Options": e.game.getMode().getOptions(),
                                            "Plugin List": e.game.plugins.get().map((({
                                                name: e
                                            }) => e)),
                                            URL: window.location.href,
                                            User: null == (o = null == (a = window.context) ? void 0 : a.user) ? void 0 : o.username
                                        }),
                                        level: "ERROR"
                                    });
                                    r.Z.post(n)
                                }
                            });
                            addChessboardPlugins(e, [t])
                        }($), b.chessboards[o] = $
                    }
                    const P = n.C8.create(),
                        E = "classroom-share";

                    function getChessboard(e) {
                        return b.chessboards[`${e}`]
                    }

                    function getActiveChessboard() {
                        const e = l.getActiveChessboardId();
                        if (!e) throw new Error("No active chessboard");
                        return getChessboard(e)
                    }

                    function getActiveChessboardId() {
                        return "classroom"
                    }
                    var O = s(6301);
                    const A = "connect",
                        T = "disconnect",
                        M = "failure",
                        R = "reconnect",
                        I = "error";
                    var j = (e => (e.Base = "base", e.Chat = "chat", e.Classroom = "classroom", e.Matcher = "matcher", e.Play = "play", e.Presence = "presence", e.Insights = "insights", e.TopPlayers = "topplayers", e.Users = "users", e.Invitations = "invitations", e))(j || {}),
                        B = (e => (e.Classroom = "classroom", e.Game = "game", e.Disable = "disable", e.Messages = "messages", e))(B || {}),
                        L = (e => (e.Users = "users", e))(L || {}),
                        D = (e => (e.Alias = "alias", e.Arrows = "arrows", e.AudioSettings = "audio-settings", e.AutoSave = "auto-save", e.Boards = "boards", e.ChatSettings = "chat-settings", e.Clock = "clock", e.CollectionIds = "collection-ids", e.Commands = "commands", e.Confirmations = "confirmations", e.Current = "current", e.Enrollment = "enrollment", e.EvaluationSettings = "evaluation-settings", e.Flipped = "flipped", e.GameId = "game-id", e.Images = "images", e.Invitees = "invitees", e.LargeClassroom = "large-classroom", e.Moves = "moves", e.Notifications = "notifications", e.PinnedVideos = "pinned-videos", e.Players = "players", e.Position = "position", e.Publish = "publish", e.SelectedCollectionId = "selected-collection-id", e.Sequence = "sequence", e.Sessions = "sessions", e.Squares = "squares", e.Stopwatch = "stopwatch", e.Timer = "timer", e.Title = "title", e.Twilio = "twilio", e.Users = "users", e.Webrtc = "webrtc", e))(D || {}),
                        U = (e => (e.Users = "users", e))(U || {});
                    const z = window.PubSub;
                    var q = (e => (e[e.None = 0] = "None", e[e.White = 1] = "White", e[e.Black = 2] = "Black", e))(q || {}),
                        V = s(2305),
                        N = s(2910);
                    class PlayerModel extends a.Hn {
                        constructor(e) {
                            super(), this.avatarUrl = null, this.color = q.None, this.country = null, this.flairCode = null, this.hasAccount = !1, this.membership = null, this.name = "", this.rating = null, this.title = null, this.color = e
                        }
                        getName() {
                            return this.name && "?" !== this.name ? this.name : this.color === q.White ? (0, V.dW)("White") : this.color === q.Black ? (0, V.dW)("Black") : (0, V.dW)("Player")
                        }
                        getAvatarUrl() {
                            return this.avatarUrl && (0, N.jv)(this.avatarUrl) ? this.avatarUrl : null
                        }
                    }
                    class BoardModel extends a.Hn {
                        constructor() {
                            super(...arguments), this.arrows = "", this.blackPlayer = new PlayerModel(q.Black), this.draft = !0, this.flipped = !1, this.gameId = "", this.id = "", this.images = "", this.isSaving = !1, this.line = 0, this.move = 0, this.pgn = "", this.sequence = 65536, this.squares = "", this.title = "", this.userId = "", this.version = 0, this.whitePlayer = new PlayerModel(q.White)
                        }
                        getTitle() {
                            return this.title || (0, V.dW)("%white% vs %black%", {
                                "%white%": this.whitePlayer.getName(),
                                "%black%": this.blackPlayer.getName()
                            })
                        }
                    }
                    class ChatMessageModel extends a.Hn {
                        constructor() {
                            super(...arguments), this.authorId = "", this.body = {
                                content: ""
                            }, this.id = ""
                        }
                    }
                    var Z = (e => (e.CurrentTime = "current_time", e.RoomTime = "room_time", e.Timer = "timer", e.Stopwatch = "stopwatch", e))(Z || {}),
                        F = (e => (e.Spectator = "spectator", e.White = "play_as_white", e.Black = "play_as_black", e.Full = "full", e.Kick = "kick", e))(F || {}),
                        G = (e => (e.Online = "online", e.Offline = "offline", e))(G || {}),
                        W = (e => (e.Accepted = "accepted", e.Declined = "rejected", e.Pending = "pending", e))(W || {}),
                        H = (e => (e.Owner = "owner", e.Participant = "participant", e))(H || {});
                    class UserModel extends a.Hn {
                        constructor(e) {
                            super(), this.avatarUrl = null, this.chessTitle = null, this.country = null, this.flairCode = null, this.id = "", this.membership = null, this.userId = 0, this.username = "", e && (0, a.Uc)(this, e)
                        }
                        isPremium() {
                            return "basic" !== this.membership
                        }
                    }
                    var Y = (e => (e.LoadGames = "load_games", e))(Y || {});
                    class MemberModel extends UserModel {
                        constructor() {
                            super(...arguments), this.capabilities = [], this.role = H.Participant, this.boardControl = F.Spectator, this.invitationStatus = W.Pending, this.presenceStatus = G.Offline
                        }
                        hasBoardControl() {
                            return this.boardControl !== F.Spectator
                        }
                        isPlayingWhite() {
                            return this.boardControl === F.White
                        }
                        isPlayingBlack() {
                            return this.boardControl === F.Black
                        }
                        hasFullControl() {
                            return this.boardControl === F.Full
                        }
                        isSpectator() {
                            return this.boardControl === F.Spectator
                        }
                        isOwner() {
                            return this.role === H.Owner
                        }
                        isInvitationAccepted() {
                            return this.invitationStatus === W.Accepted
                        }
                        isInvitationPending() {
                            return this.invitationStatus === W.Pending
                        }
                        isInvitationDeclined() {
                            return this.invitationStatus === W.Declined
                        }
                        isOnline() {
                            return this.presenceStatus === G.Online
                        }
                        canLoadGames() {
                            return this.capabilities.includes(Y.LoadGames)
                        }
                    }
                    const sortBy = (e, t) => [...e].sort(((e, s) => e[t] > s[t] ? 1 : -1));
                    var K = (e => (e.Ended = "ended", e.Started = "started", e.Stopped = "stopped", e))(K || {});

                    function getClockSeconds(e, t, s) {
                        if (t.state === K.Ended) return 0;
                        const a = Math.floor(function rcnServerTimeToSeconds(e) {
                            var t, s, a;
                            const o = /^PT(?:(\d+)H)?(?:(\d+)M)?(?:(\d+(?:\.\d{1,3})?)S)?$/.exec(e);
                            return o ? 60 * Number(null != (t = o[1]) ? t : 0) * 60 + 60 * Number(null != (s = o[2]) ? s : 0) + Number(null != (a = o[3]) ? a : 0) : 0
                        }(t.duration));
                        if (t.state === K.Stopped) return a;
                        const o = function getElapsedSeconds(e, t) {
                            return Math.floor(Math.max(0, (e.getTime() - t) / 1e3))
                        }(e, t.updatedAt);
                        return Math.max(0, a + o * s)
                    }
                    class TimerModel extends a.Hn {
                        constructor() {
                            super(...arguments), this.duration = "PT0S", this.state = K.Stopped, this.updatedAt = Date.now()
                        }
                        isRunning() {
                            return this.state === K.Started
                        }
                        getClockSeconds(e, t) {
                            return getClockSeconds(e, this, t)
                        }
                    }
                    class RoomModel extends a.Hn {
                        constructor() {
                            super(...arguments), this.alias = "", this.audioMuteAll = !1, this.autoSave = !1, this.boards = (0, a.BL)(BoardModel, {
                                key: "id"
                            }), this.chatMessages = (0, a.BL)(ChatMessageModel, {
                                key: "id"
                            }), this.chatMuteAll = !1, this.chatSenders = (0, a.BL)(UserModel, {
                                key: "id"
                            }), this.clockType = Z.CurrentTime, this.coachOnly = !1, this.collectionIds = [], this.createdAt = (new Date).toISOString(), this.currentBoardId = "", this.id = "", this.isSaving = !1, this.largeClassroom = !1, this.members = (0, a.BL)(MemberModel, {
                                key: "id"
                            }), this.openEnrollment = !0, this.selectedCollectionId = "", this.showEvaluationBar = !1, this.showEvaluationLines = !1, this.showMoveList = !0, this.stopwatch = new TimerModel, this.timer = new TimerModel, this.videoMuteAll = !1, this.pinnedVideos = []
                        }
                        getUrl(e = !1) {
                            return i.Z.generate("web_classroom_room", {
                                id: this.alias || this.id
                            }, e)
                        }
                        getChannel() {
                            return [j.Classroom, D.Sessions, this.id].join("/")
                        }
                        getChatChannel() {
                            return [j.Chat, B.Classroom, this.id].join("/")
                        }
                        getTimerSeconds(e) {
                            return this.timer.getClockSeconds(e, -1)
                        }
                        getStopwatchSeconds(e) {
                            return this.stopwatch.getClockSeconds(e, 1)
                        }
                        isClockRunning() {
                            return this.clockType === Z.Timer ? this.timer.isRunning() : this.clockType === Z.Stopwatch && this.stopwatch.isRunning()
                        }
                        isClockUnset(e) {
                            return this.clockType === Z.Timer && 0 === this.getTimerSeconds(e)
                        }
                        getDraftBoard(e) {
                            return this.boards.find((t => t.draft && t.userId === e))
                        }
                        getDefaultBoard() {
                            return this.boards.find((e => !e.draft)) || this.boards[0]
                        }
                        hasNonDraftBoards() {
                            return this.boards.some((e => !e.draft))
                        }
                        getOwner() {
                            return this.members.find((e => e.isOwner()))
                        }
                        getParticipants() {
                            return this.members.filter((e => !e.isOwner()))
                        }
                        isEvaluationEnabled() {
                            return this.showEvaluationBar || this.showEvaluationLines
                        }
                        getVisibleMembers() {
                            return this.members.filter((e => e.isOwner() || e.isInvitationPending() || e.isOnline()))
                        }
                        isEmpty() {
                            return this.members.every((e => e.isOwner())) && this.boards.every((e => e.draft))
                        }
                        getNextSequence() {
                            return 65536 * (this.boards.length + 1)
                        }
                        getSortedBoards() {
                            return sortBy(this.boards.filter((e => !e.draft)), "sequence")
                        }
                        isVideoPinned(e) {
                            return this.pinnedVideos.includes(e)
                        }
                    }
                    const Q = {
                        isCreatingRoom: !1,
                        isJoiningRoom: !1,
                        activeRoomId: null,
                        activeBoardId: null,
                        closingRooms: [],
                        loadingRooms: [],
                        addingBoards: [],
                        recoveringBoards: [],
                        rooms: (0, a.BL)(RoomModel, {
                            key: "id"
                        }),
                        subscriptions: {},
                        pendingUpdates: {},
                        pendingChatMemberOfflineUpdates: {},
                        receivedBoardUpdates: {}
                    };

                    function getRoom(e) {
                        return Q.rooms.find(e)
                    }
                    var J = (e => (e[e.AddBoard = 0] = "AddBoard", e[e.BoardControl = 1] = "BoardControl", e[e.ChangePosition = 2] = "ChangePosition", e[e.CloseBoard = 3] = "CloseBoard", e[e.FlipBoard = 4] = "FlipBoard", e[e.LoadBoard = 5] = "LoadBoard", e[e.MakeMove = 6] = "MakeMove", e[e.PublishBoard = 7] = "PublishBoard", e[e.RoomNotFound = 8] = "RoomNotFound", e[e.SelectBoard = 9] = "SelectBoard", e[e.SelectRoom = 10] = "SelectRoom", e[e.UpdateArrows = 11] = "UpdateArrows", e[e.UpdateAudioSettings = 12] = "UpdateAudioSettings", e[e.UpdateEvaluationSettings = 13] = "UpdateEvaluationSettings", e[e.UpdateImages = 14] = "UpdateImages", e[e.UpdateLargeClassroom = 15] = "UpdateLargeClassroom", e[e.UpdateSquares = 16] = "UpdateSquares", e))(J || {}),
                        X = s(5174);
                    const ee = (0, X.I)();

                    function updateBoard(e, t, s) {
                        const a = getRoom(e);
                        if (!a) return;
                        const o = a.boards.find(t);
                        if (!o) return;
                        const n = o.draft && !s.draft,
                            r = o.arrows !== s.arrows,
                            i = o.squares !== s.squares,
                            l = o.images !== s.images,
                            c = s.pgn && o.pgn !== s.pgn,
                            d = s.move !== o.move || s.line !== o.line,
                            u = s.flipped !== o.flipped;
                        a.boards.update(s), n && ee.emit(J.PublishBoard, {
                            room: a,
                            board: o
                        }), u && ee.emit(J.FlipBoard, {
                            room: a,
                            board: o
                        }), c ? ee.emit(J.MakeMove, {
                            room: a,
                            board: o
                        }) : d ? ee.emit(J.ChangePosition, {
                            room: a,
                            board: o
                        }) : r ? ee.emit(J.UpdateArrows, {
                            room: a,
                            board: o
                        }) : l ? ee.emit(J.UpdateImages, {
                            room: a,
                            board: o
                        }) : i && ee.emit(J.UpdateSquares, {
                            room: a,
                            board: o
                        })
                    }

                    function isNull(e) {
                        return null === e
                    }

                    function isObject(e) {
                        return !isNull(e) && "object" == typeof e
                    }

                    function isString(e) {
                        return "string" == typeof e
                    }

                    function isFunction(e) {
                        return "function" == typeof e
                    }

                    function isNumber(e) {
                        return "number" == typeof e && !isNaN(e)
                    }

                    function isArray(e) {
                        return Array.isArray(e)
                    }

                    function isBoolean(e) {
                        return "boolean" == typeof e
                    }

                    function removeFromArray(e, t) {
                        const s = isFunction(t) ? e.findIndex(t) : e.indexOf(t); - 1 !== s && e.splice(s, 1)
                    }

                    function applyReceivedBoardUpdates(e, t) {
                        const s = getRoom(e);
                        if (!s) return;
                        const a = s.boards.find(t);
                        a && Q.receivedBoardUpdates[s.id] && (Q.receivedBoardUpdates[s.id].forEach((e => {
                            a.version >= e.version || updateBoard(s.id, a.id, e)
                        })), Q.receivedBoardUpdates[s.id].length = 0)
                    }
                    var te = s(4164),
                        se = s(6670);
                    const ae = {
                        notifications: []
                    };
                    var oe = (e => (e[e.Toaster = 0] = "Toaster", e[e.Alert = 1] = "Alert", e))(oe || {});
                    let ne = 100;

                    function delayedAction(e, t) {
                        setTimeout((() => {
                            e in window.toaster ? (ne = 0, window.toaster[e](t)) : (ne *= 2, delayedAction(e, t))
                        }), ne)
                    }
                    var re = window.toaster || {
                        add(e) {
                            delayedAction("add", e)
                        },
                        remove(e) {
                            delayedAction("remove", e)
                        }
                    };

                    function hideNotifications(e) {
                        ae.notifications.filter((t => !e || (!e.keys || e.keys.every((e => t.keys.includes(e)))) && (!e.type || e.type === t.type) && (!e.id || e.id === t.id))).forEach((e => {
                            e.type === oe.Toaster ? re.remove(e.id) : e.type === oe.Alert && (0, se.OD)(e.id), removeFromArray(ae.notifications, e)
                        }))
                    }
                    var ie = s(4752),
                        le = s.n(ie);

                    function showNotification(e) {
                        var t, s, a, o, n, r;
                        const i = {
                            type: null != (t = e.type) ? t : oe.Alert,
                            keys: null != (s = e.keys) ? s : [],
                            id: le()()
                        };
                        e.unique && hideNotifications({
                            type: e.type,
                            keys: e.keys
                        }), e.duration && setTimeout(hideNotifications, e.duration, {
                            id: i.id
                        }), i.type === oe.Toaster ? null == (n = re) || n.add({
                            id: i.id,
                            duration: e.duration,
                            content: null != (a = e.content) ? a : "",
                            theme: null != (o = e.theme) ? o : "info",
                            icon: e.icon,
                            links: e.links,
                            avatarUrl: e.avatarUrl
                        }) : i.type === oe.Alert && (0, se.el)({
                            id: i.id,
                            type: e.theme || "info",
                            message: null != (r = e.content) ? r : ""
                        }), ae.notifications.push(i)
                    }
                    var ce = Object.defineProperty,
                        de = Object.getOwnPropertySymbols,
                        ue = Object.prototype.hasOwnProperty,
                        me = Object.prototype.propertyIsEnumerable,
                        show_alert_defNormalProp = (e, t, s) => t in e ? ce(e, t, {
                            enumerable: !0,
                            configurable: !0,
                            writable: !0,
                            value: s
                        }) : e[t] = s;

                    function showAlert(e) {
                        showNotification(((e, t) => {
                            for (var s in t || (t = {})) ue.call(t, s) && show_alert_defNormalProp(e, s, t[s]);
                            if (de)
                                for (var s of de(t)) me.call(t, s) && show_alert_defNormalProp(e, s, t[s]);
                            return e
                        })({
                            type: oe.Alert
                        }, e))
                    }

                    function showError(e) {
                        showAlert({
                            duration: 1e4,
                            theme: "error",
                            content: e
                        })
                    }

                    function showHttpError(e) {
                        showError((0, te.i)(e))
                    }

                    function removeAllPendingBoardUpdates(e) {
                        var t;
                        null == (t = Q.pendingUpdates[e]) || t.forEach((e => e.reject())), delete Q.pendingUpdates[e]
                    }
                    async function recoverBoard(e, t) {
                        Q.recoveringBoards.includes(t) || Q.recoveringBoards.push(t);
                        try {
                            await async function loadBoard(e, t) {
                                const s = getRoom(e);
                                if (!s) return;
                                let a;
                                try {
                                    const {
                                        data: s
                                    } = await z.fetch({
                                        service: j.Classroom,
                                        path: [D.Sessions, e, D.Boards, t]
                                    });
                                    a = s
                                } catch (o) {
                                    showHttpError(o)
                                }
                                if (a) {
                                    const e = s.boards.update(a);
                                    ee.emit(J.LoadBoard, {
                                        room: s,
                                        board: e
                                    })
                                }
                            }(e, t), applyReceivedBoardUpdates(e, t), removeAllPendingBoardUpdates(t)
                        } finally {
                            removeFromArray(Q.recoveringBoards, t)
                        }
                    }
                    var he = Object.defineProperty,
                        pe = Object.defineProperties,
                        be = Object.getOwnPropertyDescriptors,
                        ge = Object.getOwnPropertySymbols,
                        ve = Object.prototype.hasOwnProperty,
                        we = Object.prototype.propertyIsEnumerable,
                        publish_board_version_defNormalProp = (e, t, s) => t in e ? he(e, t, {
                            enumerable: !0,
                            configurable: !0,
                            writable: !0,
                            value: s
                        }) : e[t] = s,
                        publish_board_version_spreadValues = (e, t) => {
                            for (var s in t || (t = {})) ve.call(t, s) && publish_board_version_defNormalProp(e, s, t[s]);
                            if (ge)
                                for (var s of ge(t)) we.call(t, s) && publish_board_version_defNormalProp(e, s, t[s]);
                            return e
                        };
                    async function publishPendingUpdates(e, t) {
                        const s = function getNextPendingUpdate(e) {
                            var t;
                            const s = null == (t = Q.pendingUpdates[e.id]) ? void 0 : t[0];
                            if (s && !s.publishing) return s
                        }(t);
                        if (!s) return;
                        s.publishing = !0;
                        const {
                            update: a,
                            resolve: o,
                            reject: n
                        } = s;
                        let r;
                        try {
                            const {
                                data: s
                            } = await z.publish({
                                method: a.method,
                                service: j.Classroom,
                                path: [D.Sessions, e.id, D.Boards, t.id, ...a.path],
                                data: (i = publish_board_version_spreadValues({}, a.data), l = {
                                    version: t.version
                                }, pe(i, be(l)))
                            });
                            r = s
                        } catch (c) {
                            return await recoverBoard(e.id, t.id), void n()
                        }
                        var i, l;
                        ! function removePendingUpdate(e) {
                            Q.pendingUpdates[e.id] && Q.pendingUpdates[e.id].shift()
                        }(t), r ? (updateBoard(e.id, t.id, r), o()) : n(), Promise.resolve().then((() => publishPendingUpdates(e, t)))
                    }
                    async function publishBoardVersion(e) {
                        const t = getRoom(e.roomId);
                        if (!t) return;
                        const s = t.boards.find(e.boardId);
                        if (!s) return;
                        const a = new Promise(((o, n) => {
                            ! function addPendingUpdate(e, t) {
                                Q.pendingUpdates[e.id] || (Q.pendingUpdates[e.id] = []), Q.pendingUpdates[e.id].push(t)
                            }(s, {
                                publishing: !1,
                                update: e,
                                resolve: o,
                                reject: n,
                                promise: () => a
                            }), 1 === Q.pendingUpdates[s.id].length && publishPendingUpdates(t, s)
                        }));
                        return a
                    }
                    const fe = {
                        waitingEvents: [],
                        shouldIgnoreMarkingEvents: !1,
                        shouldIgnorePositionChangeEvents: !1,
                        isGamePreviewActive: !1
                    };
                    const ye = (0, s(4735).x)(),
                        _e = {
                            friends: [],
                            hasLoadedFriends: !1,
                            currentUser: ye ? new UserModel({
                                id: ye.uuid,
                                userId: ye.id,
                                membership: ye.membershipCode,
                                flairCode: ye.flairCode,
                                country: ye.country.code,
                                chessTitle: ye.chessTitle,
                                username: ye.username,
                                avatarUrl: ye.avatarUrl
                            }) : null,
                            userSearch: {
                                isSearchingUser: !1,
                                userSearchMessage: "",
                                userSearchResults: []
                            }
                        };

                    function getCurrentUser() {
                        return _e.currentUser
                    }

                    function getCurrentMember(e) {
                        const t = getRoom(e);
                        return t ? t.members.find(getCurrentUser().id) : null
                    }

                    function canLoadGames(e) {
                        var t, s;
                        return Boolean((null == (t = getCurrentMember(e)) ? void 0 : t.isOwner()) || (null == (s = getCurrentMember(e)) ? void 0 : s.canLoadGames()))
                    }

                    function getActiveRoom() {
                        return Q.activeRoomId ? Q.rooms.find(Q.activeRoomId) : null
                    }

                    function isAddingBoards(e) {
                        return Q.addingBoards.includes(e)
                    }

                    function getActiveBoard(e = getActiveRoom()) {
                        if (!e) return null;
                        const t = canLoadGames(e.id) && !isAddingBoards(e.id) ? e.getDraftBoard(getCurrentUser().id) : null;
                        return t || (Q.activeBoardId && e.boards.find(Q.activeBoardId) || e.getDefaultBoard())
                    }

                    function getMarkingsAPI() {
                        return getActiveChessboard().game.markings
                    }
                    const ke = {
                            squares: ["a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8", "e1", "e2", "e3", "e4", "e5", "e6", "e7", "e8", "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "g1", "g2", "g3", "g4", "g5", "g6", "g7", "g8", "h1", "h2", "h3", "h4", "h5", "h6", "h7", "h8"],
                            chars: ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "-", "+"]
                        },
                        Ce = {
                            keys: ["alt", "ctrl", "none", "shift"],
                            chars: ["a", "c", "n", "s"]
                        };

                    function getChessboardArrows() {
                        return getMarkingsAPI().getAllWhere({
                            types: ["arrow"],
                            node: !0
                        }).map((e => `${Ce.chars[Ce.keys.indexOf(e.data.keyPressed)]}${ke.chars[ke.squares.indexOf(e.data.from)]}${ke.chars[ke.squares.indexOf(e.data.to)]}`)).join("")
                    }
                    const Se = [n.QY.APIEvents.Mark, n.QY.APIEvents.Unmark],
                        xe = [n.QY.APIEvents.Move, n.QY.APIEvents.Reload, n.QY.APIEvents.NodeUpdated, n.QY.APIEvents.LineCommentUpdated],
                        $e = [n.QY.APIEvents.MoveBackward, n.QY.APIEvents.MoveForward, n.QY.APIEvents.MoveVariation, n.QY.APIEvents.PromoteVariation, n.QY.APIEvents.SelectLineEnd, n.QY.APIEvents.SelectLineStart, n.QY.APIEvents.SelectNode];

                    function getChessboardEventType(e) {
                        return $e.includes(e.type) ? o.Position : xe.includes(e.type) ? o.Move : Se.includes(e.type) ? o.Mark : null
                    }
                    var Pe = (e => (e.Effect = "e", e.Image = "i", e))(Pe || {});

                    function getChessboardImages() {
                        const e = getActiveChessboard();
                        if (!e.game.boardImages) return "";
                        return e.game.boardImages.getMarkings().map((t => {
                            let s, a = "";
                            if (isString(t.model)) a = t.model, s = Pe.Effect;
                            else if (t.model.name) a = t.model.name, s = Pe.Image;
                            else {
                                const o = t.model;
                                a = e.game.boardImages.getAllMarkingShortcuts().find((e => e.frameId === o.frameId && e.xIndex === o.xIndex && e.yIndex === o.yIndex)).name, s = Pe.Image
                            }
                            return `${s}:${a}:${t.square}`
                        })).join(";")
                    }

                    function getChessboardPosition() {
                        const e = getActiveChessboard().game.getSelectedNode();
                        return {
                            line: e ? e.ids.line : 0,
                            move: e ? e.ids.move + 1 : 0
                        }
                    }
                    var Ee = Object.defineProperty,
                        Oe = Object.getOwnPropertySymbols,
                        Ae = Object.prototype.hasOwnProperty,
                        Te = Object.prototype.propertyIsEnumerable,
                        get_chessboard_move_defNormalProp = (e, t, s) => t in e ? Ee(e, t, {
                            enumerable: !0,
                            configurable: !0,
                            writable: !0,
                            value: s
                        }) : e[t] = s;

                    function getChessboardMove() {
                        return ((e, t) => {
                            for (var s in t || (t = {})) Ae.call(t, s) && get_chessboard_move_defNormalProp(e, s, t[s]);
                            if (Oe)
                                for (var s of Oe(t)) Te.call(t, s) && get_chessboard_move_defNormalProp(e, s, t[s]);
                            return e
                        })({
                            pgn: getActiveChessboard().game.getPGN()
                        }, getChessboardPosition())
                    }

                    function getChessboardSquares() {
                        return getMarkingsAPI().getAllWhere({
                            types: ["highlight"],
                            node: !0
                        }).map((e => {
                            var t;
                            return `${Ce.chars[Ce.keys.indexOf(null!=(t=e.data.keyPressed)?t:"none")]}${ke.chars[ke.squares.indexOf(e.data.square)]}`
                        })).join("")
                    }

                    function hasPendingBoardUpdate(e) {
                        var t;
                        return Boolean(null == (t = Q.pendingUpdates[e]) ? void 0 : t.length)
                    }
                    var Me = (e => (e.Boards = "boards", e.Members = "members", e))(Me || {}),
                        Re = (e => (e.None = "None", e.SetupPosition = "SetupPosition", e.LoadFen = "LoadFen", e.LoadPgn = "LoadPgn", e.LoadFromLibrary = "LoadFromLibrary", e.LoadFromArchive = "LoadFromArchive", e.LoadFromExplorer = "LoadFromExplorer", e.ImportStudy = "ImportStudy", e))(Re || {});
                    const Ie = {
                        isBoardsListVisible: !1,
                        isChatVisible: !0,
                        isAutoCollapsedChatVisible: !1,
                        isConfirmCloseRoomModalVisible: !1,
                        selectedRoomTab: Me.Boards,
                        selectedSetupBoardTab: Re.None,
                        sidebarWidth: 0,
                        toggleChatMessages: 0
                    };

                    function getSelectedSetupBoardTab() {
                        return Ie.selectedSetupBoardTab
                    }

                    function isLoadFromExplorerVisible() {
                        return getSelectedSetupBoardTab() === Re.LoadFromExplorer
                    }

                    function isWaitingChessboardEvent(e, t) {
                        return fe.waitingEvents.some((s => s.id === e && t === s.type))
                    }
                    var je = (e => (e.Other = "other", e.Own = "own", e.Master = "master", e))(je || {});
                    const Be = {
                        source: je.Master,
                        username: ""
                    };
                    class MasterGameModel extends a.Hn {
                        constructor() {
                            super(...arguments), this.id = 0, this.year = 0, this.result = "*", this.pgn = "", this.whitePlayer = new PlayerModel(q.White), this.blackPlayer = new PlayerModel(q.Black)
                        }
                        getResultLabel() {
                            return "1/2-1/2" === this.result ? "½-½" : this.result
                        }
                    }
                    var Le = Object.defineProperty,
                        De = Object.getOwnPropertySymbols,
                        Ue = Object.prototype.hasOwnProperty,
                        ze = Object.prototype.propertyIsEnumerable,
                        state_defNormalProp = (e, t, s) => t in e ? Le(e, t, {
                            enumerable: !0,
                            configurable: !0,
                            writable: !0,
                            value: s
                        }) : e[t] = s;
                    const qe = {
                        opening: {
                            name: "",
                            score: 0
                        },
                        suggestedMoves: [],
                        selectedMove: null,
                        search: ((e, t) => {
                            for (var s in t || (t = {})) Ue.call(t, s) && state_defNormalProp(e, s, t[s]);
                            if (De)
                                for (var s of De(t)) ze.call(t, s) && state_defNormalProp(e, s, t[s]);
                            return e
                        })({}, Be),
                        playerSearch: {
                            isSearchingUser: !1,
                            userSearchMessage: "",
                            userSearchResults: []
                        },
                        masterGames: (0, a.BL)(MasterGameModel, {
                            key: "id"
                        }),
                        selectedMasterGames: (0, a.BL)(MasterGameModel, {
                            key: "id"
                        }),
                        masterGamesTotalPages: 0,
                        masterGamesCurrentPage: 1,
                        masterGamesCurrentSort: null,
                        isLoadingMasterGames: !1
                    };
                    var Ve = s(3527),
                        Ne = s.n(Ve);
                    var Ze = Object.defineProperty,
                        Fe = Object.defineProperties,
                        Ge = Object.getOwnPropertyDescriptors,
                        We = Object.getOwnPropertySymbols,
                        He = Object.prototype.hasOwnProperty,
                        Ye = Object.prototype.propertyIsEnumerable,
                        fetch_explorer_data_defNormalProp = (e, t, s) => t in e ? Ze(e, t, {
                            enumerable: !0,
                            configurable: !0,
                            writable: !0,
                            value: s
                        }) : e[t] = s,
                        fetch_explorer_data_spreadValues = (e, t) => {
                            for (var s in t || (t = {})) He.call(t, s) && fetch_explorer_data_defNormalProp(e, s, t[s]);
                            if (We)
                                for (var s of We(t)) Ye.call(t, s) && fetch_explorer_data_defNormalProp(e, s, t[s]);
                            return e
                        },
                        fetch_explorer_data_spreadProps = (e, t) => Fe(e, Ge(t));

                    function getMoveStats(e) {
                        return {
                            whiteWon: e.whiteWon / e.totalGames * 100,
                            blackWon: e.blackWon / e.totalGames * 100,
                            draw: e.draw / e.totalGames * 100,
                            totalGames: e.totalGames
                        }
                    }

                    function fetchData(e, t, s, a) {
                        const o = {
                            gameSource: e.source,
                            gameType: e.source === je.Master ? void 0 : "all",
                            playername: e.source === je.Master ? e.username : void 0,
                            username: e.source === je.Other ? e.username : void 0
                        };
                        return -1 === a ? async function fetchExplorerSuggestedMoves(e) {
                            const {
                                data: t
                            } = await r.Z.post(i.Z.generate("explorer_callback_get_suggested_moves"), e);
                            return t
                        }(fetch_explorer_data_spreadProps(fetch_explorer_data_spreadValues({}, o), {
                            color: "white",
                            ply: 0,
                            moveList: []
                        })): async function fetchExplorerMove(e) {
                            const {
                                data: t
                            } = await r.Z.post(i.Z.generate("explorer_callback_move"), e);
                            return t
                        }(fetch_explorer_data_spreadProps(fetch_explorer_data_spreadValues({}, o), {
                            color: 1 === t[a].color ? "white" : "black",
                            ply: a,
                            nextFen: t[a].fen,
                            tcnMove: s[a],
                            sanMove: t[a].san,
                            moveList: t.map(((e, t) => ({
                                activeColor: (0, n.dR)(e.color),
                                encodedMove: s[t],
                                nextFen: e.fen,
                                sanMove: e.san
                            })))
                        }))
                    }
                    async function fetchExplorerData(e, t) {
                        var s, a, o, n, r;
                        const i = e.game.getSelectedNode(),
                            l = i ? i.moveNumber : -1,
                            c = e.game.getCurrentFullLine().slice(0, l + 1),
                            d = null != (s = Ne().encodeTCN(c).match(/.{1,2}/g)) ? s : [],
                            u = {
                                ply: l + 1,
                                san: null != (o = null == (a = c[l]) ? void 0 : a.san) ? o : "",
                                tcn: d.join(""),
                                fen: null != (r = null == (n = c[l]) ? void 0 : n.fen) ? r : "",
                                stats: {
                                    whiteWon: 0,
                                    blackWon: 0,
                                    draw: 0,
                                    totalGames: 0
                                }
                            },
                            m = await async function fetchOpeningData(e = "") {
                                return new Promise(((t, s) => {
                                    Ne().loadECO(window.Config.pathToBook, ((a, o) => {
                                        !a && o || s(a);
                                        const n = o({
                                            tcn: e
                                        });
                                        n ? t(n) : s()
                                    }))
                                }))
                            }(u.tcn);
                        if (!m) return {
                            opening: {
                                name: "",
                                score: 0
                            },
                            selectedMove: u,
                            suggestedMoves: []
                        };
                        const h = await fetchData(t, c, d, l);
                        if (l >= 0) {
                            const e = await fetchData(t, c, d, l - 1);
                            if (e) {
                                const t = e.suggestedMoves.find((e => e.encodedMove === d[l]));
                                t && (u.stats = getMoveStats(t))
                            }
                        }
                        return h ? {
                            opening: m,
                            selectedMove: u,
                            suggestedMoves: h.suggestedMoves.map((e => ({
                                ply: l + 2,
                                san: e.sanMove,
                                fen: e.nextFen,
                                tcn: `${u.tcn}${e.encodedMove}`,
                                stats: getMoveStats(e)
                            })))
                        } : {
                            opening: m,
                            selectedMove: u,
                            suggestedMoves: []
                        }
                    }

                    function getTimeControlIcon(e, t = "chess") {
                        return "chess960" === t ? "live" === e.timeType ? "live960" : "chess960" : "chess" !== t ? t : function getTimeControlType(e) {
                            if ("daily" === e.timeType) return "daily";
                            const {
                                baseTime: t,
                                timeIncrement: s
                            } = e, a = Number(t) + 40 * (s ? 1 * s : 0);
                            return a < 180 ? "bullet" : a >= 600 ? "rapid" : "blitz"
                        }(e)
                    }

                    function getTimeControlLabel(e) {
                        const {
                            baseTime: t,
                            timeIncrement: s,
                            timeType: a
                        } = e;
                        if ("none" === a) return "--";
                        if ("daily" === a) return (0, V.jn)("{1} 1 day|]1,Inf] %1$s% days", t, {
                            "%1$s%": t
                        }).trim();
                        if (s && t < 60) return `${t.toFixed(0)}s | ${s.toFixed(0)}`;
                        const o = t % 60;
                        return s && t ? o > 0 ? `${Math.floor(t/60)}:${String(o).padStart(2,"0")} | ${s.toFixed(0)}` : `${(t/60).toFixed(0)} | ${s.toFixed(0)}` : t < 60 ? (0, V.jn)("{1} 1 sec|]1,Inf] %1$s% sec", Number(t.toFixed(0)), {
                            "%1$s%": t.toFixed(0)
                        }).trim() : o > 0 ? `${Math.floor(t/60)}:${String(o).padStart(2,"0")}` : (0, V.jn)("{1} 1 min|]1,Inf] %1$s% min", Number((t / 60).toFixed(0)), {
                            "%1$s%": (t / 60).toFixed(0)
                        }).trim()
                    }
                    class GameArchiveModel extends a.Hn {
                        constructor() {
                            super(...arguments), this.baseTime1 = 0, this.daysPerTurn = 0, this.gameType = {
                                code: ""
                            }, this.id = 0, this.live = !1, this.timeIncrement = 0, this.user1 = {
                                username: ""
                            }, this.user1Rating = 0, this.user1Result = 0, this.user2 = {
                                username: ""
                            }, this.user2Rating = 0, this.user2Result = 0, this.vsComputer = !1
                        }
                        getTimeControl() {
                            return this.live || this.vsComputer ? {
                                baseTime: this.baseTime1 / 10,
                                timeIncrement: this.timeIncrement,
                                timeType: this.baseTime1 > 0 ? "live" : "none"
                            } : {
                                baseTime: this.daysPerTurn,
                                timeIncrement: this.timeIncrement,
                                timeType: "daily"
                            }
                        }
                        getTimeControlIcon() {
                            return this.vsComputer ? "vs-bot" : getTimeControlIcon(this.getTimeControl(), this.getGameType())
                        }
                        getTimeControlLabel() {
                            return getTimeControlLabel(this.getTimeControl())
                        }
                        getGameType() {
                            return this.gameType.code
                        }
                        getResultLabel() {
                            return 1 === this.user1Result ? "1-0" : 1 === this.user2Result ? "0-1" : "½-½"
                        }
                        hasWon(e) {
                            return e === this.user1.username && 1 === this.user1Result || e === this.user2.username && 1 === this.user2Result
                        }
                        hasLost(e) {
                            return e === this.user1.username && 1 === this.user2Result || e === this.user2.username && 1 === this.user1Result
                        }
                    }
                    const Ke = {
                        currentPage: 1,
                        games: (0, a.BL)(GameArchiveModel, {
                            key: "id"
                        }),
                        isLoading: !1,
                        totalPages: 0,
                        username: "",
                        searchParams: {},
                        selectedGames: []
                    };
                    var Qe = Object.defineProperty,
                        Je = Object.defineProperties,
                        Xe = Object.getOwnPropertyDescriptors,
                        et = Object.getOwnPropertySymbols,
                        tt = Object.prototype.hasOwnProperty,
                        st = Object.prototype.propertyIsEnumerable,
                        load_game_archive_defNormalProp = (e, t, s) => t in e ? Qe(e, t, {
                            enumerable: !0,
                            configurable: !0,
                            writable: !0,
                            value: s
                        }) : e[t] = s;
                    async function loadGameArchive(e = null) {
                        Ke.isLoading = !0, e || (Ke.currentPage = 1, Ke.totalPages = 0);
                        const {
                            data: t
                        } = await r.Z.get(i.Z.generate("web_game_archive_callback", (s = ((e, t) => {
                            for (var s in t || (t = {})) tt.call(t, s) && load_game_archive_defNormalProp(e, s, t[s]);
                            if (et)
                                for (var s of et(t)) st.call(t, s) && load_game_archive_defNormalProp(e, s, t[s]);
                            return e
                        })({}, Ke.searchParams), a = {
                            page: e || 1,
                            username: Ke.username || getCurrentUser().username
                        }, Je(s, Xe(a)))));
                        var s, a;
                        Ke.games.reset(t.data), Ke.currentPage = t.meta.currentPage, Ke.totalPages = t.meta.totalPages, Ke.isLoading = !1
                    }

                    function clearGameArchive() {
                        Ke.isLoading = !1, Ke.currentPage = 1, Ke.totalPages = 0, Ke.games.reset()
                    }

                    function getSelectedMove() {
                        return qe.selectedMove
                    }
                    async function loadMasterGames(e) {
                        var t, s, o;
                        qe.isLoadingMasterGames = !0;
                        const n = (null == (t = getSelectedMove()) ? void 0 : t.fen) || (0, O.H)(),
                            l = null != (s = null == e ? void 0 : e.page) ? s : 1,
                            c = (null == e ? void 0 : e.sort) === qe.masterGamesCurrentSort ? "DESC" : "ASC",
                            d = null != (o = null == e ? void 0 : e.sort) ? o : qe.masterGamesCurrentSort,
                            u = await async function fetchMasterGames(e) {
                                const {
                                    data: t
                                } = await r.Z.get(i.Z.generate("web_master_games_callback_search"), {
                                    params: e
                                });
                                return t
                            }({
                                playerName: qe.search.username,
                                fen: n,
                                page: l,
                                order: d ? c : void 0,
                                orderBy: null != d ? d : void 0
                            });
                        qe.masterGames.reset(), qe.masterGamesTotalPages = Math.ceil(u.games_total_count / 20), qe.masterGamesCurrentPage = l, qe.masterGamesCurrentSort = (null == e ? void 0 : e.sort) === qe.masterGamesCurrentSort ? null : d, u.games.forEach((e => {
                            const t = qe.masterGames.add({
                                id: e.id,
                                year: e.entity.year,
                                result: e.entity.result,
                                pgn: e.entity.moves
                            });
                            (0, a.Uc)(t.whitePlayer, {
                                name: e.entity.white,
                                rating: e.entity.whiteElo
                            }), (0, a.Uc)(t.blackPlayer, {
                                name: e.entity.black,
                                rating: e.entity.blackElo
                            })
                        })), qe.isLoadingMasterGames = !1
                    }
                    async function loadExplorerGames() {
                        var e;
                        qe.search.source === je.Master ? (clearGameArchive(), loadMasterGames()) : (! function clearMasterGames() {
                            qe.masterGames.reset(), qe.selectedMasterGames.reset()
                        }(), (null == (e = qe.selectedMove) ? void 0 : e.fen) && function setArchiveSearchFen(e) {
                            Ke.searchParams.fen = e
                        }(qe.selectedMove.fen), loadGameArchive())
                    }
                    async function loadExplorerPosition(e) {
                        const {
                            opening: t,
                            selectedMove: s,
                            suggestedMoves: a
                        } = await fetchExplorerData(e, qe.search);
                        qe.suggestedMoves = a, qe.selectedMove = s, qe.opening = t, loadExplorerGames()
                    }
                    async function makeMove(e, t, s) {
                        await publishBoardVersion({
                            roomId: e,
                            boardId: t,
                            path: [D.Moves],
                            data: s,
                            method: "put"
                        })
                    }

                    function isRoomOwner(e) {
                        var t;
                        return Boolean(null == (t = getCurrentMember(e)) ? void 0 : t.isOwner())
                    }
                    async function selectBoard(e, t) {
                        const s = getRoom(e);
                        s && (t && (isRoomOwner(e) && t !== Q.activeBoardId && await async function setCurrentBoard(e, t) {
                            await z.publish({
                                method: "put",
                                service: j.Classroom,
                                path: [D.Sessions, e, D.Boards, t, D.Current]
                            })
                        }(e, t), Q.activeRoomId = e, Q.activeBoardId = t, s.currentBoardId = t), ee.emit(J.SelectBoard))
                    }
                    async function publishDraft(e, t) {
                        await publishBoardVersion({
                            roomId: e,
                            boardId: t,
                            path: [D.Publish],
                            data: {}
                        }), isAddingBoards(e) || (isRoomOwner(e) ? await selectBoard(e, t) : canLoadGames(e) && await selectBoard(e))
                    }

                    function isCurrentUser(e) {
                        var t;
                        const s = "string" == typeof e ? e : e.id;
                        return (null == (t = _e.currentUser) ? void 0 : t.id) === s
                    }

                    function canRemoveBoard(e, t) {
                        var s;
                        if (!canLoadGames(e)) return !1;
                        const a = null == (s = getRoom(e)) ? void 0 : s.boards.find(t);
                        return Boolean(a && (a.draft && isCurrentUser(a.userId) || isRoomOwner(e)))
                    }

                    function isSetupPositionVisible() {
                        return getSelectedSetupBoardTab() === Re.SetupPosition
                    }
                    async function updateMarkings(e, t, s) {
                        const a = getRoom(e);
                        if (!a) return;
                        const o = a.boards.find(t);
                        o && (o.squares !== s.squares && await async function updateSquares(e, t, s) {
                            await publishBoardVersion({
                                roomId: e,
                                boardId: t,
                                path: [D.Squares],
                                data: {
                                    set: s
                                },
                                method: "put"
                            })
                        }(e, t, s.squares), o.images !== s.images && await async function updateImages(e, t, s) {
                            await publishBoardVersion({
                                roomId: e,
                                boardId: t,
                                path: [D.Images],
                                data: {
                                    set: s
                                },
                                method: "put"
                            })
                        }(e, t, s.images), o.arrows !== s.arrows && await async function updateArrows(e, t, s) {
                            await publishBoardVersion({
                                roomId: e,
                                boardId: t,
                                path: [D.Arrows],
                                data: {
                                    set: s
                                },
                                method: "put"
                            })
                        }(e, t, s.arrows))
                    }
                    async function waitPendingBoardUpdates(e) {
                        var t;
                        if (null == (t = Q.pendingUpdates[e]) ? void 0 : t.length) return Q.pendingUpdates[e][Q.pendingUpdates[e].length - 1].promise()
                    }

                    function removeWaitingEvent(e, t) {
                        removeFromArray(fe.waitingEvents, (s => s.id === e && s.type === t))
                    }
                    const at = w((() => loadExplorerPosition(getActiveChessboard())), 50);
                    async function handleChessboardEvent(e) {
                        if (! function shouldHandleChessboardEvent(e) {
                                var t;
                                const s = getChessboardEventType(e);
                                if (!s || fe.isGamePreviewActive) return !1;
                                const a = getActiveRoom(),
                                    r = getActiveBoard();
                                if (!a || !r) return !1;
                                if (s === o.Mark && fe.shouldIgnoreMarkingEvents) return !1;
                                if (s === o.Position && fe.shouldIgnorePositionChangeEvents) return !1;
                                if (s === o.Position && r.draft && !isLoadFromExplorerVisible()) return !1;
                                if (null == (t = document.activeElement) ? void 0 : t.classList.contains("editable-comment")) return !1;
                                if (canRemoveBoard(a.id, r.id)) return !0;
                                const i = getCurrentMember(a.id);
                                return !!i && (!!i.hasFullControl() || !!e.data.move && Boolean(e.data.move.userGenerated && (i.isPlayingWhite() && e.data.move.color === n.lA.ColorsAsNumbers.White || i.isPlayingBlack() && e.data.move.color === n.lA.ColorsAsNumbers.Black)))
                            }(e)) return;
                        const t = getActiveRoom(),
                            s = getActiveBoard(),
                            a = getChessboardEventType(e);
                        if (getActiveChessboard().game.getContext().game.reorderLines(), isLoadFromExplorerVisible()) return void at();
                        if (isWaitingChessboardEvent(s.id, a)) return;
                        if (hasPendingBoardUpdate(s.id)) {
                            ! function addWaitingEvent(e, t) {
                                fe.waitingEvents.push({
                                    id: e,
                                    type: t
                                })
                            }(s.id, a);
                            try {
                                await waitPendingBoardUpdates(s.id)
                            } catch (i) {
                                return void removeWaitingEvent(s.id, a)
                            }
                        }
                        const r = function shouldPublishDraft(e) {
                            const t = getChessboardEventType(e);
                            if (!t || t === o.Position) return !1;
                            const s = getActiveRoom(),
                                a = getActiveBoard();
                            return !!(s && a && a.draft) && !(!canLoadGames(s.id) || isSetupPositionVisible()) && (t === o.Move ? Boolean(e.data.move) : t === o.Mark && Boolean(getChessboardArrows() || getChessboardSquares() || getChessboardImages()))
                        }(e);
                        switch (a) {
                            case o.Move:
                                try {
                                    await makeMove(t.id, s.id, getChessboardMove())
                                } catch (i) {}
                                break;
                            case o.Mark:
                                try {
                                    await updateMarkings(t.id, s.id, {
                                        squares: getChessboardSquares(),
                                        images: getChessboardImages(),
                                        arrows: getChessboardArrows()
                                    })
                                } catch (i) {}
                                break;
                            case o.Position:
                                try {
                                    await async function changePosition(e, t, s) {
                                        const a = getRoom(e);
                                        if (!a) return;
                                        const o = a.boards.find(t);
                                        o && (s.move === o.move && s.line === o.line || await publishBoardVersion({
                                            roomId: e,
                                            boardId: t,
                                            path: [D.Position],
                                            data: s,
                                            method: "put"
                                        }))
                                    }(t.id, s.id, getChessboardPosition())
                                } catch (i) {}
                        }
                        if (r) try {
                            await publishDraft(t.id, s.id)
                        } catch (i) {}
                        removeWaitingEvent(s.id, a)
                    }

                    function handleChessboardOptionsUpdate() {
                        const e = getActiveRoom(),
                            t = getActiveBoard();
                        if (!e || !t) return;
                        const {
                            flipped: s
                        } = getActiveChessboard().game.getOptions();
                        isRoomOwner(e.id) && s !== t.flipped && async function updateFlipped(e, t, s) {
                            await publishBoardVersion({
                                roomId: e,
                                boardId: t,
                                path: [D.Flipped],
                                data: {
                                    flipped: s
                                },
                                method: "put"
                            })
                        }(e.id, t.id, s)
                    }
                    const ot = {
                        debounce: 250,
                        events: n.jd,
                        getValue: e => e.game.isAtEndOfLine()
                    };

                    function getChessboards() {
                        return Object.values(b.chessboards)
                    }

                    function removeChessboardActivePlugins(e) {
                        e.game.plugins.remove(n.th.Sounds.Plugin.Name), e.game.plugins.remove(n.th.ArrowKeys.Plugin.Name)
                    }
                    const nt = [n.$l.CoordinatesPositions.Off, n.$l.CoordinatesPositions.Inside, n.$l.CoordinatesPositions.Outside];

                    function getBoardOptions() {
                        return b.boardOptions
                    }
                    var rt;

                    function toggleClass(e, t, s) {
                        const a = e.classList,
                            o = a.contains(t),
                            n = isBoolean(s) ? s : !o;
                        n !== o && (n ? a.add(t) : a.remove(t))
                    }

                    function toggleBodyClass(e, t) {
                        toggleClass(document.body, e, t)
                    }

                    function onResize() {
                        var e;
                        null == (e = getActiveChessboard()) || e.game.resize()
                    }

                    function updateChessboardLayout() {
                        window.removeEventListener("resize", onResize);
                        const e = getActiveChessboard(),
                            t = e ? null : document.getElementById("board"),
                            {
                                animationType: s,
                                coordinates: a,
                                pieceStyle: o,
                                boardStyle: r
                            } = function getOptions(e, t) {
                                var s;
                                if (e) return e.game.getOptions();
                                if (t) {
                                    const e = t.getAttribute("data-board-style"),
                                        a = t.getAttribute("data-piece-style"),
                                        o = Number(null != (s = t.getAttribute("data-coordinates")) ? s : 0);
                                    return {
                                        boardStyle: e,
                                        pieceStyle: a,
                                        coordinates: nt[o],
                                        animationType: "default"
                                    }
                                }
                                return getBoardOptions()
                            }(e, t),
                            i = "outside" === a,
                            l = "default" !== s && "none" !== s,
                            c = "real3d" === o,
                            d = o.startsWith("3d");
                        ! function toggleReal3d(e) {
                            toggleBodyClass(rt.BodyClass.Real3d, e)
                        }(c),
                        function togglePseudo3d(e) {
                            toggleBodyClass(rt.BodyClass.Pseudo3d, e)
                        }(d),
                        function toggleOutsideCoords(e) {
                            toggleBodyClass(rt.BodyClass.OutsideCoords, e)
                        }(i), e ? e.game.resize() : t && (! function styleOutsideCoords(e, t) {
                            if (e === n.$l.CoordinatesPositions.Inside) {
                                const e = document.getElementById("outside-coords-style");
                                if (e && n.NE[t]) {
                                    const [s, a] = n.NE[t];
                                    e.innerHTML = `.coordinate-light { fill: ${s}; } .coordinate-dark { fill: ${a}; }`
                                }
                            }
                        }(a, r), t.style.visibility = ""), (l || c) && window.addEventListener("resize", onResize)
                    }

                    function createSingleChessboard() {
                        createChessboard({
                            id: "classroom",
                            options: {
                                overlayInAnalysisMode: !1
                            },
                            mode: P,
                            state: {
                                isAtEndOfLine: ot
                            }
                        });
                        const e = getActiveChessboard();
                        e.game.load({
                                fen: (0, O.H)()
                            }), e.game.onAll(handleChessboardEvent), e.game.on(n.QY.OptionsEvents.Update, handleChessboardOptionsUpdate),
                            function replaceActiveChessboard() {
                                var e;
                                getChessboards().forEach(removeChessboardActivePlugins);
                                const t = getActiveChessboard();
                                b.soundPlugin && t.game.plugins.add(b.soundPlugin), b.arrowKeysPlugin && t.game.plugins.add(b.arrowKeysPlugin), null == (e = document.querySelector(".board-layout-chessboard .board")) || e.replaceWith(t), updateChessboardLayout()
                            }()
                    }

                    function flipBoard() {
                        const e = getActiveChessboard(),
                            t = !e.game.getOptions().flipped;
                        e.game.setOptions({
                            flipped: t
                        })
                    }

                    function isActiveBoard(e, t) {
                        if (!e || !t) return !1;
                        const s = getActiveRoom(),
                            a = getActiveBoard();
                        return (null == s ? void 0 : s.id) === e.id && (null == a ? void 0 : a.id) === t.id
                    }

                    function isDraftingBoard() {
                        const e = getActiveRoom(),
                            t = getActiveBoard();
                        return Boolean(e && t && t.draft && e.hasNonDraftBoards() && isCurrentUser(t.userId) && canLoadGames(e.id))
                    }

                    function isEvaluationBarVisible() {
                        const e = getActiveRoom();
                        return !!e && (!(e.coachOnly && !isRoomOwner(e.id)) && e.showEvaluationBar)
                    }

                    function isEvaluationLinesVisible() {
                        const e = getActiveRoom();
                        return !!e && (!(e.coachOnly && !isRoomOwner(e.id)) && e.showEvaluationLines)
                    }

                    function loadChessboardArrows(e) {
                        if (e.arrows !== getChessboardArrows()) {
                            if (fe.shouldIgnoreMarkingEvents = !0, e.arrows)
                                for (let t = 0; t < e.arrows.length; t += 3) {
                                    const s = e.arrows[t],
                                        a = e.arrows[t + 1],
                                        o = e.arrows[t + 2],
                                        n = Ce.keys[Ce.chars.indexOf(s)],
                                        r = ke.squares[ke.chars.indexOf(a)],
                                        i = ke.squares[ke.chars.indexOf(o)];
                                    getMarkingsAPI().addOne({
                                        data: {
                                            keyPressed: n,
                                            from: r,
                                            to: i
                                        },
                                        type: "arrow",
                                        node: !0
                                    })
                                } else getMarkingsAPI().removeAllWhere({
                                    types: ["arrow"],
                                    node: !0
                                });
                            fe.shouldIgnoreMarkingEvents = !1
                        }
                    }

                    function loadChessboardImages(e) {
                        if (e.images === getChessboardImages()) return;
                        fe.shouldIgnoreMarkingEvents = !0;
                        const t = getActiveChessboard();
                        e.images ? e.images.split(";").forEach((e => {
                            const [s, a, o] = e.split(":");
                            s === Pe.Effect ? t.game.mark({
                                effect: {
                                    square: o,
                                    type: a
                                }
                            }) : t.game.boardImages.mark({
                                model: {
                                    name: a
                                },
                                square: o
                            })
                        })) : t.game.boardImages.clearMarkings(), fe.shouldIgnoreMarkingEvents = !1
                    }(e => {
                        let t;
                        var s;
                        (s = t = e.BodyClass || (e.BodyClass = {})).Ad = "with-und", s.Analysis = "with-analysis", s.AnalysisCollapsed = "with-analysis-collapsed", s.Comments = "with-comments", s.DoubleBoard = "double-board", s.Evaluation = "with-evaluation", s.Pseudo3d = "pseudo-3d", s.FocusMode = "focus-mode", s.HandPieces = "with-pieces", s.HideBoardIcons = "hide-board-icons", s.MobileBoardHidden = "mobile-board-hidden", s.OutsideCoords = "outside-coords", s.Players = "with-players", s.Real3d = "real-3d", s.Tabs = "with-tabs", s.TheatreMode = "theatre-mode", s.Videos = "with-videos"
                    })(rt || (rt = {}));
                    const it = n.Wc.create(),
                        lt = n.o9.create();

                    function loadChessboardMode(e, t) {
                        const s = getActiveChessboard(),
                            a = getCurrentMember(e.id);
                        let o = t.flipped;
                        isSetupPositionVisible() ? s.game.setMode(n.nT.create({
                            canDropPiecesContinuously: !0
                        })) : a.hasFullControl() || canRemoveBoard(e.id, t.id) ? s.game.setMode(it) : a.isPlayingWhite() ? (s.game.setMode(lt), s.game.setPlayingAs(n.lA.ColorsAsNumbers.White), o = !1) : a.isPlayingBlack() ? (s.game.setMode(lt), s.game.setPlayingAs(n.lA.ColorsAsNumbers.Black), o = !0) : s.game.setMode(P), s.game.setOptions({
                            moveListContextMenuEnabled: isSetupPositionVisible() || a.hasFullControl() || canRemoveBoard(e.id, t.id),
                            flipped: o
                        })
                    }

                    function loadChessboardSquares(e) {
                        if (e.squares !== getChessboardSquares()) {
                            if (fe.shouldIgnoreMarkingEvents = !0, e.squares)
                                for (let t = 0; t < e.squares.length; t += 2) {
                                    const s = e.squares[t],
                                        a = e.squares[t + 1],
                                        o = Ce.keys[Ce.chars.indexOf(s)],
                                        n = ke.squares[ke.chars.indexOf(a)];
                                    getMarkingsAPI().addOne({
                                        data: {
                                            keyPressed: o,
                                            square: n
                                        },
                                        type: "highlight",
                                        node: !0
                                    })
                                } else getMarkingsAPI().removeAllWhere({
                                    types: ["highlight"],
                                    node: !0
                                });
                            fe.shouldIgnoreMarkingEvents = !1
                        }
                    }

                    function loadChessboardPosition(e) {
                        const t = getChessboardPosition();
                        if (t.move === e.move && t.line === e.line) return;
                        fe.shouldIgnoreMarkingEvents = !0;
                        const s = getActiveChessboard();
                        0 === e.move ? s.game.selectLineStart() : s.game.selectNode(e.line, e.move - 1), fe.shouldIgnoreMarkingEvents = !1, loadChessboardArrows(e), loadChessboardSquares(e), loadChessboardImages(e)
                    }

                    function selectSetupBoardTab(e) {
                        Ie.selectedSetupBoardTab = Ie.selectedSetupBoardTab === e ? Re.None : e
                    }

                    function loadChessboard(e, t) {
                        loadChessboardMode(e, t);
                        getActiveChessboard().game.load({
                            pgn: t.pgn,
                            fen: (0, O.H)()
                        }), loadChessboardPosition(t), loadChessboardArrows(t), loadChessboardSquares(t), loadChessboardImages(t), t.draft && t.pgn && selectSetupBoardTab(Re.SetupPosition)
                    }
                    var ct = s(6833),
                        dt = s(6989),
                        ut = s(5036);
                    let mt = null,
                        ht = null;

                    function clearQueue() {
                        return new Promise(((e, t) => {
                            const s = function getEngine() {
                                const e = (0, ut.Gw)();
                                return mt && ht !== e.engineName && (mt.quit(), mt = null), mt || (ht = e.engineName, mt = Ne()((0, dt.YE)(e.engineName).paths)), mt
                            }();
                            s ? s.stopFast((s => {
                                mt !== s && (null == mt || mt.quit(), mt = null), mt = s, mt ? e(mt) : t()
                            }), (0, ut.OL)()) : t()
                        }))
                    }

                    function stopEngine() {
                        mt && (mt.stopAll(), mt.quit(), mt = null, ht = null)
                    }
                    var pt = s(2203),
                        bt = s(2643);
                    let gt = 0;
                    const vt = (0, bt.y0)();

                    function onEvaluationResponse() {
                        vt.isLocked || (vt.isRunning = !1, pt.H.emit("evaluation.update"))
                    }

                    function evaluate(e) {
                        const {
                            fen: t,
                            moves: s,
                            gameType: a
                        } = e;
                        if (vt.fen = t, vt.isLocked) return;
                        gt += 1;
                        const o = gt;
                        vt.isLocked = !0, vt.isNewPosition = !0, clearQueue().then((e => {
                            vt.isLocked = !1;
                            const t = Ne().getPositionInfo(vt.fen, s, {
                                variant: "chess960" === a
                            });
                            if (!1 === t) return void(0, bt.VD)();
                            if ("object" == typeof t && t.stalemate) return void(0, bt.VD)();
                            const n = (0, ut.Gw)(),
                                r = {
                                    fen: vt.fen,
                                    moves: s,
                                    multiPv: n.linesCount,
                                    difficulty: 20,
                                    is960: "chess960" === a,
                                    normalize: !0
                                };
                            n.depth ? r.depth = n.depth : n.timeLimit > 0 ? r.movetime = 1e3 * n.timeLimit : r.infinite = !0, vt.isRunning = !0, e.getBestMove(r, onEvaluationResponse, (e => function onEvaluationStream(e, t) {
                                e === gt && (vt.isLocked || "info" === t.mtype && (t.pv && t.multipv && !t.upperbound && !t.lowerbound && t.depth >= (0, ut.mC)() || 0 === t.mateIn) && (vt.isNewPosition && (vt.isNewPosition = !1, (0, bt.VD)()), (0, bt.VD)(t), pt.H.emit("evaluation.update")))
                            }(o, e)))
                        }))
                    }
                    const wt = [n.QY.APIEvents.CreateGame, n.QY.APIEvents.DeletePosition, n.QY.APIEvents.Load, n.QY.APIEvents.Move, n.QY.APIEvents.MoveBackward, n.QY.APIEvents.MoveForward, n.QY.APIEvents.MoveVariation, n.QY.APIEvents.PromoteVariation, n.QY.APIEvents.SelectLineEnd, n.QY.APIEvents.SelectLineStart, n.QY.APIEvents.SelectNode, n.QY.APIEvents.ResetToMainLine];
                    let ft;
                    let yt = null,
                        _t = null,
                        kt = !0;

                    function getParams() {
                        const e = {
                            fen: yt.game.getFEN(),
                            moves: "",
                            gameType: yt.game.getVariant()
                        };
                        return _t && Object.assign(e, _t()), e
                    }

                    function handleWdl() {
                        var e;
                        const {
                            fen: t,
                            moves: s
                        } = getParams(), a = null == (e = null == yt ? void 0 : yt.game.eco) ? void 0 : e.get();
                        a && (null == a ? void 0 : a.f) !== n.iB.shortenFen(getParams().fen, 3) ? (0, bt.xq)({
                            wdlBar: void 0
                        }) : async function getWDLStatsFromFen({
                            fen: e,
                            moves: t
                        }) {
                            null == ft || ft.abort(), ft = new AbortController;
                            const s = await r.Z.post(i.Z.generate("web_eco_callback_stats_fen_search"), {
                                signal: ft.signal,
                                fen: Ne().shortenFen(e, 3),
                                encodedMoves: t
                            }).catch((() => {}));
                            (null == s ? void 0 : s.data.stats) ? ((0, bt.xq)({
                                wdlBar: {
                                    win: s.data.stats.whiteWon / 100,
                                    loss: s.data.stats.blackWon / 100,
                                    draw: s.data.stats.draw / 100
                                }
                            }), pt.H.emit("evaluation.update-wdl")) : (0, bt.xq)({
                                wdlBar: void 0
                            })
                        }({
                            fen: t,
                            moves: s
                        })
                    }
                    const Ct = w((() => {
                            var e;
                            yt && kt && ((0, bt.SZ)((null == (e = yt.game.getSelectedNode()) ? void 0 : e.moveNumber) + 1 || -1), evaluate(getParams()))
                        }), 0),
                        St = w((() => {
                            kt && Ct()
                        }), 0);

                    function handleUpdateSettings() {
                        St(), (0, ut.YQ)() && handleWdl()
                    }

                    function clearChessboard() {
                        var e, t;
                        null == (e = null == yt ? void 0 : yt.game) || e.offMany(wt.map((e => ({
                            type: e,
                            handler: St
                        })))), null == (t = null == yt ? void 0 : yt.game) || t.off({
                            type: n.th.ECO.Events.Update,
                            handler: handleWdl
                        }), yt = null, pt.H.off({
                            type: "evaluation.settings-update",
                            handler: handleUpdateSettings
                        }), stopEngine(), (0, bt.oA)()
                    }
                    Object.create, Object.defineProperty, Object.getOwnPropertyDescriptor, Object.getOwnPropertyNames, Object.getPrototypeOf, Object.prototype.hasOwnProperty;
                    async function startEvaluation() {
                        await (0, a.tL)((() => s.e(276).then(s.bind(s, 4276)))),
                        function watchChessboard({
                            chessboard: e,
                            callback: t,
                            useClientEngine: s = !0
                        }) {
                            e === yt && kt === s || (clearChessboard(), yt = e, _t = t || null, kt = s, e.game.onMany(wt, St), pt.H.on("evaluation.settings-update", handleUpdateSettings), stopEngine(), (0, bt.VD)(), St(), e.game.on(n.th.ECO.Events.Update, handleWdl), (0, ut.YQ)() && handleWdl())
                        }({
                            chessboard: ct.a.getActiveChessboard()
                        })
                    }
                    const xt = (0, a.eI)({
                            init() {
                                ee.on(J.FlipBoard, this.onFlipBoard), ee.on(J.PublishBoard, this.onPublishBoard), ee.on(J.AddBoard, this.onAddBoard), ee.on(J.LoadBoard, this.onLoadBoard), ee.on(J.SelectBoard, this.onSelectBoard), ee.on(J.BoardControl, this.onBoardControl), ee.on(J.MakeMove, this.onMakeMove), ee.on(J.ChangePosition, this.onChangePosition), ee.on(J.UpdateArrows, this.onUpdateArrows), ee.on(J.UpdateSquares, this.onUpdateSquares), ee.on(J.UpdateImages, this.onUpdateImages), ee.on(J.UpdateEvaluationSettings, this.onEvaluationSettingsUpdate), createSingleChessboard(),
                                    function createShareModalChessboard() {
                                        createChessboard({
                                            id: E,
                                            mode: P
                                        })
                                    }()
                            },
                            onFlipBoard({
                                board: e
                            }) {
                                getActiveChessboard().game.setOptions({
                                    flipped: e.flipped
                                })
                            },
                            onClickFlipBoard() {
                                flipBoard()
                            },
                            onAddBoard() {
                                isDraftingBoard() && this.onSelectBoard()
                            },
                            onSelectBoard() {
                                const e = getActiveRoom(),
                                    t = getActiveBoard();
                                e && t ? loadChessboard(e, t) : function resetChessboard() {
                                    const e = getActiveChessboard();
                                    e.game.setMode(P), e.game.clearMarkings(), e.game.load({
                                        pgn: "",
                                        fen: (0, O.H)()
                                    })
                                }(), this.onEvaluationSettingsUpdate()
                            },
                            onLoadBoard() {
                                const e = getActiveRoom(),
                                    t = getActiveBoard();
                                e && t && loadChessboard(e, t)
                            },
                            onEvaluationSettingsUpdate() {
                                isEvaluationBarVisible() || isEvaluationLinesVisible() ? startEvaluation() : function stopEvaluation() {
                                    clearChessboard()
                                }()
                            },
                            onPublishBoard({
                                room: e,
                                board: t
                            }) {
                                isActiveBoard(e, t) && loadChessboardMode(e, t)
                            },
                            onMakeMove({
                                room: e,
                                board: t
                            }) {
                                isActiveBoard(e, t) && function loadChessboardPgn(e) {
                                    const t = getActiveChessboard();
                                    if (t.game.getPGN() === e.pgn) return;
                                    const s = t.game.getOptions().playSounds;
                                    s && t.game.setOptions({
                                        playSounds: !1
                                    }), fe.shouldIgnoreMarkingEvents = !0, t.game.getContext().game.reorderLines(), t.game.load({
                                        fen: (0, O.H)(),
                                        pgn: e.pgn
                                    }), fe.shouldIgnorePositionChangeEvents = !0, t.game.moveBackward(), fe.shouldIgnorePositionChangeEvents = !1, s && t.game.setOptions({
                                        playSounds: !0
                                    }), fe.shouldIgnoreMarkingEvents = !1, loadChessboardPosition(e)
                                }(t)
                            },
                            onChangePosition({
                                room: e,
                                board: t
                            }) {
                                isActiveBoard(e, t) && (isWaitingChessboardEvent(t.id, o.Position) || loadChessboardPosition(t))
                            },
                            onUpdateArrows({
                                room: e,
                                board: t
                            }) {
                                isActiveBoard(e, t) && loadChessboardArrows(t)
                            },
                            onUpdateSquares({
                                room: e,
                                board: t
                            }) {
                                isActiveBoard(e, t) && loadChessboardSquares(t)
                            },
                            onUpdateImages({
                                room: e,
                                board: t
                            }) {
                                isActiveBoard(e, t) && loadChessboardImages(t)
                            },
                            onBoardControl({
                                room: e
                            }) {
                                const t = getActiveBoard(e);
                                t && loadChessboardMode(e, t)
                            }
                        }),
                        $t = {
                            currentTime: new Date
                        },
                        Pt = (0, a.eI)({
                            init() {
                                setInterval(this.onClockTick, 200)
                            },
                            onClockTick() {
                                $t.currentTime = new Date
                            }
                        });
                    var Et = (e => (e.Classroom = "classroom-invitations", e))(Et || {});
                    class InvitationModel extends a.Hn {
                        constructor() {
                            super(...arguments), this.accept = "", this.creator = new UserModel, this.decline = "", this.id = "", this.type = Et.Classroom
                        }
                    }
                    const Ot = {
                        userInvitations: (0, a.BL)(InvitationModel, {
                            key: "id"
                        })
                    };
                    async function fetchUsers(e) {
                        const t = i.Z.generate("web_user_callback_id_to_user_data");
                        try {
                            const {
                                data: s
                            } = await r.Z.get(t, {
                                params: {
                                    uuids: e
                                }
                            });
                            return s
                        } catch (s) {
                            return (0, se.x2)((0, te.i)(s)), null
                        }
                    }
                    var At = (e => (e[e.ChatMessage = 0] = "ChatMessage", e[e.InvitationMessage = 1] = "InvitationMessage", e[e.RoomMessage = 2] = "RoomMessage", e[e.WebrtcRoomMessage = 3] = "WebrtcRoomMessage", e[e.WebrtcUserMessage = 4] = "WebrtcUserMessage", e))(At || {});
                    const Tt = (0, X.I)();
                    var Mt = Object.defineProperty,
                        Rt = Object.getOwnPropertySymbols,
                        It = Object.prototype.hasOwnProperty,
                        jt = Object.prototype.propertyIsEnumerable,
                        show_toaster_defNormalProp = (e, t, s) => t in e ? Mt(e, t, {
                            enumerable: !0,
                            configurable: !0,
                            writable: !0,
                            value: s
                        }) : e[t] = s;

                    function showToaster(e) {
                        showNotification(((e, t) => {
                            for (var s in t || (t = {})) It.call(t, s) && show_toaster_defNormalProp(e, s, t[s]);
                            if (Rt)
                                for (var s of Rt(t)) jt.call(t, s) && show_toaster_defNormalProp(e, s, t[s]);
                            return e
                        })({
                            type: oe.Toaster
                        }, e))
                    }
                    var Bt = (e => (e.Room = "room", e.AutoplayFailed = "autoplay-failed", e.IncomingInvitation = "incoming-invitation", e))(Bt || {});
                    var Lt = s(1047);
                    const Dt = {
                        clients: {},
                        connecting: {},
                        subscriptions: {},
                        subscribing: {},
                        isEnabled: Boolean(document.querySelector('script[src*="pubsub-connection"]')),
                        waitingForClient: null,
                        reactive: {
                            isConnected: !1,
                            connectionQuality: 0
                        }
                    };
                    Object.create, Object.defineProperty, Object.getOwnPropertyDescriptor, Object.getOwnPropertyNames, Object.getPrototypeOf, Object.prototype.hasOwnProperty;

                    function getSubscriptionChannel(e) {
                        return isString(e) ? e : e.join("/")
                    }

                    function isAlternativePubSub(e) {
                        return Boolean(e && "/pubsub" !== e && "/pubsub/" !== e)
                    }

                    function getSubscriptionKey({
                        channel: e,
                        pubsub: t
                    }) {
                        return isAlternativePubSub(t) ? `${t}$${getSubscriptionChannel(e)}` : getSubscriptionChannel(e)
                    }

                    function isPubSubConnected() {
                        return Dt.reactive.isConnected
                    }
                    class SubscriptionError extends Error {
                        constructor(e, t) {
                            super(`failed to subscribe to ${e} (code: ${null==t?void 0:t.code})`), this.channel = e, this.failure = t
                        }
                    }

                    function unsubscribePubSubChannel(e) {
                        var t;
                        const s = getSubscriptionKey(e);
                        if (null == (t = Dt.subscriptions[s]) || t.close(), delete Dt.subscriptions[s], delete Dt.subscribing[s], !isAlternativePubSub(e.pubsub)) return;
                        !Object.keys(Dt.subscriptions).filter((t => t.split("$")[0] === e.pubsub)).length && Dt.clients[e.pubsub] && (Dt.clients[e.pubsub].close(), delete Dt.clients[e.pubsub])
                    }

                    function isPubSubEnabled() {
                        return Dt.isEnabled
                    }
                    const Ut = (0, X.I)();
                    var zt = (e => (e[e.Established = 0] = "Established", e[e.Interrupted = 1] = "Interrupted", e))(zt || {});

                    function updateConnectionStatus() {
                        if (!z.client) return;
                        const e = Boolean(z.isAttached());
                        e !== Dt.reactive.isConnected && Ut.emit(e ? zt.Established : zt.Interrupted), Dt.reactive.isConnected = e, Dt.reactive.connectionQuality = z.client.getQuality() || 0
                    }
                    async function waitForPubSubConnection() {
                        if (!isPubSubEnabled()) throw new Error("PubSub.client script not found in document");
                        if (Dt.waitingForClient && await Dt.waitingForClient, updateConnectionStatus(), !isPubSubConnected()) return new Promise((e => {
                            const onConnect = () => {
                                window.PubSub.off(A, onConnect), window.PubSub.off(R, onConnect), e()
                            };
                            window.PubSub.on(A, onConnect), window.PubSub.on(R, onConnect)
                        }))
                    }
                    async function subscribePubSubChannel(e) {
                        if (Dt.waitingForClient) return Dt.waitingForClient;
                        isAlternativePubSub(e.pubsub) ? await async function connectPubSubClient(e) {
                            return e in Dt.connecting ? Dt.connecting[e] : Dt.clients[e] ? void 0 : (Dt.connecting[e] = new Promise(((t, a) => {
                                var o, n;
                                const r = {
                                        debug: !1,
                                        maxReconnectionDelayMs: 5e3,
                                        reconnectionDelayPowBase: 1.3,
                                        uid: null == (n = null == (o = window.context) ? void 0 : o.user) ? void 0 : n.uuid,
                                        url: window.PubSub.options.url.pubsub.replace(/\/pubsub$/, e)
                                    },
                                    i = {
                                        onAttach: () => {
                                            delete Dt.connecting[e], t()
                                        },
                                        onConnect: () => {
                                            delete Dt.connecting[e], t()
                                        },
                                        onDetach: () => {
                                            delete Dt.connecting[e], delete Dt.clients[e], a()
                                        },
                                        onFailure: t => {
                                            delete Dt.connecting[e], delete Dt.clients[e], a(t)
                                        }
                                    };
                                s.e(966).then(s.bind(s, 9401)).then((({
                                    default: t
                                }) => {
                                    Dt.clients[e] = t.connect(r, i)
                                }))
                            })), Dt.connecting[e])
                        }(e.pubsub): isPubSubConnected() || await waitForPubSubConnection();
                        const t = getSubscriptionKey(e);
                        return t in Dt.subscribing ? Dt.subscribing[t] : Dt.subscriptions[t] ? void 0 : (Dt.subscribing[t] = new Promise(((s, a) => {
                            const o = getSubscriptionChannel(e.channel),
                                n = isAlternativePubSub(e.pubsub) ? Dt.clients[e.pubsub] : z,
                                r = setTimeout((() => {
                                    t in Dt.subscribing && ((0, Lt.T)("time out while subscribing to PubSub", {
                                        channel: o
                                    }), unsubscribePubSubChannel({
                                        channel: o,
                                        pubsub: e.pubsub
                                    }))
                                }), 3e4),
                                i = n.subscribe(o, {
                                    onDetach() {
                                        clearTimeout(r)
                                    },
                                    onAttach() {
                                        clearTimeout(r), delete Dt.subscribing[t], Dt.subscriptions[t] = i, s()
                                    },
                                    onFailure(e) {
                                        clearTimeout(r), delete Dt.subscribing[t], a(new SubscriptionError(o, e))
                                    },
                                    onMessage(t) {
                                        o in Dt.subscribing && (0, Lt.T)("onMessage PubSub hook fired before onAttach", {
                                            channel: o
                                        }), Promise.resolve({
                                            channel: o,
                                            message: t
                                        }).then(e.onMessage)
                                    },
                                    onComplete() {
                                        clearTimeout(r), unsubscribePubSubChannel({
                                            channel: o,
                                            pubsub: e.pubsub
                                        }), s()
                                    }
                                })
                        })), Dt.subscribing[t])
                    }
                    async function subscribe_channel_subscribeChannel(e, t) {
                        return function subscribeChannel(e, t) {
                            return subscribePubSubChannel({
                                channel: e,
                                onMessage: t
                            })
                        }(e, (e => {
                            Tt.emit(t, e)
                        }))
                    }

                    function isLoggedIn() {
                        return Boolean(_e.currentUser)
                    }
                    const qt = (0, a.eI)({
                        init() {
                            isLoggedIn() && (Tt.on(At.RoomMessage, this.onRoomMessage), Tt.on(At.InvitationMessage, this.onInvitationMessage), async function subscribeInvitations() {
                                return subscribe_channel_subscribeChannel([j.Invitations, L.Users, ":me"].join("/"), At.InvitationMessage)
                            }(), async function loadUserInvitations() {
                                var e;
                                const {
                                    data: t
                                } = await z.fetch({
                                    service: j.Invitations,
                                    path: [L.Users, null == (e = window.context.user) ? void 0 : e.uuid, "type", Et.Classroom]
                                }), s = t.invitations.filter((e => !e.creator.username)).map((e => e.creator.id));
                                if (s.length) {
                                    const e = await fetchUsers(s);
                                    e && t.invitations.forEach((t => {
                                        e[t.creator.id] && Object.assign(t.creator, e[t.creator.id])
                                    }))
                                }
                                Ot.userInvitations.reset(t.invitations)
                            }())
                        },
                        onRoomMessage({
                            message: e
                        }) {
                            var t, s, a;
                            if ("invitation_update" !== (null == (t = e.metadata) ? void 0 : t.message_type)) return;
                            const o = getRoom(e.data.sessionId);
                            if (!(null == (a = null == o ? void 0 : o.members.find(null == (s = window.context.user) ? void 0 : s.uuid)) ? void 0 : a.isOwner())) return;
                            const n = o.members.find(e.data.invitee);
                            n && (e.data.status === W.Accepted ? function showAcceptedInvitationNotification(e) {
                                const t = (0, V.dW)("%username% accepted your invitation to Classroom", {
                                    "%username%": e.username
                                });
                                showToaster({
                                    keys: [Bt.Room],
                                    icon: "chess-board",
                                    duration: 6e3,
                                    avatarUrl: e.avatarUrl,
                                    content: t
                                })
                            }(n) : e.data.status === W.Declined && function showDeclinedInvitationNotification(e) {
                                const t = (0, V.dW)("%username% declined your invitation to Classroom", {
                                    "%username%": e.username
                                });
                                showToaster({
                                    keys: [Bt.Room],
                                    icon: "chess-board",
                                    duration: 6e3,
                                    avatarUrl: e.avatarUrl,
                                    content: t
                                })
                            }(n))
                        },
                        onInvitationMessage({
                            message: e
                        }) {
                            e.added.forEach((e => {
                                Ot.userInvitations.add(e)
                            })), e.removed.forEach((e => {
                                Ot.userInvitations.remove(e)
                            }))
                        }
                    });
                    async function forEachAsync(e, t) {
                        await e.reduce((async (e, s, a) => {
                            await e, await t(s, a)
                        }), Promise.resolve())
                    }
                    var Vt = s(8160);
                    const Nt = "web_library_callback_collection_items",
                        Zt = "web_library_collection_remove_items",
                        Ft = {
                            ADD_GAME_FROM_FEN_OR_PGN_IS_INCORRECT_MESSAGE: Vt.Z.trans("Please insert the correct FEN/PGN(s)"),
                            ADD_GAME_FROM_FEN_OR_PGN_SUCCESS_MESSAGE: Vt.Z.trans("Your game(s) have been uploaded"),
                            ADD_GAME_FROM_URL_IS_INCORRECT_MESSAGE: Vt.Z.trans("Please make sure you’ve pasted a valid Chess.com URL"),
                            ADD_GAME_FROM_URL_SUCCESS_MESSAGE: Vt.Z.trans("Game from URL has been uploaded"),
                            ADD_GAME_FROM_STUDY_URL_SUCCESS_MESSAGE: Vt.Z.trans("Game from study URL has been uploaded"),
                            ALLOW_COPYING_ON: Vt.Z.trans("Allow Copying is now on"),
                            ALLOW_COPYING_OFF: Vt.Z.trans("Allow Copying is now off"),
                            BOOKMARK_ADDED: Vt.Z.trans("Bookmark added"),
                            BOOKMARK_REMOVED: Vt.Z.trans("Bookmark removed"),
                            COLLECTION_COPIED: Vt.Z.trans("Collection has been copied"),
                            COLLECTION_NAME_INVALID_MESSAGE: Vt.Z.trans("Collection name must be between 3-50 characters long"),
                            EDIT_GAME_SUCCESS_MESSAGE: Vt.Z.trans("Game has been updated"),
                            EXIST_TAG_MESSAGE: e => Vt.Z.trans('"%1$s%" already exists', {
                                "%1$s%": e
                            }),
                            PUBLISH_MESSAGE: e => Vt.Z.trans('"%1$s%" collection has been published', {
                                "%1$s%": e
                            }),
                            REMOVED_GAMES_MESSAGE: Vt.Z.trans("The selected games have been removed"),
                            REMOVED_MESSAGE: Vt.Z.trans("This collection was removed"),
                            REMOVED_MESSAGE_CONFIRM: Vt.Z.trans("Are you sure you want to delete this collection?"),
                            SEARCH_EXCEPTION_MESSAGE: Vt.Z.trans("Please enter 3 or more characters"),
                            THUMBNAIL_UPLOADED_MESSAGE: Vt.Z.trans("Thumbnail uploaded"),
                            UNPUBLISH_MESSAGE: e => Vt.Z.trans('"%1$s%" collection has been set to private', {
                                "%1$s%": e
                            }),
                            VALIDATION_MESSAGE: e => Vt.Z.transChoice("{0} 0 characters left|{1} 1 character left|]1,Inf] %charactersCount% characters left", e, {
                                "%charactersCount%": e
                            })
                        },
                        Gt = {
                            BOOKMARKS: "bookmarks",
                            DESCRIPTION_MAXLENGTH: 200,
                            COMMUNITY_COLLECTIONS: "community-collections",
                            INDEX_TABS: [{
                                id: "your-collections",
                                label: Vt.Z.trans("Your Collections")
                            }, {
                                id: "shared-collections",
                                label: Vt.Z.trans("Shared")
                            }, {
                                id: "bookmarks",
                                label: Vt.Z.trans("Bookmarks")
                            }, {
                                id: "community-collections",
                                label: Vt.Z.trans("Community Collections")
                            }],
                            MAX_AVATAR_SIZE_BYTES: 5242880,
                            MAX_LUCG_PLAYER_NAME_LENGTH: 100,
                            MAX_LUCG_TITLE_LENGTH: 100,
                            PGN: "pgn",
                            PLACEHOLDER_IMG: "/bundles/web/images/image-default.svg",
                            PLAY: "play",
                            PAUSE: "pause",
                            SELECT_ALL: "selectAll",
                            SHARED_COLLECTIONS: "shared-collections",
                            SORT_GAMES_OPTIONS: [{
                                label: Vt.Z.trans("Recently added (desc)"),
                                value: 1
                            }, {
                                label: Vt.Z.trans("Recently added (asc)"),
                                value: 2
                            }, {
                                label: Vt.Z.trans("Date played (desc)"),
                                value: 3
                            }, {
                                label: Vt.Z.trans("Date played (asc)"),
                                value: 4
                            }, {
                                label: Vt.Z.trans("Moves (desc)"),
                                value: 5
                            }, {
                                label: Vt.Z.trans("Moves (asc)"),
                                value: 6
                            }, {
                                label: Vt.Z.trans("Player Name (white desc)"),
                                value: 7
                            }, {
                                label: Vt.Z.trans("Player Name (white asc)"),
                                value: 8
                            }, {
                                label: Vt.Z.trans("Player Name (black desc)"),
                                value: 9
                            }, {
                                label: Vt.Z.trans("Player Name (black asc)"),
                                value: 10
                            }, {
                                label: Vt.Z.trans("Rating (white desc)"),
                                value: 11
                            }, {
                                label: Vt.Z.trans("Rating (white asc)"),
                                value: 12
                            }, {
                                label: Vt.Z.trans("Rating (black desc)"),
                                value: 13
                            }, {
                                label: Vt.Z.trans("Rating (black asc)"),
                                value: 14
                            }, {
                                label: Vt.Z.trans("Event name (desc)"),
                                value: 15
                            }, {
                                label: Vt.Z.trans("Event name (asc)"),
                                value: 16
                            }, {
                                label: Vt.Z.trans("ECO (desc)"),
                                value: 17
                            }, {
                                label: Vt.Z.trans("ECO (asc)"),
                                value: 18
                            }],
                            TAG_MAXLENGTH: 30,
                            TITLE_MAXLENGTH: 50,
                            TITLE_MINLENGTH: 3,
                            TIMEOUT: 500,
                            UNKNOWN_PLAYER: Vt.Z.trans("Unknown"),
                            UPGRADE_MODAL_CONFIG: {
                                buttonText: Vt.Z.trans("Upgrade"),
                                limitText: Vt.Z.trans("Maximum Games Exceeded"),
                                referral: "library",
                                startingSlide: "library",
                                subtitle: Vt.Z.trans("Upgrade Today."),
                                title: Vt.Z.trans("Enlarge Your Game Library")
                            },
                            USERNAME_MAXLENGTH: 30,
                            YOUR_COLLECTIONS: "your-collections"
                        };
                    Gt.DEFAULT_COLLECTIONS = {
                        [Gt.YOUR_COLLECTIONS]: {
                            data: [],
                            meta: {}
                        },
                        [Gt.SHARED_COLLECTIONS]: {
                            data: [],
                            meta: {}
                        },
                        [Gt.BOOKMARKS]: {
                            data: [],
                            meta: {}
                        },
                        [Gt.COMMUNITY_COLLECTIONS]: {
                            data: [],
                            meta: {}
                        }
                    }, Gt.SORT_OPTIONS = {
                        [Gt.YOUR_COLLECTIONS]: [{
                            label: Vt.Z.trans("Recently Accessed (desc)"),
                            value: 1
                        }, {
                            label: Vt.Z.trans("Recently Accessed (asc)"),
                            value: 2
                        }, {
                            label: Vt.Z.trans("Recently Updated (desc)"),
                            value: 3
                        }, {
                            label: Vt.Z.trans("Recently Updated (asc)"),
                            value: 4
                        }, {
                            label: Vt.Z.trans("Number of Items (desc)"),
                            value: 5
                        }, {
                            label: Vt.Z.trans("Number of Items (asc)"),
                            value: 6
                        }, {
                            label: Vt.Z.trans("Alphabetical (desc)"),
                            value: 7
                        }, {
                            label: Vt.Z.trans("Alphabetical (asc)"),
                            value: 8
                        }, {
                            label: Vt.Z.trans("Recently created (desc)"),
                            value: 9
                        }, {
                            label: Vt.Z.trans("Recently created (asc)"),
                            value: 10
                        }],
                        [Gt.SHARED_COLLECTIONS]: [{
                            label: Vt.Z.trans("Recently Shared (desc)"),
                            value: 1
                        }, {
                            label: Vt.Z.trans("Recently Shared (asc)"),
                            value: 2
                        }, {
                            label: Vt.Z.trans("Recently Accessed (desc)"),
                            value: 3
                        }, {
                            label: Vt.Z.trans("Recently Accessed (asc)"),
                            value: 4
                        }],
                        [Gt.BOOKMARKS]: [{
                            label: Vt.Z.trans("Recently Bookmarked (desc)"),
                            value: 1
                        }, {
                            label: Vt.Z.trans("Recently Bookmarked (asc)"),
                            value: 2
                        }, {
                            label: Vt.Z.trans("Recently Accessed (desc)"),
                            value: 3
                        }, {
                            label: Vt.Z.trans("Recently Accessed (asc)"),
                            value: 4
                        }],
                        [Gt.COMMUNITY_COLLECTIONS]: [{
                            label: Vt.Z.trans("Recently Published (desc)"),
                            value: 1
                        }, {
                            label: Vt.Z.trans("Recently Published (asc)"),
                            value: 2
                        }, {
                            label: Vt.Z.trans("Recently Updated (desc)"),
                            value: 3
                        }, {
                            label: Vt.Z.trans("Recently Updated (asc)"),
                            value: 4
                        }, {
                            label: Vt.Z.trans("Number of Items (desc)"),
                            value: 5
                        }, {
                            label: Vt.Z.trans("Number of Items (asc)"),
                            value: 6
                        }, {
                            label: Vt.Z.trans("Alphabetical (desc)"),
                            value: 7
                        }, {
                            label: Vt.Z.trans("Alphabetical (asc)"),
                            value: 8
                        }, {
                            label: Vt.Z.trans("Most popular (desc)"),
                            value: 9
                        }, {
                            label: Vt.Z.trans("Most popular (asc)"),
                            value: 10
                        }]
                    };
                    const routes_callbackCollectionItems = e => i.Z.generate(Nt, {
                            uuid: e
                        }),
                        Wt = (i.Z.generate("web_library_callback_create_collection"), e => i.Z.generate("web_library_create_collection", e)),
                        Ht = (i.Z.generate("web_library_home"), e => i.Z.generate(Zt, {
                            uuid: e
                        })),
                        Yt = ["960", "advanced-tactics", "analysis", "attacking-king", "award", "best-attacks", "best-defense", "best-wins", "blitz", "blunders", "briliant-games", "bug-house", "bullet", "checkmates", "checkmates-1", "chesskid-games", "club-matches", "coin", "computer-games", "crazy-house", "daily", "endgames", "event-matches", "fair-play", "fantastic-wins", "favorite-strategy", "favorite-streamers", "first-moves", "flagging", "fork", "four-players", "games-with-friends", "gold", "great-games", "ideas", "key-openings", "king-of-the-game", "learn", "lessons", "liked-games", "mastery-tactics", "most-boring-games", "most-shocking-wins", "no-castling", "note", "openings", "pins", "pro", "puzzle-rush", "puzzle", "quickest-wins", "skewer", "solo-games", "tactics", "tilt", "time", "timeless-moves", "variants", "watch"];

                    function getCollectionGames(e, t) {
                        return r.Z.get(routes_callbackCollectionItems(e), {
                            params: t
                        })
                    }
                    async function updateGameId(e, t, s) {
                        await publishBoardVersion({
                            roomId: e,
                            boardId: t,
                            path: [D.GameId],
                            data: {
                                gameId: s
                            },
                            method: "put"
                        })
                    }
                    async function saveBoardToCollection(e, t, s) {
                        const a = getRoom(e);
                        if (!a || !a.selectedCollectionId) return;
                        const o = a.boards.find(t);
                        if (!o) return;
                        if (o.isSaving = !0, !s && o.gameId) {
                            const {
                                data: e
                            } = await getCollectionGames(a.selectedCollectionId), t = e.data.map((e => e.lucgId));
                            o.gameId && !t.includes(o.gameId) && await updateGameId(a.id, o.id, "")
                        }
                        let n = !1;
                        if (o.gameId) try {
                            await r.Z.post(i.Z.generate("web_analysis_library_game_callback_self_analysis_create"), {
                                pgn: o.pgn,
                                url: o.gameId
                            }), n = !0
                        } catch (l) {
                            showHttpError(l)
                        } else {
                            const s = i.Z.generate("web_library_callback_add_single_game_from_pgn_to_collection", {
                                uuid: a.selectedCollectionId
                            });
                            try {
                                const {
                                    data: a
                                } = await r.Z.post(s, {
                                    pgn: o.pgn
                                });
                                a.success && a.lucgId && (await updateGameId(e, t, a.lucgId), n = !0)
                            } catch (l) {
                                showHttpError(l)
                            }
                        }
                        o.isSaving = !1, n && !s && function showSuccess(e) {
                            showAlert({
                                duration: 1e4,
                                theme: "success",
                                content: e
                            })
                        }((0, V.dW)("Your changes were successfully saved!"))
                    }
                    async function saveRoomToCollection(e) {
                        const t = getRoom(e);
                        if (!t || !t.selectedCollectionId) return;
                        t.isSaving = !0;
                        const {
                            data: s
                        } = await getCollectionGames(t.selectedCollectionId), a = s.data.map((e => e.lucgId)), o = s.data.filter((e => !t.boards.find((t => t.gameId === e.lucgId)))).map((e => e.id));
                        o.length && await
                        function removeGames(e, t) {
                            return r.Z.post(Ht(e), {
                                itemIds: t
                            })
                        }(t.selectedCollectionId, o);
                        const n = t.boards.filter((e => !e.draft && e.gameId && !a.includes(e.gameId)));
                        await forEachAsync(n, (async e => {
                            await updateGameId(t.id, e.id, "")
                        }));
                        const l = t.boards.filter((e => !e.draft && e.gameId)),
                            c = t.boards.filter((e => !e.draft && !e.gameId));
                        if (await forEachAsync(l, (async e => {
                                await saveBoardToCollection(t.id, e.id, !0)
                            })), c.length) {
                            const e = await async function addMultipleLibraryGames(e, t) {
                                const s = i.Z.generate("web_library_callback_add_from_list_of_pgns_to_collection", {
                                        uuid: e
                                    }),
                                    {
                                        data: a
                                    } = await r.Z.post(s, {
                                        pgns: t
                                    });
                                return a.lucgIds
                            }(t.selectedCollectionId, c.map((e => e.pgn)));
                            await forEachAsync(c, (async (s, a) => {
                                await updateGameId(t.id, s.id, e[a])
                            }))
                        }
                        t.isSaving = !1
                    }

                    function unsubscribeChannel(e) {
                        unsubscribePubSubChannel({
                            channel: e
                        })
                    }
                    async function closeRoom(e, t = !1) {
                        const s = Q.rooms.find(e);
                        Q.closingRooms.push(e), s && (unsubscribeChannel(s.getChannel()), unsubscribeChannel(s.getChatChannel()), !t && s.autoSave && await saveRoomToCollection(e)), Q.activeRoomId && Q.activeRoomId !== e || (Q.activeRoomId = null, Q.activeBoardId = null, ee.emit(J.SelectRoom), ee.emit(J.SelectBoard)),
                            function hideRoomNotifications() {
                                hideNotifications({
                                    keys: [Bt.Room]
                                })
                            }(), Q.rooms.remove(e), removeFromArray(Q.closingRooms, e), removeFromArray(Q.addingBoards, e)
                    }
                    var Kt = s(5934);
                    async function addChatContent(e, t) {
                        const s = getRoom(e);
                        s && s.chatMessages.add({
                            id: (0, Kt.Z)(),
                            body: t
                        })
                    }

                    function uniq(e) {
                        return e.filter(((e, t, s) => s.indexOf(e) === t))
                    }
                    var Qt = Object.defineProperty,
                        Jt = Object.defineProperties,
                        Xt = Object.getOwnPropertyDescriptors,
                        es = Object.getOwnPropertySymbols,
                        ts = Object.prototype.hasOwnProperty,
                        ss = Object.prototype.propertyIsEnumerable,
                        load_chat_senders_defNormalProp = (e, t, s) => t in e ? Qt(e, t, {
                            enumerable: !0,
                            configurable: !0,
                            writable: !0,
                            value: s
                        }) : e[t] = s;
                    async function loadChatSenders(e, t) {
                        const s = getRoom(e);
                        if (!s) return;
                        const a = uniq((t || s.chatMessages).map((e => e.authorId))).filter((e => !s.chatSenders.find(e)));
                        if (!a.length) return;
                        const o = await fetchUsers(a);
                        a.forEach((e => {
                            var t;
                            (null == o ? void 0 : o[e]) && s.chatSenders.update((t = ((e, t) => {
                                for (var s in t || (t = {})) ts.call(t, s) && load_chat_senders_defNormalProp(e, s, t[s]);
                                if (es)
                                    for (var s of es(t)) ss.call(t, s) && load_chat_senders_defNormalProp(e, s, t[s]);
                                return e
                            })({}, o[e]), Jt(t, Xt({
                                id: e
                            }))))
                        }))
                    }
                    var as = (0, g.aZ)({
                            name: "ChatWelcome",
                            components: {},
                            props: {
                                room: {
                                    type: RoomModel,
                                    required: !0
                                }
                            },
                            computed: {
                                welcome() {
                                    return this.$trans("Welcome to %owner%'s Classroom! %emoji%", {
                                        "%owner%": this.room.getOwner().username,
                                        "%emoji%": "&#x1f389;"
                                    })
                                }
                            }
                        }),
                        os = {
                            message: "chat-welcome-message",
                            welcome: "chat-welcome-welcome"
                        },
                        ns = s(1900);
                    var rs = (0, ns.Z)(as, (function() {
                        var e = this,
                            t = e.$createElement,
                            s = e._self._c || t;
                        return s("div", {
                            class: e.$style.message
                        }, [s("div", {
                            class: e.$style.welcome,
                            domProps: {
                                innerHTML: e._s(e.welcome)
                            }
                        }), e._v(" "), s("div", {
                            domProps: {
                                textContent: e._s(e.$trans("Chat here or unmute to say hello."))
                            }
                        })])
                    }), [], !1, (function injectStyles(e) {
                        this.$style = os.locals || os
                    }), null, null).exports;
                    var is = Object.defineProperty,
                        ls = Object.defineProperties,
                        cs = Object.getOwnPropertyDescriptors,
                        ds = Object.getOwnPropertySymbols,
                        us = Object.prototype.hasOwnProperty,
                        ms = Object.prototype.propertyIsEnumerable,
                        load_members_defNormalProp = (e, t, s) => t in e ? is(e, t, {
                            enumerable: !0,
                            configurable: !0,
                            writable: !0,
                            value: s
                        }) : e[t] = s,
                        load_members_spreadValues = (e, t) => {
                            for (var s in t || (t = {})) us.call(t, s) && load_members_defNormalProp(e, s, t[s]);
                            if (ds)
                                for (var s of ds(t)) ms.call(t, s) && load_members_defNormalProp(e, s, t[s]);
                            return e
                        };
                    async function loadMembers(e) {
                        const t = getRoom(e);
                        if (!t) return;
                        const s = await async function fetchMembers(e) {
                            try {
                                const {
                                    data: t
                                } = await z.fetch({
                                    service: j.Classroom,
                                    path: [D.Sessions, e, D.Users]
                                });
                                return t
                            } catch (t) {
                                return showHttpError(t), null
                            }
                        }(t.id);
                        if (!s) return;
                        const a = await fetchUsers(s.participants.map((e => e.id)));
                        if (!a) return;
                        const o = s.participants.map((e => {
                            const t = a[e.id];
                            return s = load_members_spreadValues(load_members_spreadValues({}, e), t), o = {
                                id: e.id
                            }, ls(s, cs(o));
                            var s, o
                        }));
                        t.members.reset(o)
                    }
                    var hs = (e => (e.ClassroomClockChanged = "Classroom Clock Changed", e.ClassroomCreated = "Classroom Created", e.ClassroomEvalToggledOn = "Classroom Eval Toggled On", e.ClassroomGameLoaded = "Classroom Game Loaded", e.ClassroomJoined = "Classroom Joined", e.ClassroomLinesToggledOn = "Classroom Lines Toggled On", e.ClassroomMainPageVisited = "Classroom Main Page Visited", e.ClassroomOnlyCoachToggledOn = "Classroom OnlyCoach Toggled On", e.ClassroomVideoStarted = "Classroom Video Started", e))(hs || {}),
                        ps = s(5700);
                    async function loadRoom(e) {
                        const t = e.session.id;
                        Q.loadingRooms.push(t), e.session.timer.updatedAt = Date.now(), e.session.stopwatch.updatedAt = Date.now();
                        const s = Q.rooms.update(e.session);
                        await subscribe_channel_subscribeChannel(s.getChannel(), At.RoomMessage), await subscribe_channel_subscribeChannel(s.getChatChannel(), At.ChatMessage), await loadMembers(s.id), await async function loadBoards(e) {
                            const t = getRoom(e);
                            if (!t) return;
                            let s = [];
                            try {
                                const {
                                    data: t
                                } = await z.fetch({
                                    service: j.Classroom,
                                    path: [D.Sessions, e, D.Boards]
                                });
                                s = t.boards
                            } catch (a) {
                                showHttpError(a)
                            }
                            s.forEach((e => {
                                const s = t.boards.add(e);
                                ee.emit(J.AddBoard, {
                                    room: t,
                                    board: s
                                })
                            }))
                        }(s.id), await async function loadChatMessages(e) {
                                const t = getRoom(e);
                                if (!t) return;
                                let s;
                                try {
                                    const {
                                        data: t
                                    } = await z.fetch({
                                        service: j.Chat,
                                        path: [B.Classroom, e, B.Messages]
                                    });
                                    s = t.data.messages
                                } catch (a) {
                                    showHttpError(a)
                                }
                                s && (await loadChatSenders(e, s), t.chatMessages.reset(s)), addChatContent(t.id, {
                                    component: rs,
                                    props: {
                                        room: t
                                    }
                                })
                            }(s.id), Q.activeRoomId = s.id, ee.emit(J.SelectRoom), selectBoard(s.id, e.session.currentBoardId), removeFromArray(Q.loadingRooms, t),
                            function logRoomJoined(e) {
                                (0, ps.K)(hs.ClassroomJoined, {
                                    roomId: e
                                })
                            }(s.id)
                    }
                    async function createRoom() {
                        Q.isCreatingRoom = !0;
                        const e = {
                            initialPosition: "",
                            invitees: [],
                            minimumMembershipLevel: 0,
                            openEnrollment: !0,
                            pgn: "",
                            rules: !0
                        };
                        let t = null;
                        try {
                            const {
                                data: s
                            } = await z.publish({
                                service: j.Classroom,
                                path: D.Sessions,
                                data: e
                            });
                            t = s,
                                function logRoomCreated(e) {
                                    (0, ps.K)(hs.ClassroomCreated, {
                                        roomId: e
                                    })
                                }(t.session.id)
                        } catch (s) {
                            showHttpError(s)
                        }
                        t && await loadRoom(t), Q.isCreatingRoom = !1
                    }
                    async function createBoard(e) {
                        const {
                            data: t
                        } = await z.publish({
                            service: j.Classroom,
                            path: [D.Sessions, e.id, D.Boards],
                            data: {
                                alias: "",
                                initialPosition: "",
                                rules: !0,
                                pgn: "",
                                title: "",
                                minimumMembershipLevel: 0,
                                invitees: [],
                                sequence: e.getNextSequence()
                            }
                        });
                        return t
                    }
                    async function updatePlayers(e, t, s) {
                        try {
                            await z.publish({
                                method: "put",
                                service: j.Classroom,
                                path: [D.Sessions, e, D.Boards, t, D.Players],
                                data: s
                            })
                        } catch (a) {
                            showHttpError(a)
                        }
                    }
                    async function addBoardFromPgn(e, t) {
                        var s, a;
                        const o = getRoom(e);
                        if (!o) return;
                        if (!canLoadGames(e)) return;
                        const n = Ne().pgnToJson(t.pgn, 0);
                        if (!n) return;
                        let r = o.getDraftBoard(getCurrentUser().id);
                        if (!r) {
                            const e = await createBoard(o);
                            r = o.boards.add(e), ee.emit(J.AddBoard, {
                                room: o,
                                board: r
                            })
                        }
                        t.gameId && await updateGameId(e, r.id, t.gameId);
                        const i = null != (s = t.whitePlayer) ? s : {
                                name: n.headers.White || "",
                                rating: parseInt(n.headers.WhiteElo || "", 10)
                            },
                            l = null != (a = t.blackPlayer) ? a : {
                                name: n.headers.Black || "",
                                rating: parseInt(n.headers.BlackElo || "", 10)
                            };
                        await updatePlayers(e, r.id, {
                            whitePlayer: i,
                            blackPlayer: l
                        }), await makeMove(e, r.id, {
                            pgn: t.pgn,
                            line: 0,
                            move: 0
                        }), await publishDraft(e, r.id)
                    }
                    var bs = (e => (e.Archive = "Archive", e.Explorer = "Explorer", e.Library = "Library", e))(bs || {}),
                        gs = "web_callback_load_game_live_data",
                        vs = "web_computer_callback_load_game",
                        ws = "web_daily_callback_load_game";

                    function getPlayer({
                        players: e
                    }, t) {
                        var s;
                        const a = Object.values(e).find((e => e.color === t)),
                            o = (0, V.ox)();
                        return {
                            country: Object.keys(o).find((e => o[e] === a.countryName)) || (null == (s = a.countryId) ? void 0 : s.toString()) || null,
                            avatarUrl: a.avatarUrl,
                            flairCode: a.flairCode,
                            membership: a.membershipCode,
                            name: a.username,
                            rating: a.rating,
                            title: a.chessTitle,
                            hasAccount: !0
                        }
                    }
                    async function fetchArchiveGame(e) {
                        var t;
                        let s;
                        s = e.live ? gs : e.vsComputer ? vs : ws;
                        const a = i.Z.generate(s, {
                                id: e.id
                            }),
                            {
                                data: o
                            } = await r.Z.get(a);
                        return {
                            whitePlayer: getPlayer(o, "white"),
                            blackPlayer: getPlayer(o, "black"),
                            pgn: Ne().generatePgn({
                                tcn: o.game.moveList,
                                headers: o.game.pgnHeaders,
                                timestamps: o.game.moveTimestamps ? null == (t = o.game.moveTimestamps) ? void 0 : t.split(",").map(Number) : o.game.timestamps
                            })
                        }
                    }

                    function logGameLoaded(e, t) {
                        (0, ps.K)(hs.ClassroomGameLoaded, {
                            roomId: e,
                            gameSource: t
                        })
                    }
                    async function addBoardsFromArchiveGames(e) {
                        const t = getActiveRoom();
                        t && (Q.addingBoards.push(t.id), await forEachAsync(e, (async e => {
                            let s;
                            try {
                                s = await fetchArchiveGame(e)
                            } catch (a) {
                                showHttpError(a)
                            }
                            s && (await addBoardFromPgn(t.id, s), logGameLoaded(t.id, bs.Archive))
                        })), removeFromArray(Q.addingBoards, t.id))
                    }

                    function isRoomAlias(e) {
                        return !/^\w{8}-\w{4}-\w{4}-\w{4}-\w{12}$/.test(e)
                    }
                    async function openRoom(e) {
                        let t = null,
                            s = !1;
                        try {
                            const {
                                data: s
                            } = await z.fetch({
                                service: j.Classroom,
                                path: isRoomAlias(e) ? [D.Sessions, D.Alias, e] : [D.Sessions, e]
                            });
                            t = s
                        } catch (a) {
                            404 === a.response.status ? s = !0 : showHttpError(a)
                        }
                        s ? ee.emit(J.RoomNotFound, {
                            roomId: e
                        }) : t && await loadRoom(t)
                    }
                    async function joinRoom(e) {
                        Q.isJoiningRoom = !0;
                        let t = !1,
                            s = !1;
                        try {
                            await async function confirmInvitation(e) {
                                await z.publish({
                                    service: j.Classroom,
                                    path: isRoomAlias(e) ? [D.Sessions, D.Alias, e, D.Confirmations] : [D.Sessions, e, D.Confirmations],
                                    params: {
                                        status: W.Accepted
                                    }
                                })
                            }(e), t = !0
                        } catch (a) {
                            404 === a.response.status ? s = !0 : 403 !== a.response.status && showHttpError(a)
                        }
                        s ? ee.emit(J.RoomNotFound, {
                            roomId: e
                        }) : t && await openRoom(e), Q.isJoiningRoom = !1
                    }
                    var fs = (e => (e[e.Change = 0] = "Change", e[e.Back = 1] = "Back", e))(fs || {});
                    const ys = (0, X.I)();

                    function setRoute(e) {
                        window.history.pushState(null, document.title, e)
                    }

                    function showConfirmCloseRoomModal() {
                        Ie.isConfirmCloseRoomModalVisible = !0
                    }
                    const _s = (0, a.eI)({
                        init() {
                            window.addEventListener("beforeunload", this.onBeforeUnload), ee.on(J.RoomNotFound, this.onRoomNotFound), ee.on(J.SelectRoom, this.onSelectRoom), ys.on(fs.Back, this.onRouteBack), ys.on(fs.Change, this.onRouteChange),
                                function toggleHideBoardIcons(e) {
                                    const t = document.getElementById("board-layout-controls");
                                    t && toggleClass(t, rt.BodyClass.HideBoardIcons, e)
                                }(!0),
                                function logMainPageVisited() {
                                    (0, ps.K)(hs.ClassroomMainPageVisited)
                                }()
                        },
                        onBeforeUnload(e) {
                            "dev" !== window.context.environment && getActiveRoom() && (e.preventDefault(), e.returnValue = !0)
                        },
                        onRoomNotFound({
                            roomId: e
                        }) {
                            ! function showRoomNotFoundNotification() {
                                showError((0, V.dW)("You’ve tried to join a room that isn’t open to the public. The coach can turn on Open Enrollment or invite you to give you access."))
                            }(), closeRoom(e), setRoute(i.Z.generate("web_classroom"))
                        },
                        onRouteBack({
                            roomId: e
                        }) {
                            getActiveRoom() && !e && showConfirmCloseRoomModal()
                        },
                        onRouteChange({
                            roomId: e
                        }) {
                            if (!isLoggedIn()) return void setRoute(i.Z.generate("web_classroom"));
                            if (e) return void joinRoom(e);
                            const t = getActiveRoom();
                            if (t) return void closeRoom(t.id);
                            const s = function getLiveGameIdFromUrl() {
                                const e = new URLSearchParams(window.location.search).get("loadLiveGame");
                                return e ? Number(e) : null
                            }();
                            s && async function createRoomFromLiveGame(e) {
                                await createRoom();
                                const t = new GameArchiveModel;
                                t.id = e, t.live = !0, await addBoardsFromArchiveGames([t])
                            }(s)
                        },
                        onSelectRoom() {
                            const e = getActiveRoom();
                            setRoute(e ? e.getUrl() : i.Z.generate("web_classroom"))
                        }
                    });
                    async function addBoard(e, t) {
                        const s = getRoom(e);
                        if (!s) return;
                        if (t) return void ee.emit(J.AddBoard, {
                            room: s,
                            board: s.boards.add(t)
                        });
                        if (!canLoadGames(e)) return;
                        const a = await createBoard(s);
                        await addBoard(e, a)
                    }
                    async function selectNextBoard(e, t) {
                        const s = e.boards.find((e => e.id !== t));
                        if (!s) return e.currentBoardId = "", Q.activeBoardId = null, await addBoard(e.id), selectNextBoard(e, t);
                        Q.activeBoardId && Q.activeBoardId !== t || await selectBoard(e.id, s.id)
                    }
                    async function closeBoard(e, t) {
                        const s = getRoom(e);
                        if (!s) return;
                        const a = canRemoveBoard(s.id, t),
                            o = s.boards.remove(t);
                        o && (isRoomOwner(s.id) && await selectNextBoard(s, t), a && (removeAllPendingBoardUpdates(t), await async function deleteBoard(e, t) {
                            await z.publish({
                                method: "DELETE",
                                service: j.Classroom,
                                path: [D.Sessions, e, D.Boards, t]
                            })
                        }(s.id, t)), ee.emit(J.CloseBoard, {
                            room: s,
                            board: o
                        }))
                    }

                    function getRoomByChannel(e) {
                        return Q.rooms.find((t => t.getChannel() === e || t.getChatChannel() === e))
                    }
                    var ks = (0, g.aZ)({
                            name: "ChatMemberStatus",
                            props: {
                                username: {
                                    type: String,
                                    required: !0
                                },
                                presenceStatus: {
                                    type: String,
                                    required: !0
                                }
                            },
                            computed: {
                                content() {
                                    return this.presenceStatus === G.Online ? this.$trans("%member% has joined the room.", {
                                        "%member%": `<strong>${this.username}</strong>`
                                    }) : this.$trans("%member% has left the room.", {
                                        "%member%": `<strong>${this.username}</strong>`
                                    })
                                }
                            }
                        }),
                        Cs = {
                            message: "chat-member-status-message"
                        };
                    var Ss = (0, ns.Z)(ks, (function() {
                        var e = this,
                            t = e.$createElement,
                            s = e._self._c || t;
                        return s("div", {
                            class: e.$style.message
                        }, [s("div", {
                            domProps: {
                                innerHTML: e._s(e.content)
                            }
                        })])
                    }), [], !1, (function chat_member_status_injectStyles(e) {
                        this.$style = Cs.locals || Cs
                    }), null, null).exports;

                    function showChatMessage(e, t, s) {
                        addChatContent(e.id, {
                            component: Ss,
                            props: {
                                username: t.username,
                                presenceStatus: s
                            }
                        })
                    }

                    function removeChatMemberOfflineUpdate(e, t) {
                        const s = (Q.pendingChatMemberOfflineUpdates[e] || []).findIndex((e => e.userId === t));
                        if (-1 === s) return;
                        const a = Q.pendingChatMemberOfflineUpdates[e][s];
                        clearTimeout(a.timeout), Q.pendingChatMemberOfflineUpdates[e].splice(s, 1)
                    }

                    function showPresenceStatusNotification(e, t, s) {
                        const a = e.members.find(t);
                        if (a)
                            if (s !== G.Offline) s === G.Online && function hasChatMemberOfflineUpdate(e, t) {
                                var s;
                                return null == (s = Q.pendingChatMemberOfflineUpdates[e]) ? void 0 : s.some((e => e.userId === t))
                            }(e.id, t) ? removeChatMemberOfflineUpdate(e.id, t) : showChatMessage(e, a, s);
                            else {
                                const o = setTimeout((() => {
                                    showChatMessage(e, a, s), removeChatMemberOfflineUpdate(e.id, t)
                                }), 5e3);
                                (function addChatMemberOfflineUpdate(e, t, s) {
                                    Q.pendingChatMemberOfflineUpdates[e] || (Q.pendingChatMemberOfflineUpdates[e] = []), Q.pendingChatMemberOfflineUpdates[e].push({
                                        userId: t,
                                        timeout: s
                                    })
                                })(e.id, t, o)
                            }
                    }
                    var xs = Object.defineProperty,
                        $s = Object.defineProperties,
                        Ps = Object.getOwnPropertyDescriptors,
                        Es = Object.getOwnPropertySymbols,
                        Os = Object.prototype.hasOwnProperty,
                        As = Object.prototype.propertyIsEnumerable,
                        update_invitee_defNormalProp = (e, t, s) => t in e ? xs(e, t, {
                            enumerable: !0,
                            configurable: !0,
                            writable: !0,
                            value: s
                        }) : e[t] = s;
                    async function updateInvitee(e, t) {
                        const s = getRoom(e);
                        if (!s) return;
                        const a = await fetchUsers([t.invitee]);
                        var o, n;
                        a && s.members.update((o = ((e, t) => {
                            for (var s in t || (t = {})) Os.call(t, s) && update_invitee_defNormalProp(e, s, t[s]);
                            if (Es)
                                for (var s of Es(t)) As.call(t, s) && update_invitee_defNormalProp(e, s, t[s]);
                            return e
                        })({}, a[t.invitee]), n = {
                            id: t.invitee,
                            invitationStatus: t.status
                        }, $s(o, Ps(n))))
                    }

                    function getCurrentTime() {
                        return $t.currentTime
                    }
                    async function publishClockUpdate(e, t) {
                        try {
                            await z.publish({
                                service: j.Classroom,
                                path: [D.Sessions, ...e],
                                data: t
                            })
                        } catch (s) {
                            showHttpError(s)
                        }
                    }
                    async function updateRoomTimer(e, t, s, a) {
                        Q.rooms.update({
                            id: e,
                            [t]: {
                                duration: s,
                                state: a,
                                updatedAt: Date.now()
                            }
                        }), isRoomOwner(e) && await publishClockUpdate([e, t], {
                            duration: s,
                            state: a
                        })
                    }
                    async function updateRoomClock(e, t) {
                        const s = getRoom(e);
                        if (!s) return;
                        const {
                            type: a
                        } = t;
                        let {
                            duration: o,
                            state: n
                        } = t;
                        a && s.clockType !== a && (Q.rooms.update({
                            id: e,
                            clockType: a
                        }), isRoomOwner(e) && await publishClockUpdate([e, D.Clock], {
                            type: a
                        }), function logClockChanged(e) {
                            (0, ps.K)(hs.ClassroomClockChanged, {
                                roomId: e
                            })
                        }(e)), n || (n = s.clockType === Z.Stopwatch ? K.Ended : K.Stopped), o || (o = s.clockType === Z.Timer ? `PT${s.getTimerSeconds(getCurrentTime())}S` : s.clockType === Z.Stopwatch ? `PT${s.getStopwatchSeconds(getCurrentTime())}S` : "PT0S"), s.clockType === Z.Timer && await updateRoomTimer(e, D.Timer, o, n), s.clockType === Z.Stopwatch && await updateRoomTimer(e, D.Stopwatch, o, n)
                    }
                    const Ts = (0, a.eI)({
                        init() {
                            Tt.on(At.RoomMessage, this.onRoomMessage), Tt.on(At.ChatMessage, this.onChatMessage)
                        },
                        onChatMessage({
                            channel: e,
                            message: t
                        }) {
                            const s = getRoomByChannel(e);
                            s && "classroom_message" === t.metadata.message_type && async function addChatMessage(e, t) {
                                const s = getRoom(e);
                                s && (await loadChatSenders(s.id, [t]), s.chatMessages.update(t))
                            }(s.id, t.data.message)
                        },
                        onRoomMessage({
                            channel: e,
                            message: t
                        }) {
                            var s;
                            const a = getRoomByChannel(e);
                            if (a) switch (null == (s = t.metadata) ? void 0 : s.message_type) {
                                case "presence_update":
                                    return this.onPresenceUpdate(a, t.data);
                                case "invitation_update":
                                    return this.onInvitationUpdate(a, t.data);
                                case "clock_update":
                                case "timer_update":
                                case "stopwatch_update":
                                    return this.onClockUpdate(a, t.data);
                                case "board_change":
                                    return this.onBoardChange(a, t.data);
                                case "board_create":
                                    return this.onBoardCreate(a, t.data);
                                case "board_delete":
                                    return this.onBoardDelete(a, t.data);
                                case "board_update":
                                    return this.onBoardUpdate(a, t.data);
                                case "board_control_update":
                                case "participant_updated":
                                    return this.onBoardControlUpdate(a, t.data);
                                case "participant_removed":
                                    return this.onMemberRemoved(a, t.data);
                                case "large_classroom_update":
                                    return this.onLargeClassroomUpdate(a, t.data);
                                case "evaluation_settings_update":
                                    return this.onEvaluationSettingsUpdate(a, t.data);
                                case "chat_settings_update":
                                    return this.onChatSettingsUpdate(a, t.data);
                                case "audio_settings_update":
                                    return this.onAudioSettingsUpdate(a, t.data);
                                case "pinned_videos_update":
                                    return this.onPinnedVideosUpdate(a, t.data)
                            }
                        },
                        onPresenceUpdate(e, t) {
                            e.members.update({
                                id: t.userId,
                                presenceStatus: t.presenceStatus
                            }), showPresenceStatusNotification(e, t.userId, t.presenceStatus)
                        },
                        onInvitationUpdate(e, t) {
                            updateInvitee(e.id, t)
                        },
                        onClockUpdate(e, t) {
                            isRoomOwner(e.id) || updateRoomClock(e.id, t)
                        },
                        onBoardCreate(e, t) {
                            isCurrentUser(t.authorId) || e.boards.includes(t.board.id) || addBoard(e.id, t.board)
                        },
                        onBoardChange(e, t) {
                            isCurrentUser(t.userId) || selectBoard(e.id, t.currentBoardId)
                        },
                        onBoardDelete(e, t) {
                            isCurrentUser(t.authorId) || closeBoard(e.id, t.boardId)
                        },
                        onBoardUpdate(e, t) {
                            !async function handleReceivedBoardUpdate(e, t) {
                                const s = e.boards.find(t.id);
                                if (s && !(s.version >= t.version)) {
                                    if (Q.receivedBoardUpdates[e.id] || (Q.receivedBoardUpdates[e.id] = []), Q.receivedBoardUpdates[e.id].push(t), hasPendingBoardUpdate(s.id)) try {
                                        await waitPendingBoardUpdates(s.id)
                                    } catch (a) {
                                        return
                                    }
                                    Q.recoveringBoards.includes(s.id) || applyReceivedBoardUpdates(e.id, s.id)
                                }
                            }(e, t.board)
                        },
                        onBoardControlUpdate(e, t) {
                            const s = e.members.find(t.userId);
                            if (!s) return;
                            const a = s.boardControl !== t.boardControl;
                            e.members.update({
                                id: t.userId,
                                boardControl: t.boardControl,
                                capabilities: t.capabilities
                            }), a && isCurrentUser(t.userId) && (! function showBoardControlNotification(e, t) {
                                const s = {
                                    "%owner%": `<strong>${e.members.find((e=>e.isOwner())).username}</strong>`
                                };
                                let a;
                                switch (t) {
                                    case F.White:
                                        a = (0, V.dW)("%owner% has given you control of this board as White.", s);
                                        break;
                                    case F.Black:
                                        a = (0, V.dW)("%owner% has given you control of this board as Black.", s);
                                        break;
                                    case F.Full:
                                        a = (0, V.dW)("%owner% has given you full control of this board.", s)
                                }
                                a && showToaster({
                                    keys: [Bt.Room, e.id],
                                    icon: "chess-board",
                                    duration: 6e3,
                                    content: a
                                })
                            }(e, t.boardControl), ee.emit(J.BoardControl, {
                                room: e
                            }))
                        },
                        onMemberRemoved(e, t) {
                            e.members.remove(t.userId), isCurrentUser(t.userId) && (! function showMemberRemovedNotification(e) {
                                showToaster({
                                    keys: [Bt.Room, e.id],
                                    icon: "chess-board",
                                    duration: 6e3,
                                    content: (0, V.dW)("You have been removed from the room.")
                                })
                            }(e), closeRoom(e.id))
                        },
                        onLargeClassroomUpdate(e, t) {
                            t.largeClassroom !== e.largeClassroom && ((0, a.Uc)(e, {
                                largeClassroom: t.largeClassroom
                            }), t.autoUpdate && function showLargeClassroomNotification(e) {
                                const t = (0, V.dW)('Looks like you are in a popular Classroom! We\'ve turned on the "Large Classroom" setting to make sure you have optimal audio and video support. You may need to turn your camera and mic back on.');
                                showAlert({
                                    keys: [Bt.Room, e.id],
                                    duration: 5e3,
                                    content: t,
                                    unique: !0
                                })
                            }(e), ee.emit(J.UpdateLargeClassroom, {
                                room: e
                            }))
                        },
                        onEvaluationSettingsUpdate(e, t) {
                            (0, a.Uc)(e, t), ee.emit(J.UpdateEvaluationSettings, {
                                room: e
                            })
                        },
                        onChatSettingsUpdate(e, t) {
                            (0, a.Uc)(e, {
                                chatMuteAll: t.muteAll
                            })
                        },
                        onAudioSettingsUpdate(e, t) {
                            (0, a.Uc)(e, {
                                audioMuteAll: t.muteAll
                            }), ee.emit(J.UpdateAudioSettings, {
                                room: e
                            })
                        },
                        onPinnedVideosUpdate(e, t) {
                            (0, a.Uc)(e, {
                                pinnedVideos: t.pinnedVideos
                            })
                        }
                    });

                    function getRoomIdFromUrl() {
                        return (window.location.pathname.split("/classroom").pop() || "").substr(1)
                    }
                    const Ms = (0, a.eI)({
                            init(e) {
                                window.addEventListener("popstate", this.onClickBack), e.then(this.onRouteChange)
                            },
                            onClickBack() {
                                ys.emit(fs.Back, {
                                    roomId: getRoomIdFromUrl()
                                })
                            },
                            onRouteChange() {
                                ys.emit(fs.Change, {
                                    roomId: getRoomIdFromUrl()
                                })
                            }
                        }),
                        Rs = {
                            isVisible: !1
                        };
                    async function loadBoardStyles() {
                        b.boardStyles || (b.boardStyles = await async function fetchBoardStyles() {
                            const {
                                data: e
                            } = await r.Z.get(i.Z.generate("web_themes_data_callback"));
                            return e
                        }(), b.boardStyles.animationTypes = (b.boardStyles.animationTypes || []).filter((e => "battle" !== e.code)))
                    }
                    async function showSettingsModal() {
                        await loadBoardStyles(), Rs.isVisible = !0
                    }
                    const Is = (0, a.eI)({
                            init() {},
                            onClickSettings() {
                                showSettingsModal()
                            }
                        }),
                        js = {
                            twilioRooms: {},
                            connectingRoomPromise: {}
                        };

                    function getTwilioRoom(e) {
                        return js.twilioRooms[e]
                    }
                    var Bs = (e => (e[e.AudioLevelChanged = 0] = "AudioLevelChanged", e[e.ConnectToRoom = 1] = "ConnectToRoom", e[e.Disconnect = 2] = "Disconnect", e[e.DominantSpeakerChanged = 3] = "DominantSpeakerChanged", e[e.StartAudio = 4] = "StartAudio", e[e.StartingAudio = 5] = "StartingAudio", e[e.StartVideo = 6] = "StartVideo", e[e.StartingVideo = 7] = "StartingVideo", e[e.StopAudio = 8] = "StopAudio", e[e.StopVideo = 9] = "StopVideo", e[e.TrackSubscribed = 10] = "TrackSubscribed", e[e.TrackUnsubscribed = 11] = "TrackUnsubscribed", e))(Bs || {});
                    const Ls = (0, X.I)();
                    async function stopTwilioAudio(e) {
                        const t = getTwilioRoom(e);
                        t.localParticipant.audioTracks.forEach((s => {
                            s.track.stop(), s.unpublish(), Ls.emit(Bs.StopAudio, {
                                roomId: e,
                                twilioRoom: t,
                                localAudioTrack: s.track
                            })
                        }))
                    }
                    async function stopTwilioVideo(e) {
                        const t = getTwilioRoom(e);
                        t.localParticipant.videoTracks.forEach((s => {
                            s.track.stop(), s.unpublish(), Ls.emit(Bs.StopVideo, {
                                roomId: e,
                                twilioRoom: t,
                                localVideoTrack: s.track
                            })
                        }))
                    }

                    function disconnectTwilio(e) {
                        const t = getTwilioRoom(e);
                        t && (stopTwilioVideo(e), stopTwilioAudio(e), t.disconnect(), delete js.twilioRooms[e], Ls.emit(Bs.Disconnect, {
                            roomId: e,
                            twilioRoom: t
                        }))
                    }

                    function getActiveTwilioRoom() {
                        const e = getActiveRoom();
                        return e ? getTwilioRoom(e.id) : null
                    }
                    const Ds = (0, a.eI)({
                        init() {
                            Ls.on(Bs.ConnectToRoom, this.onConnectToRoom), Ls.on(Bs.StopVideo, this.onStopVideo), Ls.on(Bs.StopAudio, this.onStopAudio), ee.on(J.SelectRoom, this.onSelectRoom), window.addEventListener("pagehide", this.onPageHide)
                        },
                        onConnectToRoom({
                            twilioRoom: e
                        }) {
                            e.on("dominantSpeakerChanged", this.onDominantSpeakerChanged), e.on("participantDisconnected", this.onParticipantDisconnected), e.on("trackSubscribed", this.onRoomTrackSubscribed), e.on("trackUnsubscribed", this.onRoomTrackUnsubscribed)
                        },
                        onRoomTrackSubscribed(e, t, s) {
                            const a = getActiveTwilioRoom();
                            a && Ls.emit(Bs.TrackSubscribed, {
                                track: e,
                                twilioRoom: a,
                                publication: t,
                                participant: s
                            })
                        },
                        onRoomTrackUnsubscribed(e, t, s) {
                            const a = getActiveTwilioRoom();
                            a && (Ls.emit(Bs.TrackUnsubscribed, {
                                track: e,
                                twilioRoom: a,
                                publication: t,
                                participant: s
                            }), this.checkIfShouldDisconnect())
                        },
                        onParticipantDisconnected() {
                            this.checkIfShouldDisconnect()
                        },
                        onDominantSpeakerChanged() {
                            Ls.emit(Bs.DominantSpeakerChanged)
                        },
                        onStopVideo() {
                            this.checkIfShouldDisconnect()
                        },
                        onStopAudio() {
                            this.checkIfShouldDisconnect()
                        },
                        checkIfShouldDisconnect() {
                            const e = getActiveTwilioRoom();
                            if (!e) return;
                            let t = !1;
                            e.participants.forEach((e => {
                                t = t || e.tracks.size > 0
                            })), 0 !== e.localParticipant.tracks.size || t || disconnectTwilio(e.name)
                        },
                        onSelectRoom() {
                            const e = getActiveRoom();
                            (function getAllTwilioRooms() {
                                return Object.values(js.twilioRooms)
                            })().forEach((t => {
                                t.name !== (null == e ? void 0 : e.id) && disconnectTwilio(t.name)
                            }))
                        },
                        onPageHide() {
                            const e = getActiveTwilioRoom();
                            e && disconnectTwilio(e.name)
                        }
                    });
                    var Us = (e => (e[e.AutoplayFailed = 0] = "AutoplayFailed", e[e.StartMediaFailed = 1] = "StartMediaFailed", e[e.ToggleVideosPinned = 2] = "ToggleVideosPinned", e))(Us || {});
                    const zs = (0, X.I)();
                    async function attachAudioElement(e, t) {
                        e.appendChild(t);
                        try {
                            await t.play()
                        } catch (s) {
                            zs.emit(Us.AutoplayFailed)
                        }
                    }
                    var qs = s(8445);
                    async function connectTwilio(e) {
                        if (e in js.connectingRoomPromise) return js.connectingRoomPromise[e];
                        if (getTwilioRoom(e)) return Promise.resolve();
                        let t, s;
                        const a = new Promise(((e, a) => {
                            t = e, s = a
                        }));
                        let o;
                        js.connectingRoomPromise[e] = a;
                        try {
                            const {
                                data: {
                                    token: t
                                }
                            } = await r.Z.get(i.Z.generate("web_classroom_callback_twilio_token", {
                                roomId: e
                            }));
                            o = await (0, qs.connect)(t, {
                                name: e,
                                audio: !1,
                                video: !1,
                                dominantSpeaker: !0
                            })
                        } catch (n) {
                            throw s(), n
                        }
                        js.twilioRooms[e] = o, delete js.connectingRoomPromise[e], t(), Ls.emit(Bs.ConnectToRoom, {
                            roomId: e,
                            twilioRoom: o
                        })
                    }
                    var Vs = s(2591);

                    function createAudioElement(e) {
                        const t = document.createElement("audio");
                        return t.autoplay = !0, t.muted = !1, t.srcObject = e, t
                    }

                    function createVideoElement(e) {
                        const t = document.createElement("video");
                        return t.autoplay = !0, t.muted = !0, t.playsInline = !0, t.srcObject = e, t.width = 360, t.height = 240, t
                    }
                    class WebrtcParticipantModel extends a.Hn {
                        constructor() {
                            super(...arguments), this.id = "", this.peerConnection = null, this.isSendingOffer = !1, this.videoElements = [], this.audioElements = []
                        }
                        hasAudio() {
                            return Boolean(this.getAudioTrack())
                        }
                        hasVideo() {
                            return Boolean(this.getVideoTrack())
                        }
                        hasActiveAudio() {
                            var e;
                            return Boolean(!1 === (null == (e = this.getAudioTrack()) ? void 0 : e.muted))
                        }
                        hasActiveVideo() {
                            var e;
                            return Boolean(!1 === (null == (e = this.getVideoTrack()) ? void 0 : e.muted))
                        }
                        getVideoTrack() {
                            var e, t;
                            const s = null == (e = this.peerConnection) ? void 0 : e.getReceivers().filter((e => "video" === e.track.kind)),
                                a = null == s ? void 0 : s.find((e => !1 === e.track.muted));
                            return (null == a ? void 0 : a.track) || (null == (t = null == s ? void 0 : s[0]) ? void 0 : t.track)
                        }
                        getAudioTrack() {
                            var e, t;
                            const s = null == (e = this.peerConnection) ? void 0 : e.getReceivers().filter((e => "audio" === e.track.kind)),
                                a = null == s ? void 0 : s.find((e => !1 === e.track.muted));
                            return (null == a ? void 0 : a.track) || (null == (t = null == s ? void 0 : s[0]) ? void 0 : t.track)
                        }
                        attachVideoElement() {
                            if (this.videoElements.length > 0) return this.videoElements[0];
                            const e = new MediaStream;
                            e.addTrack(this.getVideoTrack());
                            const t = createVideoElement(e);
                            return this.videoElements.push(t), t
                        }
                        detachVideoElements() {
                            const e = [...this.videoElements];
                            return this.videoElements.length = 0, e
                        }
                        attachAudioElement() {
                            if (this.audioElements.length > 0) return this.audioElements[0];
                            const e = new MediaStream;
                            e.addTrack(this.getAudioTrack());
                            const t = createAudioElement(e);
                            return this.audioElements.push(t), t
                        }
                        detachAudioElements() {
                            const e = [...this.audioElements];
                            return this.audioElements.length = 0, e
                        }
                    }
                    class WebrtcRoomModel extends a.Hn {
                        constructor() {
                            super(...arguments), this.id = "", this.localVideoStream = null, this.localVideoElements = [], this.localAudioStream = null, this.localAudioElements = [], this.participants = (0, a.BL)(WebrtcParticipantModel, {
                                key: "id"
                            })
                        }
                        attachLocalVideoElement() {
                            if (this.localVideoElements.length > 0) return this.localVideoElements[0];
                            const e = createVideoElement(this.localVideoStream);
                            return this.localVideoElements.push(e), e
                        }
                        detachLocalVideoElements() {
                            const e = [...this.localVideoElements];
                            return this.localVideoElements.length = 0, e
                        }
                        attachLocalAudioElement() {
                            const e = createAudioElement(this.localVideoStream);
                            return this.localAudioElements.push(e), e
                        }
                        detachLocalAudioElements() {
                            const e = [...this.localAudioElements];
                            return this.localAudioElements.length = 0, e
                        }
                        getRemoteVideoCount() {
                            return this.participants.filter((e => e.hasActiveVideo())).length
                        }
                        isAnyParticipantActive() {
                            return this.participants.some((e => e.hasActiveAudio() || e.hasActiveVideo()))
                        }
                    }
                    const Ns = new URLSearchParams(window.location.hash),
                        Zs = {
                            requestQueue: (0, Vs.j)(!0),
                            uuid: Ns.get("username") || String(Math.random()),
                            webrtcRooms: (0, a.BL)(WebrtcRoomModel, {
                                key: "id"
                            })
                        };

                    function getWebrtcRoom(e) {
                        return Zs.webrtcRooms.find(e)
                    }
                    var Fs = (e => (e[e.AddRoom = 0] = "AddRoom", e[e.AudioLevelChanged = 1] = "AudioLevelChanged", e[e.Connect = 2] = "Connect", e[e.Disconnect = 3] = "Disconnect", e[e.PeerConnection = 4] = "PeerConnection", e[e.StartAudio = 5] = "StartAudio", e[e.StartMediaError = 6] = "StartMediaError", e[e.StartVideo = 7] = "StartVideo", e[e.StopAudio = 8] = "StopAudio", e[e.StopVideo = 9] = "StopVideo", e[e.TrackSubscribed = 10] = "TrackSubscribed", e[e.TrackUnsubscribed = 11] = "TrackUnsubscribed", e))(Fs || {});
                    const Gs = (0, X.I)();

                    function removeWebrtcParticipant(e, t) {
                        const s = e.participants.find(t);
                        if (!s) return;
                        const a = null == s ? void 0 : s.peerConnection,
                            o = (null == a ? void 0 : a.getReceivers()) || [];
                        null == a || a.close(), e.participants.remove(t), o.forEach((t => {
                            Gs.emit(Fs.TrackUnsubscribed, {
                                webrtcRoom: e,
                                track: t.track,
                                participant: s
                            })
                        }))
                    }
                    async function stopWebrtcAudio(e) {
                        var t;
                        const s = getWebrtcRoom(e);
                        s && s.localAudioStream && (s.participants.forEach((e => {
                            var t;
                            null == (t = e.peerConnection) || t.getSenders().filter((e => {
                                var t;
                                return "audio" === (null == (t = e.track) ? void 0 : t.kind)
                            })).forEach((t => {
                                var s, a;
                                null == (s = t.track) || s.stop(), null == (a = e.peerConnection) || a.removeTrack(t)
                            }))
                        })), null == (t = s.localAudioStream) || t.getTracks().forEach((e => e.stop())), s.localAudioStream = null, Gs.emit(Fs.StopAudio, {
                            webrtcRoom: s
                        }))
                    }
                    async function stopWebrtcVideo(e) {
                        var t;
                        const s = getWebrtcRoom(e);
                        s && s.localVideoStream && (s.participants.forEach((e => {
                            var t;
                            null == (t = e.peerConnection) || t.getSenders().filter((e => {
                                var t;
                                return "video" === (null == (t = e.track) ? void 0 : t.kind)
                            })).forEach((t => {
                                var s, a;
                                null == (s = t.track) || s.stop(), null == (a = e.peerConnection) || a.removeTrack(t)
                            }))
                        })), null == (t = s.localVideoStream) || t.getTracks().forEach((e => e.stop())), s.localVideoStream = null, Gs.emit(Fs.StopVideo, {
                            webrtcRoom: s
                        }))
                    }

                    function disconnectWebrtc(e) {
                        const t = getWebrtcRoom(e);
                        if (!t) return;
                        t.participants.map((e => e.id)).forEach((e => removeWebrtcParticipant(t, e))), stopWebrtcVideo(e), stopWebrtcAudio(e), Zs.webrtcRooms.remove(e), Gs.emit(Fs.Disconnect, {
                            webrtcRoom: t
                        })
                    }
                    var Ws = (e => (e.CameraId = "classroom_camera_id", e.MicrophoneId = "classroom_microphone_id", e))(Ws || {}),
                        Hs = (e => (e[e.Disabled = 0] = "Disabled", e[e.Starting = 1] = "Starting", e[e.Enabled = 2] = "Enabled", e))(Hs || {});
                    class VideoParticipantModel extends a.Hn {
                        constructor() {
                            super(...arguments), this.id = "", this.audioState = Hs.Disabled, this.videoState = Hs.Disabled
                        }
                        isAudioStarting() {
                            return this.audioState === Hs.Starting
                        }
                        isAudioEnabled() {
                            return this.audioState === Hs.Enabled
                        }
                        isVideoStarting() {
                            return this.videoState === Hs.Starting
                        }
                        isVideoEnabled() {
                            return this.videoState === Hs.Enabled
                        }
                    }
                    var Ys = (e => (e[e.Single = 0] = "Single", e[e.Multi = 1] = "Multi", e))(Ys || {});
                    class VideoRoomModel extends a.Hn {
                        constructor() {
                            super(...arguments), this.id = "", this.audioState = Hs.Disabled, this.videoState = Hs.Disabled, this.isSpeaking = !1, this.layout = Ys.Single, this.remoteParticipants = (0, a.BL)(VideoParticipantModel, {
                                key: "id"
                            })
                        }
                        isAudioStarting() {
                            return this.audioState === Hs.Starting
                        }
                        isAudioEnabled() {
                            return this.audioState === Hs.Enabled
                        }
                        isVideoStarting() {
                            return this.videoState === Hs.Starting
                        }
                        isVideoEnabled() {
                            return this.videoState === Hs.Enabled
                        }
                        userHasAudio(e) {
                            const t = this.remoteParticipants.find(e);
                            return null == t ? void 0 : t.isAudioEnabled()
                        }
                        userHasVideo(e) {
                            const t = this.remoteParticipants.find(e);
                            return null == t ? void 0 : t.isVideoEnabled()
                        }
                        isMultiLayout() {
                            return this.layout === Ys.Multi
                        }
                        isSingleLayout() {
                            return this.layout === Ys.Single
                        }
                    }
                    var Ks = s(1681);
                    const Qs = {
                        autoplayFailedClickTimestamp: null,
                        cameraId: Ks.Z.get(Ws.CameraId),
                        microphoneId: Ks.Z.get(Ws.MicrophoneId),
                        videoContainerMounted: !1,
                        videoRooms: (0, a.BL)(VideoRoomModel, {
                            key: "id"
                        }),
                        videosPinned: !0
                    };

                    function getVideoRoom(e) {
                        return Qs.videoRooms.find(e)
                    }

                    function getActiveVideoRoom() {
                        const e = getActiveRoom();
                        return e ? getVideoRoom(e.id) : null
                    }

                    function getAudioContainerElement() {
                        return document.getElementById("audio-container")
                    }

                    function isVideosPinned() {
                        return Qs.videosPinned
                    }

                    function participantHasVideo(e) {
                        let t = !1;
                        return e.videoTracks.forEach((e => {
                            t = e.isSubscribed || t
                        })), t
                    }
                    async function publishTwilioNotification({
                        roomId: e,
                        userId: t,
                        media: s,
                        type: a
                    }) {
                        await z.publish({
                            service: j.Classroom,
                            path: [D.Sessions, e, D.Notifications, D.Twilio],
                            data: {
                                userId: t,
                                media: s,
                                type: a
                            }
                        })
                    }
                    var Js = (e => (e[e.Audio = 0] = "Audio", e[e.Video = 1] = "Video", e))(Js || {});

                    function getMicrophoneId() {
                        return Qs.microphoneId
                    }
                    const Xs = window.AudioContext ? new window.AudioContext : null;
                    async function pollAudioLevel(e, t) {
                        if (!Xs) return;
                        await Xs.resume();
                        const s = Xs.createAnalyser();
                        s.fftSize = 1024, s.smoothingTimeConstant = .5;
                        const a = new MediaStream([e]);
                        Xs.createMediaStreamSource(a).connect(s);
                        const o = new Uint8Array(s.frequencyBinCount);
                        let n;
                        ! function checkLevel() {
                            s.getByteFrequencyData(o);
                            const a = function rootMeanSquare(e) {
                                    const t = e.reduce(((e, t) => e + t * t), 0);
                                    return Math.sqrt(t / e.length)
                                }(o),
                                r = a && Math.log2(a),
                                i = Math.ceil(10 * r / 8);
                            n !== i && (n = i, t(n)), "live" === e.readyState ? setTimeout(checkLevel, 150) : t(0)
                        }()
                    }

                    function addWebrtcParticipant(e, t) {
                        if (e.participants.find(t)) return;
                        const s = new RTCPeerConnection({
                            iceServers: [{
                                urls: "stun:stun.stunprotocol.org"
                            }]
                        });
                        e.participants.update({
                            id: t,
                            peerConnection: s
                        }), Gs.emit(Fs.PeerConnection, {
                            participantId: t,
                            webrtcRoom: e,
                            peerConnection: s
                        })
                    }
                    async function connectWebrtc(e) {
                        const t = getRoom(e);
                        if (!t) return;
                        const s = Zs.webrtcRooms.update({
                            id: e
                        });
                        t.members.forEach((e => {
                            e.id !== getCurrentUser().id && (s.participants.find(e.id) || addWebrtcParticipant(s, e.id))
                        })), Gs.emit(Fs.Connect, {
                            webrtcRoom: s
                        })
                    }
                    async function toggleAudio(e, t) {
                        if (!t) return void(e.largeClassroom ? stopTwilioAudio(e.id) : stopWebrtcAudio(e.id));
                        let s, a = !0;
                        getMicrophoneId() && (a = {
                            deviceId: getMicrophoneId()
                        });
                        try {
                            s = await navigator.mediaDevices.getUserMedia({
                                audio: a
                            })
                        } catch (o) {
                            return void zs.emit(Us.StartMediaFailed, {
                                error: o,
                                media: Js.Audio
                            })
                        }
                        e.largeClassroom ? async function startTwilioAudio(e, t) {
                            Ls.emit(Bs.StartingAudio, {
                                roomId: e
                            });
                            const s = t.getTracks().map((e => new qs.LocalAudioTrack(e)))[0];
                            await connectTwilio(e);
                            const a = getTwilioRoom(e);
                            a.localParticipant.publishTrack(s), pollAudioLevel(s.mediaStreamTrack, (t => {
                                Ls.emit(Bs.AudioLevelChanged, {
                                    roomId: e,
                                    twilioRoom: a,
                                    level: t
                                })
                            })), Ls.emit(Bs.StartAudio, {
                                roomId: e,
                                twilioRoom: a,
                                localAudioTrack: s
                            })
                        }(e.id, s): async function startWebrtcAudio(e, t) {
                            await connectWebrtc(e);
                            const s = Zs.webrtcRooms.update({
                                id: e,
                                localAudioStream: t
                            });
                            s.participants.forEach((e => {
                                t.getTracks().forEach((s => {
                                    e.peerConnection.addTrack(s, t)
                                }))
                            })), t.getTracks().forEach((e => {
                                pollAudioLevel(e, (e => {
                                    Gs.emit(Fs.AudioLevelChanged, {
                                        webrtcRoom: s,
                                        level: e
                                    })
                                }))
                            })), Gs.emit(Fs.StartAudio, {
                                webrtcRoom: s
                            })
                        }(e.id, s)
                    }

                    function getCameraId() {
                        return Qs.cameraId
                    }
                    async function toggleVideo(e, t) {
                        if (!t) return void(e.largeClassroom ? stopTwilioVideo(e.id) : stopWebrtcVideo(e.id));
                        let s;
                        const a = {
                            height: {
                                ideal: 270
                            },
                            width: {
                                ideal: 480
                            }
                        };
                        getCameraId() && (a.deviceId = getCameraId());
                        try {
                            s = await navigator.mediaDevices.getUserMedia({
                                video: a
                            })
                        } catch (o) {
                            return void zs.emit(Us.StartMediaFailed, {
                                error: o,
                                media: Js.Video
                            })
                        }
                        e.largeClassroom ? async function startTwilioVideo(e, t) {
                            Ls.emit(Bs.StartingVideo, {
                                roomId: e
                            });
                            const s = t.getTracks().map((e => new qs.LocalVideoTrack(e)))[0];
                            await connectTwilio(e);
                            const a = getTwilioRoom(e);
                            await a.localParticipant.publishTrack(s), Ls.emit(Bs.StartVideo, {
                                roomId: e,
                                twilioRoom: a,
                                localVideoTrack: s
                            })
                        }(e.id, s): async function startWebrtcVideo(e, t) {
                                await connectWebrtc(e);
                                const s = Zs.webrtcRooms.update({
                                    id: e,
                                    localVideoStream: t
                                });
                                s.participants.forEach((e => {
                                    t.getTracks().forEach((s => e.peerConnection.addTrack(s, t)))
                                })), Gs.emit(Fs.StartVideo, {
                                    webrtcRoom: s
                                })
                            }(e.id, s),
                            function logVideoStarted(e) {
                                (0, ps.K)(hs.ClassroomVideoStarted, {
                                    roomId: e
                                })
                            }(e.id)
                    }

                    function toggleVideos(e) {
                        toggleBodyClass(rt.BodyClass.Videos, e)
                    }
                    var ea = (e => (e.Audio = "audio", e.Video = "video", e))(ea || {}),
                        ta = (e => (e.Notify = "notify", e.Start = "start", e.Stop = "stop", e))(ta || {}),
                        sa = (e => (e.Audio = "audio", e.Video = "video", e))(sa || {}),
                        aa = (e => (e.Start = "start", e.Stop = "stop", e))(aa || {});
                    const oa = (0, a.eI)({
                        init() {
                            Ls.on(Bs.ConnectToRoom, this.onTwilioConnectToRoom), Ls.on(Bs.StopVideo, this.onTwilioStopVideo), Ls.on(Bs.StartVideo, this.onTwilioStartVideo), Ls.on(Bs.StartingVideo, this.onTwilioStartingVideo), Ls.on(Bs.StartAudio, this.onTwilioStartAudio), Ls.on(Bs.StartingAudio, this.onTwilioStartingAudio), Ls.on(Bs.StopAudio, this.onTwilioStopAudio), Ls.on(Bs.TrackSubscribed, this.onTwilioRoomTrackSubscribed), Ls.on(Bs.TrackUnsubscribed, this.onTwilioRoomTrackUnsubscribed), Ls.on(Bs.Disconnect, this.onTwilioDisconnect), Ls.on(Bs.AudioLevelChanged, this.onAudioLevelChange), Gs.on(Fs.Connect, this.onWebrtcConnect), Gs.on(Fs.Disconnect, this.onWebrtcDisconnect), Gs.on(Fs.TrackSubscribed, this.onWebrtcTrackSubscribed), Gs.on(Fs.TrackUnsubscribed, this.onWebrtcTrackUnsubscribed), Gs.on(Fs.StartVideo, this.onWebrtcStartVideo), Gs.on(Fs.StopVideo, this.onWebrtcStopVideo), Gs.on(Fs.StartAudio, this.onWebrtcStartAudio), Gs.on(Fs.StopAudio, this.onWebrtcStopAudio), Gs.on(Fs.AudioLevelChanged, this.onAudioLevelChange), Gs.on(Fs.Connect, this.toggleVideosLayout), Gs.on(Fs.Disconnect, this.toggleVideosLayout), Ls.on(Bs.ConnectToRoom, this.toggleVideosLayout), Ls.on(Bs.Disconnect, this.toggleVideosLayout), zs.on(Us.ToggleVideosPinned, this.toggleVideosLayout), zs.on(Us.StartMediaFailed, this.onStartMediaFailed), Tt.on(At.RoomMessage, this.onRoomMessage), Tt.on(At.WebrtcUserMessage, this.onUserMessage), ee.on(J.SelectRoom, this.onSelectRoom), ee.on(J.UpdateLargeClassroom, this.onUpdateLargeClassroom), ee.on(J.UpdateAudioSettings, this.onUpdateAudioSettings), zs.on(Us.AutoplayFailed, this.onAutoplayFailed)
                        },
                        onSelectRoom() {
                            const e = getActiveRoom(),
                                t = getActiveVideoRoom();
                            e && !t && async function checkVideoParticipants(e) {
                                const {
                                    data: {
                                        participants: t
                                    }
                                } = await r.Z.get(i.Z.generate("web_classroom_callback_twilio_room", {
                                    roomId: e.id
                                }));
                                (null == t ? void 0 : t.length) > 0 && t.some((e => e.id !== getCurrentUser().id)) && connectTwilio(e.id)
                            }(e)
                        },
                        onAudioLevelChange({
                            level: e
                        }) {
                            const t = getActiveVideoRoom();
                            if (!t) return;
                            const s = e > 6;
                            t.isSpeaking !== s && Qs.videoRooms.update({
                                id: t.id,
                                isSpeaking: s
                            })
                        },
                        onRoomMessage({
                            channel: e,
                            message: t
                        }) {
                            var s;
                            if ("twilio_notification" !== (null == (s = t.metadata) ? void 0 : s.message_type)) return;
                            const a = e.split("/").pop(),
                                {
                                    data: o
                                } = t,
                                n = getActiveRoom();
                            if (n && a === n.id) switch (o.type) {
                                case ta.Notify:
                                    getVideoRoom(a) || connectTwilio(a);
                                    break;
                                case ta.Start:
                                    o.userId === getCurrentUser().id && o.media === ea.Audio && toggleAudio(n, !0), o.userId === getCurrentUser().id && o.media === ea.Video && toggleVideo(n, !0);
                                    break;
                                case ta.Stop:
                                    o.userId === getCurrentUser().id && o.media === ea.Audio && toggleAudio(n, !1), o.userId === getCurrentUser().id && o.media === ea.Video && toggleVideo(n, !1)
                            }
                        },
                        onUserMessage({
                            message: e
                        }) {
                            if ("webrtc_command" !== e.metadata.message_type) return;
                            const {
                                data: t
                            } = e, s = getActiveRoom();
                            if (s && t.sessionId === s.id) switch (t.type) {
                                case aa.Start:
                                    t.recipientId === getCurrentUser().id && t.media === sa.Audio && toggleAudio(s, !0), t.recipientId === getCurrentUser().id && t.media === sa.Video && toggleVideo(s, !0);
                                    break;
                                case aa.Stop:
                                    t.recipientId === getCurrentUser().id && t.media === sa.Audio && toggleAudio(s, !1), t.recipientId === getCurrentUser().id && t.media === sa.Video && toggleVideo(s, !1)
                            }
                        },
                        onTwilioConnectToRoom({
                            roomId: e,
                            twilioRoom: t
                        }) {
                            const s = [];
                            t.participants.forEach((e => {
                                s.push({
                                    id: e.identity,
                                    audioState: e.audioTracks.size > 0 ? Hs.Enabled : Hs.Disabled,
                                    videoState: participantHasVideo(e) ? Hs.Enabled : Hs.Disabled
                                })
                            }));
                            Qs.videoRooms.update({
                                id: e
                            }).remoteParticipants.reset(s)
                        },
                        onAutoplayFailed() {
                            ! function showAutoplayFailedNotification() {
                                showToaster({
                                    keys: [Bt.AutoplayFailed],
                                    unique: !0,
                                    duration: 0,
                                    content: (0, V.dW)("Please click anywhere on the page to enable audio")
                                })
                            }(), Qs.autoplayFailedClickTimestamp && (0, Lt.T)("Autoplay failed after click", {
                                timeSinceClick: Date.now() - Qs.autoplayFailedClickTimestamp
                            }), window.addEventListener("click", (() => {
                                if (function hideAutoplayFailedNotification() {
                                        hideNotifications({
                                            keys: [Bt.AutoplayFailed]
                                        })
                                    }(), Qs.autoplayFailedClickTimestamp = Date.now(), getAudioContainerElement()) {
                                    Array.from(getAudioContainerElement().children).forEach((e => e.play()))
                                }
                            }), {
                                once: !0
                            })
                        },
                        async onTwilioRoomTrackSubscribed({
                            track: e,
                            twilioRoom: t,
                            participant: s
                        }) {
                            const a = Qs.videoRooms.find(t.name);
                            "audio" === e.kind && (attachAudioElement(getAudioContainerElement(), e.attach()), a.remoteParticipants.update({
                                id: s.identity,
                                audioState: Hs.Enabled
                            })), "video" === e.kind && a.remoteParticipants.update({
                                id: s.identity,
                                videoState: Hs.Enabled
                            })
                        },
                        onTwilioRoomTrackUnsubscribed({
                            track: e,
                            twilioRoom: t,
                            participant: s
                        }) {
                            const a = Qs.videoRooms.find(t.name);
                            if ("audio" === e.kind) {
                                e.detach().forEach((e => e.remove())), a.remoteParticipants.update({
                                    id: s.identity,
                                    audioState: Hs.Disabled
                                })
                            }
                            "video" === e.kind && a.remoteParticipants.update({
                                id: s.identity,
                                videoState: Hs.Disabled
                            })
                        },
                        onTwilioStartingVideo({
                            roomId: e
                        }) {
                            Qs.videoRooms.update({
                                id: e,
                                videoState: Hs.Starting
                            })
                        },
                        onTwilioStartVideo({
                            roomId: e
                        }) {
                            Qs.videoRooms.update({
                                id: e,
                                videoState: Hs.Enabled
                            }), publishTwilioNotification({
                                roomId: e,
                                userId: getCurrentUser().id,
                                type: ta.Notify,
                                media: ea.Video
                            })
                        },
                        onTwilioStopVideo({
                            roomId: e
                        }) {
                            getVideoRoom(e) && Qs.videoRooms.update({
                                id: e,
                                videoState: Hs.Disabled
                            })
                        },
                        onTwilioStartAudio({
                            roomId: e
                        }) {
                            Qs.videoRooms.update({
                                id: e,
                                audioState: Hs.Enabled
                            }), publishTwilioNotification({
                                roomId: e,
                                userId: getCurrentUser().id,
                                type: ta.Notify,
                                media: ea.Audio
                            })
                        },
                        onTwilioStartingAudio({
                            roomId: e
                        }) {
                            Qs.videoRooms.update({
                                id: e,
                                audioState: Hs.Starting
                            })
                        },
                        onTwilioStopAudio({
                            localAudioTrack: e,
                            roomId: t
                        }) {
                            e.detach().forEach((e => e.remove())), getVideoRoom(t) && Qs.videoRooms.update({
                                id: t,
                                audioState: Hs.Disabled
                            })
                        },
                        onTwilioDisconnect({
                            roomId: e
                        }) {
                            Qs.videoRooms.remove(e)
                        },
                        onWebrtcConnect({
                            webrtcRoom: e
                        }) {
                            const t = [];
                            e.participants.forEach((e => {
                                t.push({
                                    id: e.id,
                                    audioState: e.hasActiveAudio() ? Hs.Enabled : Hs.Disabled,
                                    videoState: e.hasActiveVideo() ? Hs.Enabled : Hs.Disabled
                                })
                            }));
                            Qs.videoRooms.update({
                                id: e.id
                            }).remoteParticipants.reset(t)
                        },
                        onWebrtcDisconnect({
                            webrtcRoom: e
                        }) {
                            Qs.videoRooms.remove(e.id)
                        },
                        onWebrtcTrackSubscribed({
                            webrtcRoom: e,
                            track: t,
                            participant: s
                        }) {
                            const a = Qs.videoRooms.find(e.id);
                            "audio" === t.kind && (attachAudioElement(getAudioContainerElement(), s.attachAudioElement()), a.remoteParticipants.update({
                                id: s.id,
                                audioState: Hs.Enabled
                            })), "video" === t.kind && a.remoteParticipants.update({
                                id: s.id,
                                videoState: Hs.Enabled
                            })
                        },
                        onWebrtcTrackUnsubscribed({
                            webrtcRoom: e,
                            track: t,
                            participant: s
                        }) {
                            const a = Qs.videoRooms.find(e.id);
                            if (a) {
                                if ("audio" === t.kind) {
                                    s.detachAudioElements().forEach((e => e.remove())), a.remoteParticipants.update({
                                        id: s.id,
                                        audioState: Hs.Disabled
                                    })
                                }
                                "video" === t.kind && a.remoteParticipants.update({
                                    id: s.id,
                                    videoState: Hs.Disabled
                                })
                            }
                        },
                        onWebrtcStartVideo({
                            webrtcRoom: e
                        }) {
                            Qs.videoRooms.update({
                                id: e.id,
                                videoState: Hs.Enabled
                            })
                        },
                        onWebrtcStartAudio({
                            webrtcRoom: e
                        }) {
                            Qs.videoRooms.update({
                                id: e.id,
                                audioState: Hs.Enabled
                            })
                        },
                        onWebrtcStopAudio({
                            webrtcRoom: e
                        }) {
                            e.detachLocalAudioElements().forEach((e => e.remove())), getVideoRoom(e.id) && Qs.videoRooms.update({
                                id: e.id,
                                audioState: Hs.Disabled
                            })
                        },
                        onWebrtcStopVideo({
                            webrtcRoom: e
                        }) {
                            getVideoRoom(e.id) && Qs.videoRooms.update({
                                id: e.id,
                                videoState: Hs.Disabled
                            })
                        },
                        onUpdateLargeClassroom({
                            room: e
                        }) {
                            e.largeClassroom ? disconnectWebrtc(e.id) : disconnectTwilio(e.id)
                        },
                        toggleVideosLayout() {
                            const e = getActiveVideoRoom(),
                                t = getActiveRoom();
                            toggleVideos(!(!e || !t) && isVideosPinned())
                        },
                        onStartMediaFailed({
                            error: e,
                            media: t
                        }) {
                            ! function showStartMediaFailedNotification(e, t) {
                                let s = "";
                                switch (e.name) {
                                    case "NotAllowedError":
                                    case "PermissionDeniedError":
                                        s = (0, V.dW)("Please check your browser settings to enable permission to use your microphone and camera.");
                                        break;
                                    case "NotReadableError":
                                    case "TrackStartError":
                                        s = t === Js.Audio ? (0, V.dW)("It looks like your microphone is being used by another application.") : (0, V.dW)("It looks like your camera is being used by another application.");
                                        break;
                                    case "NotFoundError":
                                    case "DevicesNotFoundError":
                                        s = t === Js.Audio ? (0, V.dW)("We couldn't find your microphone. Please make sure it is plugged in and powered on.") : (0, V.dW)("We couldn't find your camera. Please make sure it is plugged in and powered on.");
                                        break;
                                    default:
                                        s = t === Js.Audio ? (0, V.dW)("We were not able to enable your microphone. Please make sure it is powered on and that your browser is able to access it.") : (0, V.dW)("We were not able to enable your camera. Please make sure it is powered on and that your browser is able to access it.")
                                }
                                showError(s)
                            }(e, t)
                        },
                        onUpdateAudioSettings({
                            room: e
                        }) {
                            e.audioMuteAll && !isRoomOwner(e.id) && toggleAudio(e, !1)
                        }
                    });

                    function getActiveWebrtcRoom() {
                        const e = getActiveRoom();
                        return e ? getWebrtcRoom(e.id) : null
                    }
                    const na = (0, a.eI)({
                            init() {
                                isLoggedIn() && (Tt.on(At.WebrtcUserMessage, this.onWebrtcUserMessage), Tt.on(At.RoomMessage, this.onWebrtcRoomMessage), Gs.on(Fs.PeerConnection, this.onPeerConnection), Gs.on(Fs.StopAudio, this.onStopAudio), Gs.on(Fs.StopVideo, this.onStopVideo), Gs.on(Fs.TrackUnsubscribed, this.onTrackUnsubscribed), ee.on(J.SelectRoom, this.onSelectRoom), window.addEventListener("pagehide", this.onPageHide), async function subscribeUserChannel() {
                                    return subscribe_channel_subscribeChannel([j.Classroom, D.Users, getCurrentUser().id].join("/"), At.WebrtcUserMessage)
                                }())
                            },
                            onPeerConnection({
                                participantId: e,
                                peerConnection: t,
                                webrtcRoom: s
                            }) {
                                t.addEventListener("icecandidate", this.onPeerConnectionIceCandidate.bind(this, s, e)), t.addEventListener("track", this.onPeerConnectionTrack.bind(this, s, e)), t.addEventListener("negotiationneeded", this.onPeerConnectionNegotiationNeeded.bind(this, s, e)), t.addEventListener("connectionstatechange", this.onPeerConnectionStateChange.bind(this, s, e)), t.addEventListener("iceconnectionstatechange", this.onPeerIceConnectionStateChange.bind(this, s, e))
                            },
                            onPeerConnectionIceCandidate(e, t, s) {
                                s.candidate && async function sendIceCandidate(e, t, s) {
                                    await Zs.requestQueue.add(z.publish, {
                                        service: j.Classroom,
                                        path: [D.Sessions, e.id, D.Webrtc, D.Users, t],
                                        data: {
                                            type: "candidate",
                                            payload: JSON.stringify(s)
                                        }
                                    })
                                }(e, t, s.candidate)
                            },
                            onPeerConnectionStateChange(e, t) {
                                const s = e.participants.find(t),
                                    a = s.peerConnection;
                                (null == a ? void 0 : a.connectionState) && ["disconnected", "failed", "closed"].includes(null == a ? void 0 : a.connectionState) && this.onParticipantDisconnected(e, s)
                            },
                            onPeerIceConnectionStateChange(e, t) {
                                const s = e.participants.find(t),
                                    a = s.peerConnection;
                                (null == a ? void 0 : a.iceConnectionState) && ["failed", "closed"].includes(null == a ? void 0 : a.iceConnectionState) && this.onParticipantDisconnected(e, s)
                            },
                            onParticipantDisconnected(e, t) {
                                removeWebrtcParticipant(e, t.id), this.checkIfShouldDisconnect()
                            },
                            onPeerConnectionTrack(e, t, s) {
                                const a = s.streams[0],
                                    o = e.participants.find(t);
                                o && (a.addEventListener("removetrack", (t => {
                                    Gs.emit(Fs.TrackUnsubscribed, {
                                        webrtcRoom: e,
                                        track: t.track,
                                        participant: o
                                    })
                                })), s.track.addEventListener("unmute", (() => {
                                    Gs.emit(Fs.TrackSubscribed, {
                                        webrtcRoom: e,
                                        track: s.track,
                                        participant: o
                                    })
                                })), s.track.addEventListener("mute", (() => {
                                    Gs.emit(Fs.TrackUnsubscribed, {
                                        webrtcRoom: e,
                                        track: s.track,
                                        participant: o
                                    })
                                })))
                            },
                            onPeerConnectionNegotiationNeeded(e, t) {
                                !async function sendSdpOffer(e, t) {
                                    const s = null == e ? void 0 : e.participants.find(t);
                                    if (!s) return;
                                    const a = s.peerConnection;
                                    s.isSendingOffer = !0;
                                    try {
                                        await a.setLocalDescription(), await Zs.requestQueue.add(z.publish, {
                                            service: j.Classroom,
                                            path: [D.Sessions, e.id, D.Webrtc, D.Users, t],
                                            data: {
                                                type: "offer",
                                                payload: JSON.stringify(a.localDescription)
                                            }
                                        })
                                    } finally {
                                        s.isSendingOffer = !1
                                    }
                                }(e, t)
                            },
                            async onWebrtcSdpMessage({
                                message: e
                            }) {
                                var t;
                                const s = e.data.sessionId,
                                    a = e.data.userId,
                                    o = JSON.parse(e.data.payload),
                                    n = e.data.type,
                                    r = "offer" === n,
                                    i = getActiveRoom();
                                if ((null == i ? void 0 : i.id) !== s) return;
                                let l = getWebrtcRoom(s),
                                    c = null == l ? void 0 : l.participants.find(a);
                                if (!(l && c || r)) return;
                                l || (connectWebrtc(s), l = getWebrtcRoom(s)), c || (addWebrtcParticipant(l, a), c = l.participants.find(a));
                                const d = c.isSendingOffer || "stable" !== (null == (t = c.peerConnection) ? void 0 : t.signalingState),
                                    u = getCurrentUser().id < c.id;
                                if (r && d && !u) return;
                                const m = c.peerConnection;
                                await m.setRemoteDescription(new RTCSessionDescription(o)), "offer" === n && (await m.setLocalDescription(), async function sendSdpAnswer(e, t) {
                                    const s = null == e ? void 0 : e.participants.find(t);
                                    if (!s) return;
                                    const a = s.peerConnection;
                                    await Zs.requestQueue.add(z.publish, {
                                        service: j.Classroom,
                                        path: [D.Sessions, e.id, D.Webrtc, D.Users, t],
                                        data: {
                                            type: "answer",
                                            payload: JSON.stringify(a.localDescription)
                                        }
                                    })
                                }(l, a))
                            },
                            onWebrtcCandidateMessage({
                                message: e
                            }) {
                                var t, s;
                                const a = e.data.sessionId,
                                    o = e.data.userId,
                                    n = JSON.parse(e.data.payload),
                                    r = null == (t = getWebrtcRoom(a)) ? void 0 : t.participants.find(o);
                                r && (null == (s = r.peerConnection) || s.addIceCandidate(new RTCIceCandidate(n)))
                            },
                            onWebrtcUserMessage({
                                message: e
                            }) {
                                if ("webrtc_user_notification" === e.metadata.message_type) "offer" === e.data.type || "answer" === e.data.type ? this.onWebrtcSdpMessage({
                                    message: e
                                }) : "candidate" === e.data.type && this.onWebrtcCandidateMessage({
                                    message: e
                                })
                            },
                            onSelectRoom() {
                                const e = getActiveRoom();
                                e && async function publishConnectNotification(e) {
                                        await z.publish({
                                            service: j.Classroom,
                                            path: [D.Sessions, e, D.Webrtc, D.Notifications],
                                            data: {
                                                type: "connect"
                                            }
                                        })
                                    }(e.id),
                                    function getWebrtcRooms() {
                                        return Object.values(Zs.webrtcRooms)
                                    }().forEach((t => {
                                        t.id !== (null == e ? void 0 : e.id) && disconnectWebrtc(t.id)
                                    }))
                            },
                            onWebrtcRoomMessage({
                                message: e
                            }) {
                                if ("webrtc_notification" !== e.metadata.message_type) return;
                                const t = e.data.sessionId,
                                    s = getActiveWebrtcRoom();
                                if ((null == s ? void 0 : s.id) === t && "connect" === e.data.type)(s.localVideoStream || s.localAudioStream) && async function reconnectParticipant(e, t) {
                                    removeWebrtcParticipant(e, t), addWebrtcParticipant(e, t);
                                    const s = e.participants.find(t);
                                    e.localAudioStream && e.localAudioStream.getTracks().forEach((t => {
                                        s.peerConnection.addTrack(t, e.localAudioStream)
                                    })), e.localVideoStream && e.localVideoStream.getTracks().forEach((t => {
                                        s.peerConnection.addTrack(t, e.localVideoStream)
                                    }))
                                }(s, e.data.userId)
                            },
                            onStopAudio() {
                                this.checkIfShouldDisconnect()
                            },
                            onStopVideo() {
                                this.checkIfShouldDisconnect()
                            },
                            onTrackUnsubscribed() {
                                this.checkIfShouldDisconnect()
                            },
                            checkIfShouldDisconnect() {
                                const e = getActiveWebrtcRoom();
                                e && (e.localAudioStream || e.localVideoStream || e.isAnyParticipantActive() || disconnectWebrtc(e.id))
                            },
                            onPageHide() {
                                const e = getActiveWebrtcRoom();
                                e && disconnectWebrtc(e.id)
                            }
                        }),
                        ra = (0, a.eI)({
                            init() {
                                window.addEventListener("resize", this.onWindowResize)
                            },
                            onWindowResize: w((() => {
                                const e = document.getElementById("board-layout-sidebar");
                                e && (Ie.sidebarWidth = e.getBoundingClientRect().width)
                            }), 250)
                        });
                    var ia = [xt, Pt, qt, _s, Ts, Ms, Is, Ds, oa, na, ra];

                    function formatClock(e) {
                        let t = e;
                        if (t <= 0) return "0:00";
                        let s = 0,
                            a = 0,
                            o = 0;
                        const n = t <= 200;
                        return t >= 10 && (o = Math.floor(t / 10), t -= 10 * o), o >= 60 && (a = Math.floor(o / 60), o -= 60 * a), o < 10 && (o = `0${o}`), a >= 60 && (s = Math.floor(a / 60), a -= 60 * s), s ? (a < 10 && (a = `0${a}`), `${s}:${a}:${o}`) : n ? `${a}:${o}.${Math.floor(t)}` : `${a}:${o}`
                    }

                    function getActiveChessboardElementId() {
                        const e = l.getActiveChessboardId();
                        if (!e) throw new Error("No active chessboard");
                        return `board-${e}`
                    }
                    const la = {
                        countries: null
                    };

                    function getCountryOptions() {
                        return la.countries ? sortBy([{
                            value: "",
                            label: `-- ${(0,V.dW)("Country")} --`
                        }, {
                            value: "fd",
                            label: (0, V.dW)("FIDE")
                        }, ...Object.keys(la.countries).map((e => ({
                            label: la.countries[e],
                            value: e
                        })))], "label") : []
                    }

                    function getTimeControl(e) {
                        let t, s = "600",
                            a = 600,
                            o = 0,
                            n = "live";
                        switch (typeof e) {
                            case "string":
                                e.includes("d") ? (a = Number(e.replace("d", "")), n = "daily") : /^[0-9]+\/[0-9]+$/.test(e) ? (a = Number(e.split(/\//).pop()) / 86400, n = "daily") : (t = e.split(/\+|\|/), a = Number(t[0]), o = Number(t[1] || 0));
                                break;
                            case "object":
                                a = Number(e.baseTime || 0), o = Number(e.timeIncrement || 0), n = e.timeType || n;
                                break;
                            case "number":
                                a = e
                        }
                        return (!o || o < 0 || o > 60) && (o = 0), a > 7200 && (a = 7200), s = "daily" === n ? `${a}d` : o ? `${a}|${o}` : `${a}`, {
                            key: s,
                            baseTime: a,
                            timeIncrement: o,
                            timeType: n
                        }
                    }
                    var ca = (e => (e.Top = "top", e.Bottom = "bottom", e))(ca || {}),
                        da = s(6910),
                        ua = s(7203),
                        ma = {
                            name: "Avatar",
                            props: {
                                alt: {
                                    type: String,
                                    default: ""
                                },
                                src: {
                                    type: String,
                                    default: ""
                                }
                            },
                            emits: ["click"],
                            data: () => ({
                                failed: !1,
                                failedSrcSet: !1,
                                defaultAvatar: (0, da.n)("bundles/web/images/user-image.svg")
                            }),
                            computed: {
                                avatarSrcset() {
                                    return this.failedSrcSet ? null : (0, ua.b)(this.avatarUrl)
                                },
                                avatarUrl() {
                                    return this.failed || !this.src ? this.defaultAvatar : this.src
                                }
                            },
                            watch: {
                                src(e, t) {
                                    e !== t && (this.failed = !1, this.failedSrcSet = !1)
                                }
                            },
                            methods: {
                                onError() {
                                    this.avatarSrcset ? this.failedSrcSet = !0 : this.failed = !0
                                }
                            }
                        },
                        ha = {
                            component: "avatar-component"
                        };
                    var pa = (0, ns.Z)(ma, (function() {
                        var e = this,
                            t = e.$createElement;
                        return (e._self._c || t)("img", {
                            class: e.$style.component,
                            attrs: {
                                "data-cy": "avatar",
                                alt: e.alt,
                                src: e.avatarUrl,
                                srcset: e.avatarSrcset,
                                width: "50",
                                height: "50"
                            },
                            on: {
                                error: e.onError,
                                click: function(t) {
                                    return e.$emit("click", t)
                                }
                            }
                        })
                    }), [], !1, (function avatar_injectStyles(e) {
                        this.$style = ha.locals || ha
                    }), null, null).exports;

                    function formatCurrentTime(e) {
                        const t = e.getHours(),
                            s = e.getMinutes(),
                            a = e.getSeconds();
                        return t >= 12 ? (0, V.dW)("%hours%:%minutes%:%seconds% pm", {
                            "%hours%": ("0" + (12 === t ? 12 : t - 12)).substr(-2),
                            "%minutes%": `0${s}`.substr(-2),
                            "%seconds%": `0${a}`.substr(-2)
                        }) : (0, V.dW)("%hours%:%minutes%:%seconds% am", {
                            "%hours%": `0${t}`.substr(-2),
                            "%minutes%": `0${s}`.substr(-2),
                            "%seconds%": `0${a}`.substr(-2)
                        })
                    }

                    function formatTimer(e) {
                        let t = 0,
                            s = 0,
                            a = e;
                        return a >= 60 && (s = Math.floor(a / 60), a -= 60 * s), s >= 60 && (t = Math.floor(s / 60), s -= 60 * t), (0, V.dW)("%hours%:%minutes%:%seconds%", {
                            "%hours%": `0${t}`.substr(-2),
                            "%minutes%": `0${s}`.substr(-2),
                            "%seconds%": `0${a}`.substr(-2)
                        })
                    }
                    var ba = (0, g.aZ)({
                            name: "ClockText",
                            components: {},
                            props: {
                                currentTime: {
                                    type: Date,
                                    required: !0
                                },
                                room: {
                                    type: RoomModel,
                                    required: !1
                                },
                                size: {
                                    type: String,
                                    default: "small"
                                },
                                moveTimestamp: {
                                    type: String,
                                    required: !1
                                },
                                timeControl: {
                                    type: Object,
                                    required: !1
                                }
                            },
                            emits: ["click"],
                            computed: {
                                componentClasses() {
                                    return [this.$style.component, this.$style[this.size]]
                                },
                                textClasses() {
                                    var e;
                                    const t = [this.$style.text];
                                    return "daily" !== (null == (e = this.timeControl) ? void 0 : e.timeType) && t.push(this.$style.monospace), t
                                },
                                text() {
                                    var e;
                                    if (this.moveTimestamp) return this.moveTimestamp;
                                    switch (null == (e = this.room) ? void 0 : e.clockType) {
                                        case Z.CurrentTime:
                                            return formatCurrentTime(this.currentTime).split(" ").shift();
                                        case Z.RoomTime:
                                            return function formatRoomTime(e, t) {
                                                let s = 0,
                                                    a = 0,
                                                    o = (e.getTime() - Date.parse(t)) / 1e3;
                                                return o >= 60 && (a = Math.floor(o / 60), o -= 60 * a), a >= 60 && (s = Math.floor(a / 60), a -= 60 * s), (0, V.dW)("%hours%:%minutes%:%seconds%", {
                                                    "%hours%": `0${s}`.substr(-2),
                                                    "%minutes%": `0${a}`.substr(-2),
                                                    "%seconds%": `0${Math.floor(o)}`.substr(-2)
                                                })
                                            }(this.currentTime, this.room.createdAt);
                                        case Z.Timer:
                                            return formatTimer(this.room.getTimerSeconds(this.currentTime));
                                        case Z.Stopwatch:
                                            return formatTimer(this.room.getStopwatchSeconds(this.currentTime));
                                        default:
                                            return "00:00:00"
                                    }
                                },
                                ampm() {
                                    var e;
                                    return this.moveTimestamp || (null == (e = this.room) ? void 0 : e.clockType) !== Z.CurrentTime ? "" : formatCurrentTime(this.currentTime).split(" ").pop()
                                }
                            }
                        }),
                        ga = ba,
                        va = {
                            component: "clock-text-component",
                            text: "clock-text-text",
                            monospace: "clock-text-monospace",
                            small: "clock-text-small",
                            large: "clock-text-large",
                            ampm: "clock-text-ampm"
                        };
                    var wa = (0, ns.Z)(ga, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.componentClasses,
                                on: {
                                    click: function(t) {
                                        return e.$emit("click", t)
                                    }
                                }
                            }, [s("span", {
                                class: e.textClasses,
                                domProps: {
                                    textContent: e._s(e.text)
                                }
                            }), e._v(" "), e.ampm ? s("span", {
                                class: e.$style.ampm,
                                domProps: {
                                    textContent: e._s(e.ampm)
                                }
                            }) : e._e()])
                        }), [], !1, (function clock_text_injectStyles(e) {
                            this.$style = va.locals || va
                        }), null, null).exports,
                        fa = (0, ns.Z)({}, (function() {
                            var e = this.$createElement,
                                t = this._self._c || e;
                            return t("svg", {
                                attrs: {
                                    xmlns: "http://www.w3.org/2000/svg",
                                    width: "20",
                                    height: "20",
                                    viewBox: "0 0 20 20"
                                }
                            }, [t("path", {
                                attrs: {
                                    d: "M5.48,9a.93.93,0,0,0-.3.71v.58a.94.94,0,0,0,.3.71,1,1,0,0,0,.71.3h4.58a1,1,0,0,0,.71-.3.94.94,0,0,0,.29-.71V9.7A.92.92,0,0,0,11.48,9a1,1,0,0,0-.71-.27H6.19A1,1,0,0,0,5.48,9Z"
                                }
                            }), t("path", {
                                attrs: {
                                    d: "M19.22,6.1a9.9,9.9,0,0,0-2.14-3.18A10.23,10.23,0,0,0,13.9.78,9.76,9.76,0,0,0,10,0,9.86,9.86,0,0,0,6.1.78,10,10,0,0,0,.78,6.1,9.81,9.81,0,0,0,0,10a9.81,9.81,0,0,0,.78,3.9A10,10,0,0,0,6.1,19.22,9.86,9.86,0,0,0,10,20a9.76,9.76,0,0,0,3.89-.78,10.23,10.23,0,0,0,3.18-2.14,9.9,9.9,0,0,0,2.14-3.18A9.81,9.81,0,0,0,20,10,9.81,9.81,0,0,0,19.22,6.1ZM17.07,13a7.65,7.65,0,0,1-1.65,2.42A7.81,7.81,0,0,1,13,17.06a7.46,7.46,0,0,1-3,.6,7.51,7.51,0,0,1-3-.6,7.74,7.74,0,0,1-2.43-1.65A8,8,0,0,1,2.94,13a7.46,7.46,0,0,1-.6-3,7.46,7.46,0,0,1,.6-3A8,8,0,0,1,4.58,4.59,7.74,7.74,0,0,1,7,2.94a7.51,7.51,0,0,1,3-.6,7.45,7.45,0,0,1,3,.6,7.74,7.74,0,0,1,2.43,1.65A7.65,7.65,0,0,1,17.07,7a7.46,7.46,0,0,1,.6,3A7.46,7.46,0,0,1,17.07,13Z"
                                }
                            })])
                        }), [], !1, null, null, null).exports,
                        ya = (0, g.aZ)({
                            name: "Clock",
                            components: {
                                ClockText: wa,
                                Timer: fa
                            },
                            props: {
                                color: {
                                    type: Number,
                                    required: !0
                                },
                                position: {
                                    type: String,
                                    required: !0
                                },
                                currentTime: {
                                    type: Date,
                                    required: !0
                                },
                                room: {
                                    type: RoomModel,
                                    required: !1
                                },
                                moveTimestamp: {
                                    type: String,
                                    required: !1
                                },
                                isPlayerTurn: {
                                    type: Boolean,
                                    default: !1
                                },
                                timeControl: {
                                    type: Object,
                                    required: !1
                                }
                            },
                            computed: {
                                componentClasses() {
                                    const e = [this.$style.component, this.$style[1 === this.color ? "white" : "black"], this.$style[this.position]];
                                    return this.isPlayerTurn && e.push(this.$style["player-turn"]), e
                                }
                            }
                        }),
                        _a = ya,
                        ka = {
                            component: "clock-component",
                            icon: "clock-icon",
                            timer: "clock-timer",
                            white: "clock-white",
                            black: "clock-black",
                            "player-turn": "clock-player-turn"
                        };
                    var Ca = (0, ns.Z)(_a, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.componentClasses
                            }, [s("div", {
                                class: e.$style.icon
                            }, [s("timer", {
                                class: e.$style.timer
                            })], 1), e._v(" "), s("clock-text", {
                                attrs: {
                                    size: "large",
                                    "current-time": e.currentTime,
                                    "move-timestamp": e.moveTimestamp,
                                    "time-control": e.timeControl,
                                    room: e.room
                                }
                            })], 1)
                        }), [], !1, (function clock_injectStyles(e) {
                            this.$style = ka.locals || ka
                        }), null, null).exports,
                        Sa = s(7241),
                        xa = s(3182),
                        $a = s(629);
                    var Pa = s(9790);
                    const prepAlertMessage = e => e.data && e.data.message || Pa.R0.badRequest;
                    var Ea = function createContextLocaleService() {
                            var e, t, s, a, o, n;
                            const r = {
                                contentLanguage: null == (t = null == (e = window.context) ? void 0 : e.i18n) ? void 0 : t.contentLanguage,
                                language: null == (a = null == (s = window.context) ? void 0 : s.i18n) ? void 0 : a.locale,
                                speaksEnglish: "en_US" === (null == (n = null == (o = window.context) ? void 0 : o.i18n) ? void 0 : n.locale)
                            };
                            return {
                                get: function get(e) {
                                    return r[e]
                                }
                            }
                        }(),
                        Oa = {
                            setLoading: (e, t) => {
                                e.loading = t
                            },
                            setLoadingUser: (e, t) => {
                                e.loadingUser[t.username] = t.loading
                            },
                            setLoadingFriends: (e, t) => {
                                e.loading.friends = t
                            },
                            setFriends: (e, t) => {
                                e.friends = t
                            },
                            setLoadingOpponents: (e, t) => {
                                e.loading.opponents = t
                            },
                            setOpponents: (e, t) => {
                                e.opponents = t
                            },
                            setAvatarUrl: (e, t) => {
                                e.avatarUrl = t
                            },
                            setSettingsAvatarUrl: (e, t) => {
                                e.settingsAvatarUrl = t
                            },
                            setArchiveView: (e, t) => {
                                e.archiveView = t
                            },
                            setFairPlayAgree: (e, t) => {
                                e.fairPlayAgree = t
                            },
                            setHomeContentType: (e, t) => {
                                e.homeContentType = t
                            },
                            setIsThreeD: (e, t) => {
                                e.isThreeD = t
                            },
                            setFollowSuggestions: (e, t) => {
                                e.followSuggestions = t
                            },
                            removeFollowSuggestedUser: (e, t) => {
                                const s = e.followSuggestions,
                                    a = s.findIndex((e => e.username === t)); - 1 !== a && (s.splice(a, 1), e.followSuggestions = s)
                            },
                            setFollowMessage: (e, t) => {
                                e.followMessage = t
                            },
                            setRoles: (e, t) => {
                                e.roles = t
                            },
                            setRating: (e, t) => {
                                e.rating = t
                            },
                            setLoggedIn: (e, t) => {
                                e.isLoggedIn = t
                            },
                            setUsername: (e, t) => {
                                e.username = t
                            },
                            setMembershipLevel(e, t) {
                                e.membershipLevel = t
                            }
                        },
                        Aa = s(4734),
                        Ta = {
                            namespaced: !0,
                            mutations: Oa,
                            actions: function createUserActions(e) {
                                return {
                                    init: ({
                                        dispatch: t
                                    }) => {
                                        e.isLoggedIn() && (t("getFriends"), t("getOpponents"))
                                    },
                                    getFriends: ({
                                        commit: t
                                    }) => (t("setLoading", !0), e.getFriends({
                                        user: e.get("id"),
                                        avatarSize: 50
                                    }).then((e => {
                                        t("setLoading", !1), t("setFriends", e.data.friends)
                                    })).catch((() => {
                                        t("setLoading", !1), (0, se.el)({
                                            type: Pa.V5.error,
                                            message: Pa.R0.badRequest
                                        })
                                    }))),
                                    getOpponents: ({
                                        commit: t
                                    }) => (t("setLoading", !0), e.getOpponents().then((e => {
                                        t("setLoading", !1), t("setOpponents", e.data)
                                    })).catch((() => {
                                        t("setLoading", !1), (0, se.el)({
                                            type: Pa.V5.error,
                                            message: Pa.R0.badRequest
                                        })
                                    }))),
                                    getFollowSuggestions: ({
                                        commit: t
                                    }) => e.getFollowSuggestions().then((e => {
                                        if (e.data.users && e.data.users.length > 0) {
                                            t("setFollowSuggestions", e.data.users);
                                            let s = Vt.Z.trans("Consider following...");
                                            e.data.notYetFollowing && (s = Vt.Z.trans("You are not currently following anyone. Here are a few suggestions...")), t("setFollowMessage", s)
                                        } else t("setFollowMessage", null)
                                    })).catch((() => (0, se.el)({
                                        type: Pa.V5.error,
                                        message: Pa.R0.badRequest
                                    }))),
                                    acceptFollowSuggestion: ({
                                        commit: e,
                                        dispatch: t
                                    }, s) => {
                                        e("removeFollowSuggestedUser", s), t("trackUser", s)
                                    },
                                    dismissFollowSuggestion: ({
                                        commit: t
                                    }, s) => (t("removeFollowSuggestedUser", s), e.dismissFollowSuggestion(s).catch((() => {
                                        (0, se.el)({
                                            type: Pa.V5.error,
                                            message: Pa.R0.badRequest
                                        })
                                    }))),
                                    getAvatar: ({
                                        commit: t
                                    }, s) => {
                                        if (!e.get("avatarUrl")) return e.getAvatar(s).then((e => {
                                            t("setAvatarUrl", e.data.avatar)
                                        }))
                                    },
                                    addFriend: ({
                                        commit: t,
                                        dispatch: s
                                    }, a) => {
                                        const o = a.userId || a,
                                            n = a.dispatchCallback || "getFriends";
                                        return t("setLoading", !0), e.addFriend(o).then((e => {
                                            t("setLoading", !1), (0, se.el)({
                                                type: Pa.V5.success,
                                                message: prepAlertMessage(e)
                                            })
                                        })).then((() => {
                                            n.includes("/") ? s(n, null, {
                                                root: !0
                                            }) : s(n)
                                        })).catch((e => {
                                            t("setLoading", !1), (0, se.el)({
                                                type: Pa.V5.error,
                                                message: e.response.data.message
                                            })
                                        }))
                                    },
                                    deleteFriend: ({
                                        commit: t,
                                        dispatch: s
                                    }, a) => {
                                        const o = a.userId || a,
                                            n = a.dispatchCallback || "getFriends";
                                        return t("setLoading", !0), e.deleteFriend(o).then((e => {
                                            t("setLoading", !1), (0, se.el)({
                                                type: Pa.V5.success,
                                                message: prepAlertMessage(e)
                                            })
                                        })).then((() => {
                                            n.includes("/") ? s(n, null, {
                                                root: !0
                                            }) : s(n)
                                        })).catch((() => {
                                            t("setLoading", !1), (0, se.el)({
                                                type: Pa.V5.error,
                                                message: Pa.R0.badRequest
                                            })
                                        }))
                                    },
                                    approveFriendRequest: ({
                                        dispatch: t
                                    }, s) => {
                                        const a = s.userId || s,
                                            o = s.dispatchCallback || "getFriends";
                                        return e.approveFriendRequest(a).then((e => {
                                            (0, se.el)({
                                                type: Pa.V5.success,
                                                message: prepAlertMessage(e)
                                            })
                                        })).then((() => {
                                            o.includes("/") ? t(o, null, {
                                                root: !0
                                            }) : t(o)
                                        })).catch((() => {
                                            (0, se.el)({
                                                type: Pa.V5.error,
                                                message: Pa.R0.badRequest
                                            })
                                        }))
                                    },
                                    blockUser: (t, s) => e.blockUser(s).then((e => {
                                        (0, se.el)({
                                            type: Pa.V5.success,
                                            message: prepAlertMessage(e)
                                        })
                                    })).catch((() => {
                                        (0, se.el)({
                                            type: Pa.V5.error,
                                            message: Pa.R0.badRequest
                                        })
                                    })),
                                    unblockUser: (t, s) => e.unblockUser(s).then((e => {
                                        (0, se.el)({
                                            type: Pa.V5.success,
                                            message: prepAlertMessage(e)
                                        })
                                    })).catch((() => {
                                        (0, se.el)({
                                            type: Pa.V5.error,
                                            message: Pa.R0.badRequest
                                        })
                                    })),
                                    trackUser: (t, s) => e.trackUser(s).then((e => {
                                        (0, se.el)({
                                            type: Pa.V5.success,
                                            message: prepAlertMessage(e)
                                        })
                                    })).catch((() => {
                                        (0, se.el)({
                                            type: Pa.V5.error,
                                            message: Pa.R0.badRequest
                                        })
                                    })),
                                    untrackUser: (t, s) => e.untrackUser(s).then((e => {
                                        (0, se.el)({
                                            type: Pa.V5.success,
                                            message: prepAlertMessage(e)
                                        })
                                    })).catch((() => {
                                        (0, se.el)({
                                            type: Pa.V5.error,
                                            message: Pa.R0.badRequest
                                        })
                                    })),
                                    setArchiveView: ({
                                        commit: t
                                    }, s) => {
                                        if (function isValidArchiveView(e) {
                                                return ["grid", "list"].includes(e)
                                            }(s)) return e.get("archiveView") !== s ? e.setArchiveView(s).then((() => {
                                            t("setArchiveView", s)
                                        })) : void 0
                                    },
                                    setFairPlayAgree: ({
                                        commit: t
                                    }) => (t("setFairPlayAgree", !0), e.setFairPlayAgree(!0)),
                                    setHomeContentType: ({
                                        commit: t
                                    }, s) => {
                                        if (function isValidHomeContentType(e) {
                                                return ["following", "my_activity"].includes(e)
                                            }(s)) return t("setHomeContentType", s), e.setHomeContentType(s)
                                    },
                                    setIsThreeD: ({
                                        commit: e
                                    }, t) => {
                                        e("setIsThreeD", t)
                                    },
                                    cancelFriendRequest: (t, s) => e.cancelFriendRequest(s).then((e => {
                                        (0, se.el)({
                                            type: Pa.V5.success,
                                            message: prepAlertMessage(e)
                                        })
                                    })).catch((() => {
                                        (0, se.el)({
                                            type: Pa.V5.error,
                                            message: Pa.R0.badRequest
                                        })
                                    })),
                                    declineFriendRequest: (t, s) => e.declineFriendRequest(s).then((e => {
                                        (0, se.el)({
                                            type: Pa.V5.success,
                                            message: prepAlertMessage(e)
                                        })
                                    })).catch((() => {
                                        (0, se.el)({
                                            type: Pa.V5.error,
                                            message: Pa.R0.badRequest
                                        })
                                    })),
                                    refreshUserRoles({
                                        commit: t
                                    }) {
                                        if (e.isLoggedIn()) return e.getRoles().then((e => {
                                            t("setRoles", e.data)
                                        }))
                                    },
                                    checkValidUsername: (t, s) => e.checkValidUsername(s).then((e => e.data)).catch((() => (0, se.el)({
                                        type: Pa.V5.error,
                                        message: Pa.R0.badRequest
                                    })))
                                }
                            }(Aa.Z),
                            state: function createUserState(e, t) {
                                var s;
                                return {
                                    chessTitle: e.get("chessTitle") || "",
                                    cohort: e.get("cohort"),
                                    flairCode: e.get("flairCode"),
                                    friends: e.get("friends"),
                                    roles: e.get("roles"),
                                    opponents: e.get("opponents"),
                                    boardSettings: e.get("boardSettings"),
                                    loading: !1,
                                    eligibleFirstTrial: e.eligibleFirstTrial(),
                                    isActivated: e.checkMembershipStatus("isActivated"),
                                    isLoggedIn: e.isLoggedIn(),
                                    isEnabled: e.isEnabled("isEnabled"),
                                    isImpersonating: e.isImpersonating(),
                                    isStaff: e.checkMembershipStatus("isStaff"),
                                    isStaffOnly: e.checkMembershipStatus("isStaffOnly"),
                                    isModerator: e.checkMembershipStatus("isModerator"),
                                    isModeratorOnly: e.checkMembershipStatus("isModeratorOnly"),
                                    isDiamond: e.checkMembershipStatus("isDiamond"),
                                    isDiamondOnly: e.checkMembershipStatus("isDiamondOnly"),
                                    isPlatinum: e.checkMembershipStatus("isPlatinum"),
                                    isPlatinumOnly: e.checkMembershipStatus("isPlatinumOnly"),
                                    isSilver: e.checkMembershipStatus("isSilver"),
                                    isSilverOnly: e.checkMembershipStatus("isSilverOnly"),
                                    isGold: e.checkMembershipStatus("isGold"),
                                    isGoldOnly: e.checkMembershipStatus("isGoldOnly"),
                                    isGuest: e.get("isGuest"),
                                    isPremium: e.checkMembershipStatus("isPremium"),
                                    isBasic: e.checkMembershipStatus("isBasic"),
                                    id: e.get("id"),
                                    language: t.get("language"),
                                    contentLanguage: t.get("contentLanguage"),
                                    username: e.get("username"),
                                    avatarUrl: e.get("avatarUrl"),
                                    settingsAvatarUrl: e.get("settingsAvatarUrl"),
                                    avatarLargeUrl: e.get("avatarLargeUrl"),
                                    lastLoginDate: e.get("lastLoginDate"),
                                    registerDate: e.get("registerDate"),
                                    timezone: e.get("timezone"),
                                    diagramSettings: e.get("diagramSettings"),
                                    speaksEnglish: t.get("speaksEnglish"),
                                    isThreeD: !1,
                                    archiveView: e.get("getArchiveView"),
                                    homeContentType: e.get("homeContentType"),
                                    membershipLevel: e.get("membershipLevel"),
                                    isContentHidden: e.get("isContentHidden"),
                                    fairPlayAgree: e.get("fairPlayAgree"),
                                    features: e.get("features"),
                                    followSuggestions: [],
                                    followMessage: "",
                                    country: e.get("country"),
                                    flag: null == (s = e.get("country")) ? void 0 : s.id,
                                    rating: e.get("rating"),
                                    membership: e.get("membership"),
                                    safeMode: e.get("safeMode"),
                                    uuid: e.get("uuid")
                                }
                            }(Aa.Z, Ea),
                            getters: {
                                chessTitle: e => e.chessTitle,
                                isActivated: e => e.isActivated,
                                id: e => e.id,
                                isImpersonating: e => e.isImpersonating,
                                isLoggedIn: e => e.isLoggedIn,
                                username: e => e.username,
                                roles: e => e.roles,
                                isPremium: e => e.isPremium,
                                hyphenatedLanguage: e => (e.language || "").replace("_", "-")
                            }
                        },
                        Ma = s(528);
                    const Ra = {
                            lastSave: "lastSavedRelease",
                            state: "chessComAppState"
                        },
                        Ia = ["UI"],
                        ja = 1504891089,
                        Ba = {
                            board: {},
                            daily: {}
                        },
                        La = {
                            maxWait: 500,
                            wait: 200
                        };
                    const filterModules = (e, t) => Object.keys(t).reduce(((s, a) => {
                            const o = (0, Ma.Q)(Ks.Z.get(Ra.state));
                            return e[a] ? s[a] = Object.assign({}, e[a]) : o && o[a] && (s[a] = Object.assign({}, o[a])), Ia.concat(t[a].excluded || []).forEach((e => {
                                "object" == typeof s[a] && delete s[a][e]
                            })), s
                        }), {}),
                        invalidateCacheOlderThan = e => {
                            const t = parseInt(Ks.Z.get(Ra.lastSave), 10);
                            (!t || e > t) && (Ks.Z.remove(Ra.state), Ks.Z.set(Ra.lastSave, e))
                        };
                    invalidateCacheOlderThan(ja);
                    const Da = w((e => {
                        if (e.user && e.user.isImpersonating) return;
                        const t = filterModules(e, Ba);
                        Ks.Z.set(Ra.state, JSON.stringify(t))
                    }), La.wait, {
                        maxWait: La.maxWait
                    });
                    xa.default.use($a.ZP);
                    "boolean" != typeof strictVuex || strictVuex;
                    const Ua = new $a.ZP.Store({
                        plugins: [e => {
                            e.registerModule("saveState", e), e.subscribe(((e, t) => {
                                Da(t)
                            }))
                        }],
                        strict: !1
                    });
                    Ua.registerModule("user", Ta);
                    var za = Ua;
                    const registerModules = e => {
                        Object.keys(e).forEach((t => {
                            const s = e[t];
                            za.state && za.state[t] || za.registerModule(t, s)
                        }))
                    };
                    var qa = s(9958),
                        Va = Object.defineProperty,
                        Na = Object.defineProperties,
                        Za = Object.getOwnPropertyDescriptors,
                        Fa = Object.getOwnPropertySymbols,
                        Ga = Object.prototype.hasOwnProperty,
                        Wa = Object.prototype.propertyIsEnumerable,
                        lazy_vue_defNormalProp = (e, t, s) => t in e ? Va(e, t, {
                            enumerable: !0,
                            configurable: !0,
                            writable: !0,
                            value: s
                        }) : e[t] = s,
                        lazy_vue_spreadValues = (e, t) => {
                            for (var s in t || (t = {})) Ga.call(t, s) && lazy_vue_defNormalProp(e, s, t[s]);
                            if (Fa)
                                for (var s of Fa(t)) Wa.call(t, s) && lazy_vue_defNormalProp(e, s, t[s]);
                            return e
                        };
                    xa.default.mixin(qa.Z);
                    const instantiate = e => {
                        return new xa.default((t = lazy_vue_spreadValues({}, e), s = {
                            el: e.el,
                            render: t => t(e.component, {
                                props: e.propsData
                            }),
                            store: e.store
                        }, Na(t, Za(s))));
                        var t, s
                    };
                    var lazy_vue = (e = {}) => {
                            const t = {},
                                createInstance = (s, a = {}) => e[s] && Object.keys(e[s]).length ? (t[s] = t[s] || instantiate(lazy_vue_spreadValues(lazy_vue_spreadValues({}, e[s]), a)), t[s]) : null;
                            return {
                                createInstance: createInstance,
                                createInstances: e => {
                                    e.forEach((e => createInstance(e)))
                                },
                                instances: t
                            }
                        },
                        Ha = s(6673),
                        Ya = s(2793),
                        Ka = s(3644);

                    function setPopoverPosition(e) {
                        const t = (0, Ya.tq)() && window.innerWidth < 768;
                        let s;
                        return (0, Ka.t)() ? s = `left: auto; right: ${e.right}px; top: ${e.top}px;` : (s = `transform: translate(${e.left}px, ${e.top}px);`, t && (s = `transform: translateY(${e.top}px);`)), s
                    }
                    var Qa = {
                        hideUserPopover: e => {
                            e.isHovered = !1, e.show = !1
                        },
                        hover: e => {
                            e.isHovered = !0
                        },
                        resetUser: e => {
                            e.user = {
                                avatarUrl: "",
                                bestRating: 0,
                                bestRatingType: "",
                                chessTitle: "",
                                country: {},
                                joinDate: "",
                                lastLoginDate: "",
                                membership: {},
                                onlineStatus: "",
                                username: ""
                            }, e.presenceDetails = null
                        },
                        showUserPopover: e => {
                            e.show = !0
                        },
                        setPosition: (e, t) => {
                            e.position = t
                        },
                        setUser: (e, t) => {
                            e.user = t
                        },
                        setPresenceDetails: (e, t) => {
                            e.presenceDetails = t
                        }
                    };
                    async function publish(e) {
                        var t;
                        let s = window.PubSub.options.url[e.service || "base"];
                        const a = e.path instanceof Array ? e.path.join("/") : e.path;
                        s.endsWith("/") || a.startsWith("/") || (s += "/");
                        const o = {};
                        ["staging", "prod"].includes("dev") || (o.uid = null == (t = window.context.user) ? void 0 : t.uuid), e.params && Object.assign(o, e.params);
                        const n = {};
                        return e.requestId && (n["x-chesscom-request-id-client"] = e.requestId), e.clientId && (n["x-chesscom-play-client"] = e.clientId), e.headers && Object.assign(n, e.headers), (0, r.Z)({
                            url: /^http[s]?:/.test(a) ? a : `${s}${a}`,
                            data: e.data,
                            method: e.method || "post",
                            params: o,
                            headers: n,
                            withCredentials: !0
                        })
                    }
                    var Ja = Object.defineProperty,
                        Xa = Object.getOwnPropertySymbols,
                        eo = Object.prototype.hasOwnProperty,
                        to = Object.prototype.propertyIsEnumerable,
                        fetch_defNormalProp = (e, t, s) => t in e ? Ja(e, t, {
                            enumerable: !0,
                            configurable: !0,
                            writable: !0,
                            value: s
                        }) : e[t] = s;
                    async function fetch(e) {
                        return publish(((e, t) => {
                            for (var s in t || (t = {})) eo.call(t, s) && fetch_defNormalProp(e, s, t[s]);
                            if (Xa)
                                for (var s of Xa(t)) to.call(t, s) && fetch_defNormalProp(e, s, t[s]);
                            return e
                        })({
                            method: "get"
                        }, e))
                    }
                    var so = (e => (e.None = "none", e.Playing = "playing", e))(so || {}),
                        ao = (e => (e.Offline = "offline", e.Online = "online", e))(ao || {});
                    async function getUsersOnlineStatuses(e) {
                        const {
                            data: t
                        } = await async function getUsersPresenceData(e) {
                            return fetch({
                                service: j.Presence,
                                path: [U.Users],
                                params: {
                                    ids: e.slice(0, 25).join(",")
                                }
                            })
                        }(e);
                        return t.users.reduce(((e, {
                            activity: t,
                            activityContext: s,
                            id: a,
                            status: o,
                            statusAt: n,
                            statusAtUncertain: r
                        }) => {
                            var l, c;
                            if (e[a] = {
                                    isOnline: o === ao.Online,
                                    isPlaying: t === so.Playing,
                                    statusAt: n
                                }, o === ao.Offline && (e[a].offlineSince = n), null == (l = null == s ? void 0 : s.games) ? void 0 : l.length) {
                                const t = s.games[0],
                                    o = t.legacyId ? "web_game_live" : "web_game_rcn",
                                    n = t.legacyId || t.id;
                                e[a].gameLink = i.Z.generate(o, {
                                    id: n
                                })
                            } else if (null == (c = null == s ? void 0 : s.battles) ? void 0 : c.length) {
                                const t = s.battles[0].id;
                                e[a].battleLink = i.Z.generate("web_puzzles_mode_battle_view", {
                                    id: t
                                })
                            }
                            return e[a].isOfflineStatusUncertain = r, e
                        }), {})
                    }
                    var oo = Object.defineProperty,
                        no = Object.defineProperties,
                        ro = Object.getOwnPropertyDescriptors,
                        io = Object.getOwnPropertySymbols,
                        lo = Object.prototype.hasOwnProperty,
                        co = Object.prototype.propertyIsEnumerable,
                        actions_defNormalProp = (e, t, s) => t in e ? oo(e, t, {
                            enumerable: !0,
                            configurable: !0,
                            writable: !0,
                            value: s
                        }) : e[t] = s,
                        uo = {
                            namespaced: !0,
                            mutations: Qa,
                            actions: {
                                async fetchUserPopover({
                                    commit: e
                                }, t) {
                                    var s, a, o, n, l, c, d, u;
                                    let m, h = !1;
                                    try {
                                        m = (await Aa.Z.getUser(t)).data, h = !0
                                    } catch (b) {
                                        e("setUser", {
                                            userNotExist: !0
                                        })
                                    }
                                    if (h) {
                                        try {
                                            const {
                                                data: e
                                            } = await (e => r.Z.get(i.Z.generate("web_league_callback_user_league_search", {
                                                username: e
                                            })))(t);
                                            (null == e ? void 0 : e.isOptedIn) && (m.leagueName = null != (o = null == (a = null == (s = e.division) ? void 0 : s.league) ? void 0 : a.name) ? o : "", m.leagueCode = null != (c = null == (l = null == (n = e.division) ? void 0 : n.league) ? void 0 : l.code) ? c : "", m.leagueDivision = null != (u = null == (d = e.division) ? void 0 : d.name.slice(1)) ? u : "")
                                        } catch (b) {}
                                        e("setUser", (p = ((e, t) => {
                                            for (var s in t || (t = {})) lo.call(t, s) && actions_defNormalProp(e, s, t[s]);
                                            if (io)
                                                for (var s of io(t)) co.call(t, s) && actions_defNormalProp(e, s, t[s]);
                                            return e
                                        })({}, m), no(p, ro({
                                            username: t
                                        }))));
                                        e("setPresenceDetails", await async function getUserOnlineStatus(e) {
                                            return (await getUsersOnlineStatuses([e]))[e]
                                        }(m.uuid))
                                    }
                                    var p
                                }
                            },
                            state: {
                                isHovered: !1,
                                show: !1,
                                user: {
                                    avatarUrl: "",
                                    bestRating: 0,
                                    bestRatingType: "",
                                    chessTitle: "",
                                    country: {},
                                    joinDate: "",
                                    lastLoginDate: "",
                                    membership: {},
                                    onlineStatus: "",
                                    username: ""
                                },
                                position: {
                                    x: "right",
                                    y: "bottom",
                                    top: 0,
                                    left: 0
                                },
                                presenceDetails: null
                            }
                        };
                    const mo = "club-chat-moderator-action",
                        ho = "SHOW_UPGRADE_MODAL",
                        po = "START_DIRECT_CHAT";
                    var bo = s(493),
                        go = s(4452),
                        vo = s(7692),
                        wo = {
                            namespaced: !0,
                            mutations: {
                                newMessage: (e, t) => {
                                    e.message = t
                                }
                            },
                            state: {
                                message: null
                            }
                        };
                    const htmlEncode = e => {
                        if (!e) return e;
                        const t = [60, 62];
                        let s = e.length;
                        const a = [];
                        for (; s--;) {
                            const o = e[s].charCodeAt();
                            t.indexOf(o) > -1 ? a[s] = `&#${o};` : a[s] = e[s]
                        }
                        return a.join("")
                    };
                    var fo = {
                            getUserTrophies: ({
                                commit: e
                            }, t) => {
                                const s = {
                                    username: t.username,
                                    trophyType: t.trophyType
                                };
                                return r.Z.get(i.Z.generate("web_member_callback_trophy_list", s)).then((t => {
                                    if (t.data) return e("setUserTrophies", t.data), Ks.Z.set("user_trophies", t.data, 60), t.data
                                })).catch((() => {
                                    const e = Pa.V5.error;
                                    (0, se.el)({
                                        type: e,
                                        message: Pa.R0.badRequest
                                    })
                                }))
                            },
                            getAllTrophies: ({
                                commit: e,
                                state: t
                            }, s) => {
                                e("setFinishedLoading", !1);
                                const a = Object.assign({}, {
                                    type: t.trophyType
                                }, s);
                                return r.Z.get(i.Z.generate("web_callback_get_trophies", a)).then((t => {
                                    t.data && e("setAllTrophies", t.data)
                                })).catch((() => {
                                    const e = Pa.V5.error;
                                    (0, se.el)({
                                        type: e,
                                        message: Pa.R0.badRequest
                                    })
                                }))
                            },
                            getTrophyShowcase: ({
                                commit: e
                            }, t) => r.Z.get(i.Z.generate("web_user_trophy_showcase_callback", {
                                username: t
                            })).then((t => {
                                t.data && e("setUserShowcaseTrophies", t.data)
                            })).catch((() => {
                                const e = Pa.V5.error;
                                (0, se.el)({
                                    type: e,
                                    message: Pa.R0.badRequest
                                })
                            })),
                            getUserTrophyCount: ({
                                commit: e
                            }, t) => r.Z.get(i.Z.generate("web_callback_count_user_trophies", {
                                username: t
                            })).then((t => {
                                t.data && e("setUserTrophiesCount", t.data.count)
                            })).catch((() => {
                                const e = Pa.V5.error;
                                (0, se.el)({
                                    type: e,
                                    message: Pa.R0.badRequest
                                })
                            })),
                            featureTrophy: ({
                                dispatch: e
                            }, {
                                trophyId: t,
                                featured: s,
                                username: a
                            }) => {
                                const o = {
                                    id: t,
                                    featured: s
                                };
                                return r.Z.post(i.Z.generate("web_feature_trophy_callback", o)).then((t => {
                                    const s = Pa.V5.success,
                                        o = (e => {
                                            var t, s;
                                            return null != (s = null == (t = e.data) ? void 0 : t.message) ? s : Pa.R0.badRequest
                                        })(t);
                                    (0, se.el)({
                                        type: s,
                                        message: o
                                    }), e("getTrophyShowcase", a)
                                })).catch((() => {
                                    const e = Pa.V5.error,
                                        t = Vt.Z.trans("Error featuring trophies. Please try again later.");
                                    (0, se.el)({
                                        type: e,
                                        message: t
                                    })
                                }))
                            },
                            sendTrophyToUser: ({
                                commit: e,
                                state: t
                            }) => {
                                const s = {
                                    username: t.recipientUsername,
                                    trophyId: t.selectedTrophy.id,
                                    message: htmlEncode(t.message)
                                };
                                return "number" == typeof t.gameId && (s[t.isLiveGame ? "gameLiveId" : "gameId"] = t.gameId), e("disableSendButton", !0), r.Z.post(i.Z.generate("web_award_trophy_callback", s)).then((() => {
                                    e("disableSendButton", !1)
                                })).catch((t => (e("setErrorMessage", t.response.data.message), e("disableSendButton", !1), Promise.reject(t))))
                            }
                        },
                        yo = {
                            namespaced: !0,
                            actions: fo,
                            mutations: {
                                disableSendButton: (e, t) => {
                                    e.disableSendButton = t
                                },
                                setUserTrophies: (e, t) => {
                                    e.userTrophies = t
                                },
                                setAllTrophies: (e, t) => {
                                    e.trophies = t.data, e.meta = t.meta, e.allTrophiesToGive = t.data, e.finishedLoadingTrophies = !0
                                },
                                setErrorMessage: (e, t) => {
                                    e.errorMessage = t
                                },
                                setFinishedLoading: (e, t) => {
                                    e.finishedLoadingTrophies = t
                                },
                                setGameId: (e, t) => {
                                    e.gameId = t
                                },
                                setIsLiveGame: (e, t) => {
                                    e.isLiveGame = t
                                },
                                setMessage: (e, t) => {
                                    e.message = t
                                },
                                setModalState: (e, t) => {
                                    e.modalState = t
                                },
                                setRecipientIsFriend: (e, t) => {
                                    e.recipientIsFriend = t
                                },
                                setRecipientUsername: (e, t) => {
                                    e.recipientUsername = t
                                },
                                setSelectedTrophy: (e, t) => {
                                    e.selectedTrophy = t
                                },
                                setTrophyType: (e, t) => {
                                    e.trophyType = t
                                },
                                setUserShowcaseTrophies: (e, t) => {
                                    e.hideShowcase = 0 === t.length, e.userShowcaseTrophies = t
                                },
                                setUserTrophiesCount: (e, t) => {
                                    e.userTrophyCount = t
                                }
                            },
                            state: {
                                allTrophiesToGive: [],
                                disableSendButton: !1,
                                errorMessage: "",
                                finishedLoadingTrophies: !1,
                                gameId: null,
                                hideShowcase: !1,
                                isLiveGame: !1,
                                message: "",
                                meta: {
                                    currentPage: 1,
                                    morePages: !1
                                },
                                recipientIsFriend: !1,
                                modalState: s(2468).Z.modalStates.select,
                                recipientUsername: null,
                                selectedTrophy: null,
                                trophies: [],
                                trophyType: "social",
                                userShowcaseTrophies: [],
                                userTrophies: [],
                                userTrophyCount: 0
                            }
                        },
                        _o = s(6272);

                    function postMessage(e) {
                        window.postMessage(e, window.location.origin)
                    }
                    var ko = s(6279),
                        Co = (e => (e.MUTE = "mute", e.UNMUTE = "unmute", e.WARN = "warn", e))(Co || {}),
                        So = {
                            name: "IconButton",
                            directives: {
                                Tooltip: Sa.Z
                            },
                            props: {
                                action: Function,
                                btnColor: String,
                                iconName: {
                                    type: String,
                                    required: !0
                                },
                                label: {
                                    type: String,
                                    required: !0
                                }
                            },
                            emits: ["click"],
                            methods: {
                                onClick(e) {
                                    this.action ? this.action(e) : this.$emit("click", e)
                                }
                            }
                        },
                        xo = {
                            link: "icon-button-link",
                            icon: "icon-button-icon",
                            label: "icon-button-label",
                            blue: "icon-button-blue",
                            grey: "icon-button-grey",
                            red: "icon-button-red",
                            translucent: "icon-button-translucent"
                        };
                    var $o = (0, ns.Z)(So, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("button", {
                                directives: [{
                                    name: "tooltip",
                                    rawName: "v-tooltip",
                                    value: {
                                        content: e.label,
                                        delay: 100
                                    },
                                    expression: "{\n    content: label,\n    delay: 100\n  }"
                                }],
                                class: [e.$style.link, e.$style[e.btnColor]],
                                attrs: {
                                    type: "button",
                                    "aria-label": e.label
                                },
                                on: {
                                    click: e.onClick
                                }
                            }, [s("span", {
                                class: [e.$style.icon, e.iconName, "icon-font-chess"]
                            })])
                        }), [], !1, (function icon_button_injectStyles(e) {
                            this.$style = xo.locals || xo
                        }), null, null).exports,
                        Po = {
                            name: "AdminActions",
                            components: {
                                IconButton: $o
                            },
                            props: {
                                canModerate: {
                                    type: Boolean,
                                    default: !1
                                },
                                canMuteOnChat: {
                                    type: Boolean,
                                    default: !1
                                },
                                clientName: String,
                                canWarnOnChat: Boolean,
                                canModerateOnChat: Boolean,
                                userAlreadyMutedOnChat: Boolean
                            },
                            emits: ["chat-kick-user", "chat-unmute-user", "chat-mute-user-remove-messages", "chat-mute-user", "chat-warn-user", "ban-user", "kick-user", "mute-user", "warn-user"]
                        },
                        Eo = {
                            component: "admin-actions-component",
                            separator: "admin-actions-separator"
                        };
                    var Oo = (0, ns.Z)(Po, (function() {
                        var e = this,
                            t = e.$createElement,
                            s = e._self._c || t;
                        return s("div", {
                            class: e.$style.component
                        }, [e.canModerate ? s("icon-button", {
                            attrs: {
                                "icon-name": "flag",
                                "btn-color": "red",
                                label: e.$trans("Warn")
                            },
                            on: {
                                click: function(t) {
                                    return e.$emit("warn-user")
                                }
                            }
                        }) : e._e(), e._v(" "), e.canModerate ? s("icon-button", {
                            attrs: {
                                "icon-name": "chat-x",
                                "btn-color": "red",
                                label: e.$trans("Mute")
                            },
                            on: {
                                click: function(t) {
                                    return e.$emit("mute-user")
                                }
                            }
                        }) : e._e(), e._v(" "), e.canModerate ? s("icon-button", {
                            attrs: {
                                "icon-name": "exit",
                                "btn-color": "red",
                                label: e.$trans("Kick")
                            },
                            on: {
                                click: function(t) {
                                    return e.$emit("kick-user")
                                }
                            }
                        }) : e._e(), e._v(" "), e.canModerate ? s("icon-button", {
                            attrs: {
                                "icon-name": "user-block",
                                "btn-color": "red",
                                label: e.$trans("Ban")
                            },
                            on: {
                                click: function(t) {
                                    return e.$emit("ban-user")
                                }
                            }
                        }) : e._e(), e._v(" "), e.canModerate && e.clientName ? s("icon-button", {
                            attrs: {
                                "icon-name": "circle-info",
                                label: e.clientName
                            }
                        }) : e._e(), e._v(" "), e.canModerate && (e.canWarnOnChat || e.canModerateOnChat) ? s("div", {
                            class: e.$style.separator
                        }) : e._e(), e._v(" "), e.canWarnOnChat && !e.userAlreadyMutedOnChat ? s("icon-button", {
                            attrs: {
                                "icon-name": "flag",
                                "btn-color": "red",
                                label: e.$trans("Chat Warn")
                            },
                            on: {
                                click: function(t) {
                                    return e.$emit("chat-warn-user")
                                }
                            }
                        }) : e._e(), e._v(" "), !e.canModerateOnChat && !e.canMuteOnChat || e.userAlreadyMutedOnChat ? e._e() : s("icon-button", {
                            attrs: {
                                "icon-name": "chat-x",
                                "btn-color": "red",
                                label: e.$trans("Chat Mute")
                            },
                            on: {
                                click: function(t) {
                                    return e.$emit("chat-mute-user")
                                }
                            }
                        }), e._v(" "), e.canMuteOnChat && !e.userAlreadyMutedOnChat ? s("icon-button", {
                            attrs: {
                                "icon-name": "trash",
                                "btn-color": "red",
                                label: e.$trans("Chat Mute and remove messages")
                            },
                            on: {
                                click: function(t) {
                                    return e.$emit("chat-mute-user-remove-messages")
                                }
                            }
                        }) : e._e(), e._v(" "), e.canMuteOnChat && e.userAlreadyMutedOnChat ? s("icon-button", {
                            attrs: {
                                "icon-name": "chat-alt",
                                "btn-color": "blue",
                                label: e.$trans("Chat Unmute")
                            },
                            on: {
                                click: function(t) {
                                    return e.$emit("chat-unmute-user")
                                }
                            }
                        }) : e._e(), e._v(" "), e.canModerateOnChat ? s("icon-button", {
                            attrs: {
                                "icon-name": "exit",
                                "btn-color": "red",
                                label: e.$trans("Chat Kick")
                            },
                            on: {
                                click: function(t) {
                                    return e.$emit("chat-kick-user")
                                }
                            }
                        }) : e._e()], 1)
                    }), [], !1, (function admin_actions_injectStyles(e) {
                        this.$style = Eo.locals || Eo
                    }), null, null).exports;
                    const Ao = {
                        name: "click-outside",
                        bind(e, t) {
                            let s, a, o = 1,
                                n = "click";
                            if (isFunction(t.value) ? s = t.value : isObject(t.value) && (s = t.value.handler, o = t.value.delay, n = t.value.clickEvent || "click"), !isFunction(s)) throw new Error("must pass function to click-outside");
                            const onClickElement = e => e.stopPropagation(),
                                onClickDocument = t => e !== t.target && s(e, t);
                            e.$unbindClickOutside && e.$unbindClickOutside(), e.$unbindClickOutside = () => {
                                clearTimeout(a), e.removeEventListener(n, onClickElement), document.removeEventListener(n, onClickDocument), delete e.$unbindClickOutside
                            }, a = setTimeout((() => {
                                e.addEventListener(n, onClickElement), document.addEventListener(n, onClickDocument)
                            }), o)
                        },
                        unbind(e) {
                            e.$unbindClickOutside && e.$unbindClickOutside()
                        }
                    };
                    var To = Ao,
                        Mo = s(6426),
                        Ro = {
                            name: "IconLink",
                            directives: {
                                Tooltip: Sa.Z
                            },
                            props: {
                                url: String,
                                iconColor: String,
                                iconName: {
                                    type: String,
                                    required: !0
                                },
                                label: {
                                    type: String,
                                    required: !0
                                }
                            },
                            emits: ["click"]
                        },
                        Io = {
                            link: "icon-link-link",
                            icon: "icon-link-icon",
                            label: "icon-link-label",
                            blue: "icon-link-blue",
                            grey: "icon-link-grey",
                            red: "icon-link-red",
                            translucent: "icon-link-translucent"
                        };
                    var jo = (0, ns.Z)(Ro, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("a", {
                                directives: [{
                                    name: "tooltip",
                                    rawName: "v-tooltip",
                                    value: {
                                        content: e.label,
                                        delay: 100
                                    },
                                    expression: "{\n    content: label,\n    delay: 100\n  }"
                                }],
                                class: [e.$style.link, e.$style[e.iconColor]],
                                attrs: {
                                    href: e.url
                                },
                                on: {
                                    click: function(t) {
                                        return e.$emit("click", t)
                                    }
                                }
                            }, [s("span", {
                                class: [e.$style.icon, e.iconName, "icon-font-chess"]
                            })])
                        }), [], !1, (function icon_link_injectStyles(e) {
                            this.$style = Io.locals || Io
                        }), null, null).exports,
                        Bo = {
                            name: "LabeledIconButton",
                            props: {
                                action: Function,
                                btnColor: String,
                                iconName: {
                                    type: String,
                                    required: !0
                                },
                                label: {
                                    type: String,
                                    required: !0
                                }
                            },
                            emits: ["click"],
                            methods: {
                                onClick(e) {
                                    this.action ? this.action(e) : this.$emit("click", e)
                                }
                            }
                        },
                        Lo = {
                            link: "labeled-icon-button-link",
                            icon: "labeled-icon-button-icon",
                            label: "labeled-icon-button-label",
                            blue: "labeled-icon-button-blue",
                            grey: "labeled-icon-button-grey",
                            red: "labeled-icon-button-red",
                            translucent: "labeled-icon-button-translucent"
                        };
                    var Do = (0, ns.Z)(Bo, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("button", {
                                class: [e.$style.link, e.$style[e.btnColor]],
                                attrs: {
                                    type: "button"
                                },
                                on: {
                                    click: e.onClick
                                }
                            }, [s("span", {
                                class: [e.$style.icon, e.iconName, "icon-font-chess"]
                            }), e._v(" "), s("span", {
                                class: e.$style.label,
                                domProps: {
                                    textContent: e._s(e.label)
                                }
                            })])
                        }), [], !1, (function labeled_icon_button_injectStyles(e) {
                            this.$style = Lo.locals || Lo
                        }), null, null).exports,
                        Uo = {
                            name: "LabeledIconButton",
                            props: {
                                url: String,
                                iconColor: String,
                                iconName: {
                                    type: String,
                                    required: !0
                                },
                                label: {
                                    type: String,
                                    required: !0
                                }
                            },
                            emits: ["click"]
                        },
                        zo = {
                            link: "labeled-icon-link-link",
                            icon: "labeled-icon-link-icon",
                            label: "labeled-icon-link-label",
                            blue: "labeled-icon-link-blue",
                            grey: "labeled-icon-link-grey",
                            red: "labeled-icon-link-red",
                            translucent: "labeled-icon-link-translucent"
                        };
                    var qo = (0, ns.Z)(Uo, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("a", {
                                class: [e.$style.link, e.$style[e.iconColor]],
                                attrs: {
                                    href: e.url
                                },
                                on: {
                                    click: function(t) {
                                        return e.$emit("click", t)
                                    }
                                }
                            }, [s("span", {
                                class: [e.$style.icon, e.iconName, "icon-font-chess"]
                            }), e._v(" "), s("span", {
                                class: e.$style.label,
                                domProps: {
                                    textContent: e._s(e.label)
                                }
                            })])
                        }), [], !1, (function labeled_icon_link_injectStyles(e) {
                            this.$style = zo.locals || zo
                        }), null, null).exports,
                        Vo = s(4089),
                        No = {
                            methods: {
                                hasVisibleDropdown() {
                                    return Object.values(this.dropdown).some((e => "block" === e.display))
                                },
                                createDropdown(e) {
                                    const t = {
                                        dropdown: {}
                                    };
                                    return e.forEach((e => {
                                        t.dropdown[e] = {
                                            display: "none",
                                            transform: "translate(0, 0)"
                                        }
                                    })), t
                                },
                                hideDropdown() {
                                    Object.keys(this.dropdown).forEach((e => {
                                        this.dropdown[e].display = "none"
                                    }))
                                },
                                showDropdown(e, t, s) {
                                    const a = document.querySelector(`ul[data-dropdown="${t}"]`);
                                    a && ("block" === this.dropdown[t].display ? this.dropdown[t].display = "none" : (this.hideDropdown(), this.dropdown[t].display = "block", this.$nextTick((() => {
                                        const o = e.target.getBoundingClientRect(),
                                            {
                                                width: n,
                                                height: r
                                            } = a.getBoundingClientRect(),
                                            i = (0, go.MD)(o, r, n);
                                        s && s(i);
                                        const {
                                            left: l,
                                            top: c
                                        } = i;
                                        this.dropdown[t].transform = `translate(${l}px, ${c}px)`
                                    }))))
                                }
                            }
                        },
                        Zo = Object.defineProperty,
                        Fo = Object.getOwnPropertySymbols,
                        Go = Object.prototype.hasOwnProperty,
                        Wo = Object.prototype.propertyIsEnumerable,
                        chat_options_dropdownvue_type_script_lang_js_defNormalProp = (e, t, s) => t in e ? Zo(e, t, {
                            enumerable: !0,
                            configurable: !0,
                            writable: !0,
                            value: s
                        }) : e[t] = s,
                        Ho = {
                            name: "ChatOptionsDropdown",
                            directives: {
                                Tooltip: Sa.Z
                            },
                            mixins: [No],
                            props: {
                                target: {
                                    type: HTMLElement,
                                    required: !0
                                },
                                position: {
                                    type: Object,
                                    required: !0
                                },
                                chatOptions: {
                                    type: Array,
                                    default: () => []
                                }
                            },
                            emits: ["option-selected", "hide"],
                            data() {
                                return ((e, t) => {
                                    for (var s in t || (t = {})) Go.call(t, s) && chat_options_dropdownvue_type_script_lang_js_defNormalProp(e, s, t[s]);
                                    if (Fo)
                                        for (var s of Fo(t)) Wo.call(t, s) && chat_options_dropdownvue_type_script_lang_js_defNormalProp(e, s, t[s]);
                                    return e
                                })({}, this.createDropdown(["chat"]))
                            },
                            mounted() {
                                const e = {
                                    target: this.target
                                };
                                this.showDropdown(e, "chat", (e => {
                                    e.left -= this.position.left, e.top -= this.position.top
                                }))
                            },
                            methods: {
                                onClickOption(e, t) {
                                    e.roomId = t, this.$emit("option-selected", e)
                                }
                            }
                        },
                        Yo = {
                            component: "chat-options-dropdown-component",
                            close: "chat-options-dropdown-close",
                            title: "chat-options-dropdown-title"
                        };
                    var Ko = (0, ns.Z)(Ho, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("ul", {
                                class: e.$style.component,
                                style: e.dropdown.chat,
                                attrs: {
                                    "data-dropdown": "chat"
                                }
                            }, [e._l(e.chatOptions, (function(t) {
                                return s("li", {
                                    directives: [{
                                        name: "tooltip",
                                        rawName: "v-tooltip",
                                        value: t.title,
                                        expression: "chatOption.title"
                                    }],
                                    key: t.roomId,
                                    domProps: {
                                        textContent: e._s(t.title)
                                    },
                                    on: {
                                        click: function(s) {
                                            return e.onClickOption(s, t.roomId)
                                        }
                                    }
                                })
                            })), e._v(" "), e._m(0), e._v(" "), e._m(1), e._v(" "), s("i", {
                                directives: [{
                                    name: "tooltip",
                                    rawName: "v-tooltip",
                                    value: e.$trans("Close"),
                                    expression: "$trans('Close')"
                                }],
                                class: [e.$style.close, "icon-x"],
                                on: {
                                    click: function(t) {
                                        return e.$emit("hide")
                                    }
                                }
                            })], 2)
                        }), [function() {
                            var e = this,
                                t = e.$createElement;
                            return (e._self._c || t)("li", {
                                domProps: {
                                    textContent: e._s(e.$trans("Private Chat"))
                                },
                                on: {
                                    click: function(t) {
                                        return e.onClickOption(t)
                                    }
                                }
                            })
                        }, function() {
                            var e = this,
                                t = e.$createElement;
                            return (e._self._c || t)("span", {
                                class: e.$style.title,
                                domProps: {
                                    textContent: e._s(e.$trans("Chat"))
                                }
                            })
                        }], !1, (function chat_options_dropdown_injectStyles(e) {
                            this.$style = Yo.locals || Yo
                        }), null, null).exports,
                        Qo = Object.defineProperty,
                        Jo = Object.getOwnPropertySymbols,
                        Xo = Object.prototype.hasOwnProperty,
                        en = Object.prototype.propertyIsEnumerable,
                        analysis_options_dropdownvue_type_script_lang_js_defNormalProp = (e, t, s) => t in e ? Qo(e, t, {
                            enumerable: !0,
                            configurable: !0,
                            writable: !0,
                            value: s
                        }) : e[t] = s,
                        tn = {
                            name: "AnalysisOptionsDropdown",
                            directives: {
                                Tooltip: Sa.Z
                            },
                            mixins: [No],
                            props: {
                                target: {
                                    type: HTMLElement,
                                    required: !0
                                },
                                position: {
                                    type: Object,
                                    required: !0
                                },
                                analysisOptions: {
                                    type: Array,
                                    default: () => []
                                }
                            },
                            emits: ["option-selected", "hide"],
                            data() {
                                return ((e, t) => {
                                    for (var s in t || (t = {})) Xo.call(t, s) && analysis_options_dropdownvue_type_script_lang_js_defNormalProp(e, s, t[s]);
                                    if (Jo)
                                        for (var s of Jo(t)) en.call(t, s) && analysis_options_dropdownvue_type_script_lang_js_defNormalProp(e, s, t[s]);
                                    return e
                                })({}, this.createDropdown(["analysis"]))
                            },
                            mounted() {
                                const e = {
                                    target: this.target
                                };
                                this.showDropdown(e, "analysis", (e => {
                                    e.left -= this.position.left, e.top -= this.position.top
                                }))
                            },
                            methods: {
                                onClickOption(e, t) {
                                    e.examineId = t, this.$emit("option-selected", e)
                                }
                            }
                        },
                        sn = {
                            component: "analysis-options-dropdown-component",
                            close: "analysis-options-dropdown-close",
                            title: "analysis-options-dropdown-title"
                        };
                    var an = (0, ns.Z)(tn, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("ul", {
                                class: e.$style.component,
                                style: e.dropdown.analysis,
                                attrs: {
                                    "data-dropdown": "analysis"
                                }
                            }, [e._l(e.analysisOptions, (function(t) {
                                return s("li", {
                                    directives: [{
                                        name: "tooltip",
                                        rawName: "v-tooltip",
                                        value: t.title,
                                        expression: "analysisOption.title"
                                    }],
                                    key: t.examineId,
                                    domProps: {
                                        textContent: e._s(t.title)
                                    },
                                    on: {
                                        click: function(s) {
                                            return e.onClickOption(s, t.examineId)
                                        }
                                    }
                                })
                            })), e._v(" "), e._m(0), e._v(" "), s("i", {
                                directives: [{
                                    name: "tooltip",
                                    rawName: "v-tooltip",
                                    value: e.$trans("Close"),
                                    expression: "$trans('Close')"
                                }],
                                class: [e.$style.close, "icon-x"],
                                on: {
                                    click: function(t) {
                                        return e.$emit("hide")
                                    }
                                }
                            })], 2)
                        }), [function() {
                            var e = this,
                                t = e.$createElement;
                            return (e._self._c || t)("span", {
                                class: e.$style.title,
                                domProps: {
                                    textContent: e._s(e.$trans("Analysis Board"))
                                }
                            })
                        }], !1, (function analysis_options_dropdown_injectStyles(e) {
                            this.$style = sn.locals || sn
                        }), null, null).exports,
                        on = {
                            name: "UserActions",
                            components: {
                                IconFont: Vo.Z,
                                IconButton: $o,
                                IconLink: jo,
                                LabeledIconButton: Do,
                                LabeledIconLink: qo,
                                ChatOptionsDropdown: Ko,
                                AnalysisOptionsDropdown: an
                            },
                            props: {
                                avatar: String,
                                canAddFriend: Boolean,
                                canBlockUser: Boolean,
                                canReportUser: Boolean,
                                canCreateChallenge: Boolean,
                                canFollowUser: Boolean,
                                canGiftMembership: Boolean,
                                canRemoveFriend: Boolean,
                                canSendMessage: Boolean,
                                canInviteToChat: Boolean,
                                canSendTrophy: Boolean,
                                canUnblockUser: Boolean,
                                canUnfollowUser: Boolean,
                                canUseGlobalChat: Boolean,
                                isEnabled: Boolean,
                                hasInboundFriendRequest: Boolean,
                                hasOutboundFriendRequest: Boolean,
                                loggedAsAnother: Boolean,
                                username: String,
                                canObserveGame: {
                                    type: Boolean,
                                    default: !1
                                },
                                isBughousePartner: {
                                    type: Boolean,
                                    default: !1
                                },
                                challengeUrl: String,
                                canCancelFriendRequest: {
                                    type: Boolean,
                                    default: !1
                                },
                                canDeclineFriendRequest: {
                                    type: Boolean,
                                    default: !1
                                },
                                canAcceptFriendRequest: {
                                    type: Boolean,
                                    default: !1
                                },
                                archiveUrl: String,
                                chatOptions: {
                                    type: Array,
                                    default: () => []
                                },
                                position: {
                                    type: Object,
                                    default: () => ({})
                                },
                                canInviteToAnalysis: {
                                    type: Boolean,
                                    default: !1
                                },
                                analysisOptions: {
                                    type: Array,
                                    default: () => []
                                },
                                isConfirmVisible: {
                                    type: Boolean,
                                    default: !1
                                },
                                showBughousePartner: {
                                    type: Boolean,
                                    default: !1
                                },
                                membershipUrl: String,
                                dynamicActions: Array
                            },
                            emits: ["show-archive", "show-gift", "show-trophy", "decline-friend-request", "cancel-friend-request", "add-friend", "invite-analysis", "request-chat", "send-message", "create-challenge", "user-popover-hide", "remove-friend", "accept-friend-request", "follow-user", "unfollow-user", "block-user", "unblock-user", "show-report", "observe-user", "bughouse-partner", "bughouse-unpartner", "all-actions-shown", "start-direct-chat"],
                            data: () => ({
                                allActions: !1,
                                chatDropdownTarget: null,
                                analysisDropdownTarget: null,
                                buttonsListStyle: null
                            }),
                            computed: {
                                showGlobalChatButton() {
                                    return this.canUseGlobalChat && !this.canInviteToChat
                                }
                            },
                            methods: {
                                getIconComponent: e => e ? jo : $o,
                                getIconLabeledComponent: e => e ? qo : Do,
                                hidePopover() {
                                    this.$emit("user-popover-hide")
                                },
                                onClickChallenge(e) {
                                    this.challengeUrl ? this.hidePopover() : (e.username = this.username, e.avatar = this.avatar, this.$emit("create-challenge", e))
                                },
                                onClickMessage(e) {
                                    e.username = this.username, e.avatar = this.avatar, this.$emit("send-message", e)
                                },
                                onClickChat(e) {
                                    this.chatOptions.length ? this.chatDropdownTarget = e.target : this.onClickChatOption(e)
                                },
                                onClickChatOption(e) {
                                    this.hideChatDropdown(), this.$emit("request-chat", e)
                                },
                                onClickAnalysis(e) {
                                    this.analysisDropdownTarget = e.target
                                },
                                onClickAnalysisOption(e) {
                                    this.hideAnalysisDropdown(), this.$emit("invite-analysis", e)
                                },
                                onClickAddFriend() {
                                    this.$emit("add-friend")
                                },
                                onClickCancelFriendRequest() {
                                    this.$emit("cancel-friend-request")
                                },
                                onClickDeclineFriendRequest() {
                                    this.$emit("decline-friend-request")
                                },
                                onClickTrophy(e) {
                                    e.username = this.username, this.$emit("show-trophy", e)
                                },
                                onClickGift() {
                                    this.$emit("show-gift")
                                },
                                onClickArchive(e) {
                                    this.archiveUrl ? this.hidePopover() : (e.username = this.username, this.$emit("show-archive", e))
                                },
                                onClickRemoveFriend() {
                                    this.$emit("remove-friend")
                                },
                                onClickAcceptFriendRequest() {
                                    this.$emit("accept-friend-request")
                                },
                                onClickFollowUser() {
                                    this.$emit("follow-user")
                                },
                                onClickUnfollowUser() {
                                    this.$emit("unfollow-user")
                                },
                                onClickBlockUser() {
                                    this.$emit("block-user")
                                },
                                onClickUnblockUser() {
                                    this.$emit("unblock-user")
                                },
                                onClickReport() {
                                    this.$emit("show-report")
                                },
                                onClickObserve() {
                                    this.$emit("observe-user")
                                },
                                onClickPartner() {
                                    this.$emit("bughouse-partner")
                                },
                                onClickUnpartner() {
                                    this.$emit("bughouse-unpartner")
                                },
                                showAllActions() {
                                    this.allActions = !0, this.$nextTick((() => {
                                        const e = document.getElementsByClassName(this.$style.buttonsList)[0];
                                        if (e) {
                                            const t = [...e.children],
                                                s = Math.max(...t.map((e => e.offsetHeight)));
                                            this.buttonsListStyle = {
                                                height: s * Math.round(t.length / 2) + "px"
                                            }
                                        }
                                        this.$nextTick((() => {
                                            this.$emit("all-actions-shown")
                                        }))
                                    }))
                                },
                                startDirectChat() {
                                    this.hidePopover(), this.$emit("start-direct-chat")
                                },
                                hideChatDropdown() {
                                    this.chatDropdownTarget = null
                                },
                                hideAnalysisDropdown() {
                                    this.analysisDropdownTarget = null
                                }
                            }
                        },
                        nn = {
                            component: "user-actions-component",
                            "icons-list": "user-actions-icons-list",
                            more: "user-actions-more",
                            caret: "user-actions-caret",
                            buttonsList: "user-actions-buttonsList"
                        };
                    var rn = (0, ns.Z)(on, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.$style.component
                            }, [e.allActions ? e._e() : s("div", {
                                class: e.$style["icons-list"]
                            }, [e.canCreateChallenge ? s(e.getIconComponent(e.challengeUrl), {
                                tag: "component",
                                attrs: {
                                    "icon-name": "chess-board-plus",
                                    label: e.$trans("Challenge"),
                                    url: e.challengeUrl
                                },
                                on: {
                                    click: e.onClickChallenge
                                }
                            }) : e._e(), e._v(" "), e.showGlobalChatButton ? s("icon-button", {
                                attrs: {
                                    "icon-name": "chat",
                                    label: e.$trans("Chat")
                                },
                                on: {
                                    click: e.startDirectChat
                                }
                            }) : e._e(), e._v(" "), e.loggedAsAnother ? s("icon-button", {
                                attrs: {
                                    "icon-name": "mail-plus",
                                    label: e.$trans("Message")
                                },
                                on: {
                                    click: e.onClickMessage
                                }
                            }) : e._e(), e._v(" "), e.canInviteToChat ? s("icon-button", {
                                attrs: {
                                    "icon-name": "chat",
                                    label: e.$trans("Chat")
                                },
                                on: {
                                    click: e.onClickChat
                                }
                            }) : e._e(), e._v(" "), e.canAddFriend ? s("icon-button", {
                                attrs: {
                                    "icon-name": "user-plus",
                                    label: e.$trans("Add Friend")
                                },
                                on: {
                                    click: e.onClickAddFriend
                                }
                            }) : e._e(), e._v(" "), e.canAcceptFriendRequest ? s("icon-button", {
                                attrs: {
                                    "icon-name": "user-plus",
                                    "data-cy": "user-popover-accept-friend-request",
                                    label: e.$trans("Accept Request")
                                },
                                on: {
                                    click: e.onClickAcceptFriendRequest
                                }
                            }) : e._e(), e._v(" "), e.canDeclineFriendRequest ? s("icon-button", {
                                attrs: {
                                    "btn-color": "grey",
                                    "icon-name": "user-x",
                                    label: e.$trans("Decline Request")
                                },
                                on: {
                                    click: e.onClickDeclineFriendRequest
                                }
                            }) : e._e(), e._v(" "), e.canCancelFriendRequest ? s("icon-button", {
                                attrs: {
                                    "btn-color": "grey",
                                    "icon-name": "user-x",
                                    label: e.$trans("Cancel Request")
                                },
                                on: {
                                    click: e.onClickCancelFriendRequest
                                }
                            }) : e._e(), e._v(" "), e.canRemoveFriend ? s("icon-button", {
                                attrs: {
                                    "icon-name": "user-x",
                                    label: e.$trans("Remove Friend")
                                },
                                on: {
                                    click: e.onClickRemoveFriend
                                }
                            }) : e._e(), e._v(" "), e.canGiftMembership ? s(e.getIconComponent(e.membershipUrl), {
                                tag: "component",
                                attrs: {
                                    "btn-color": "blue",
                                    "icon-color": "blue",
                                    "icon-name": "display-slider",
                                    label: e.$trans("Gift Membership"),
                                    url: e.membershipUrl
                                },
                                on: {
                                    click: e.onClickGift
                                }
                            }) : e._e(), e._v(" "), e.canObserveGame ? s("icon-button", {
                                attrs: {
                                    "icon-name": "binoculars",
                                    label: e.$trans("Observe Game")
                                },
                                on: {
                                    click: e.onClickObserve
                                }
                            }) : e._e(), e._v(" "), e.canReportUser ? s("icon-button", {
                                attrs: {
                                    "icon-name": "circle-danger",
                                    label: e.$trans("Report")
                                },
                                on: {
                                    click: e.onClickReport
                                }
                            }) : e._e(), e._v(" "), e.loggedAsAnother ? e._e() : s(e.getIconComponent(e.archiveUrl), {
                                tag: "component",
                                attrs: {
                                    "icon-name": "chess-board-folder",
                                    label: e.$trans("Archive"),
                                    url: e.archiveUrl
                                },
                                on: {
                                    click: e.onClickArchive
                                }
                            }), e._v(" "), e.loggedAsAnother && e.isEnabled ? s("button", {
                                class: e.$style.more,
                                attrs: {
                                    type: "button"
                                },
                                on: {
                                    click: e.showAllActions
                                }
                            }, [e._v("\n      " + e._s(e.$trans("More")) + "\n      "), s("icon-font", {
                                class: e.$style.caret,
                                attrs: {
                                    name: "caret-down",
                                    theme: "primary"
                                }
                            })], 1) : e._e()], 1), e._v(" "), e.allActions && !e.isConfirmVisible ? s("div", {
                                class: e.$style.buttonsList,
                                style: e.buttonsListStyle
                            }, [e.canCreateChallenge ? s(e.getIconLabeledComponent(e.challengeUrl), {
                                tag: "component",
                                attrs: {
                                    "icon-name": "chess-board-plus",
                                    label: e.$trans("Challenge"),
                                    url: e.challengeUrl
                                },
                                on: {
                                    click: e.onClickChallenge
                                }
                            }) : e._e(), e._v(" "), e.showGlobalChatButton ? s("labeled-icon-button", {
                                attrs: {
                                    "icon-name": "chat",
                                    label: e.$trans("Chat")
                                },
                                on: {
                                    click: e.startDirectChat
                                }
                            }) : e._e(), e._v(" "), e.loggedAsAnother ? s("labeled-icon-button", {
                                attrs: {
                                    "icon-name": "mail-plus",
                                    label: e.$trans("Message")
                                },
                                on: {
                                    click: e.onClickMessage
                                }
                            }) : e._e(), e._v(" "), e.canInviteToChat ? s("labeled-icon-button", {
                                attrs: {
                                    "icon-name": "chat",
                                    label: e.$trans("Chat")
                                },
                                on: {
                                    click: e.onClickChat
                                }
                            }) : e._e(), e._v(" "), e.canAddFriend ? s("labeled-icon-button", {
                                attrs: {
                                    "icon-name": "user-plus",
                                    label: e.$trans("Add Friend")
                                },
                                on: {
                                    click: e.onClickAddFriend
                                }
                            }) : e._e(), e._v(" "), e.canAcceptFriendRequest ? s("labeled-icon-button", {
                                attrs: {
                                    "icon-name": "user-plus",
                                    label: e.$trans("Accept Request")
                                },
                                on: {
                                    click: e.onClickAcceptFriendRequest
                                }
                            }) : e._e(), e._v(" "), e.canDeclineFriendRequest ? s("labeled-icon-button", {
                                attrs: {
                                    "btn-color": "grey",
                                    "icon-name": "user-x",
                                    label: e.$trans("Decline Request")
                                },
                                on: {
                                    click: e.onClickDeclineFriendRequest
                                }
                            }) : e._e(), e._v(" "), e.canCancelFriendRequest ? s("labeled-icon-button", {
                                attrs: {
                                    "btn-color": "grey",
                                    "icon-name": "user-x",
                                    label: e.$trans("Cancel Request")
                                },
                                on: {
                                    click: e.onClickCancelFriendRequest
                                }
                            }) : e._e(), e._v(" "), e.canRemoveFriend ? s("labeled-icon-button", {
                                attrs: {
                                    "icon-name": "user-x",
                                    label: e.$trans("Remove Friend")
                                },
                                on: {
                                    click: e.onClickRemoveFriend
                                }
                            }) : e._e(), e._v(" "), e.canObserveGame ? s("labeled-icon-button", {
                                attrs: {
                                    "icon-name": "binoculars",
                                    label: e.$trans("Observe")
                                },
                                on: {
                                    click: e.onClickObserve
                                }
                            }) : e._e(), e._v(" "), e.canFollowUser ? s("labeled-icon-button", {
                                attrs: {
                                    "icon-name": "follow",
                                    label: e.$trans("Follow")
                                },
                                on: {
                                    click: e.onClickFollowUser
                                }
                            }) : e._e(), e._v(" "), e.canUnfollowUser ? s("labeled-icon-button", {
                                attrs: {
                                    "icon-name": "unfollow",
                                    label: e.$trans("Unfollow")
                                },
                                on: {
                                    click: e.onClickUnfollowUser
                                }
                            }) : e._e(), e._v(" "), e.canGiftMembership ? s("labeled-icon-button", {
                                attrs: {
                                    "btn-color": "blue",
                                    "icon-name": "display-slider",
                                    label: e.$trans("Gift Membership")
                                },
                                on: {
                                    click: e.onClickGift
                                }
                            }) : e._e(), e._v(" "), e.canSendTrophy ? s("labeled-icon-button", {
                                attrs: {
                                    "icon-name": "trophy-plus",
                                    label: e.$trans("Give Award")
                                },
                                on: {
                                    click: e.onClickTrophy
                                }
                            }) : e._e(), e._v(" "), e.showBughousePartner && !e.isBughousePartner ? s("labeled-icon-button", {
                                attrs: {
                                    "icon-name": "bughouse",
                                    label: e.$trans("Partner")
                                },
                                on: {
                                    click: e.onClickPartner
                                }
                            }) : e._e(), e._v(" "), e.showBughousePartner && e.isBughousePartner ? s("labeled-icon-button", {
                                attrs: {
                                    "icon-name": "bughouse",
                                    label: e.$trans("Unpartner")
                                },
                                on: {
                                    click: e.onClickUnpartner
                                }
                            }) : e._e(), e._v(" "), e.canInviteToAnalysis ? s("labeled-icon-button", {
                                attrs: {
                                    "icon-name": "chess-board-search",
                                    label: e.$trans("Analysis Board")
                                },
                                on: {
                                    click: e.onClickAnalysis
                                }
                            }) : e._e(), e._v(" "), s(e.getIconLabeledComponent(e.archiveUrl), {
                                tag: "component",
                                attrs: {
                                    "icon-name": "chess-board-folder",
                                    label: e.$trans("Archive"),
                                    url: e.archiveUrl
                                },
                                on: {
                                    click: e.onClickArchive
                                }
                            }), e._v(" "), e.canBlockUser ? s("labeled-icon-button", {
                                attrs: {
                                    "icon-name": "circle-block",
                                    label: e.$trans("Block")
                                },
                                on: {
                                    click: e.onClickBlockUser
                                }
                            }) : e._e(), e._v(" "), e.canUnblockUser ? s("labeled-icon-button", {
                                attrs: {
                                    "btn-color": "red",
                                    "icon-name": "circle-block",
                                    label: e.$trans("Unblock")
                                },
                                on: {
                                    click: e.onClickUnblockUser
                                }
                            }) : e._e(), e._v(" "), e.canReportUser ? s("labeled-icon-button", {
                                attrs: {
                                    "icon-name": "circle-danger",
                                    label: e.$trans("Report")
                                },
                                on: {
                                    click: e.onClickReport
                                }
                            }) : e._e(), e._v(" "), e.dynamicActions ? e._l(e.dynamicActions, (function(e, t) {
                                return s("labeled-icon-button", {
                                    key: t,
                                    attrs: {
                                        "icon-name": e.iconName,
                                        label: e.label
                                    },
                                    on: {
                                        click: e.handler
                                    }
                                })
                            })) : e._e()], 2) : e._e(), e._v(" "), e.chatDropdownTarget ? s("chat-options-dropdown", {
                                attrs: {
                                    target: e.chatDropdownTarget,
                                    position: e.position,
                                    "chat-options": e.chatOptions
                                },
                                on: {
                                    "option-selected": e.onClickChatOption,
                                    hide: e.hideChatDropdown
                                }
                            }) : e._e(), e._v(" "), e.analysisDropdownTarget ? s("analysis-options-dropdown", {
                                attrs: {
                                    target: e.analysisDropdownTarget,
                                    position: e.position,
                                    "analysis-options": e.analysisOptions
                                },
                                on: {
                                    "option-selected": e.onClickAnalysisOption,
                                    hide: e.hideAnalysisDropdown
                                }
                            }) : e._e()], 1)
                        }), [], !1, (function user_actions_injectStyles(e) {
                            this.$style = nn.locals || nn
                        }), null, null).exports,
                        ln = s(4593),
                        cn = {
                            name: "OnlineStatus",
                            props: {
                                isInLivechess: Boolean,
                                isOnline: Boolean
                            },
                            computed: {
                                classes() {
                                    return [this.$style.component, {
                                        [this.$style.online]: this.isOnline
                                    }, {
                                        [this.$style.live]: this.isInLivechess
                                    }]
                                }
                            }
                        },
                        dn = {
                            component: "online-status-component",
                            online: "online-status-online",
                            live: "online-status-live"
                        };
                    var un = (0, ns.Z)(cn, (function() {
                            var e = this,
                                t = e.$createElement;
                            return (e._self._c || t)("div", {
                                class: e.classes
                            })
                        }), [], !1, (function online_status_injectStyles(e) {
                            this.$style = dn.locals || dn
                        }), null, null).exports,
                        mn = {
                            name: "PresenceSquare",
                            props: {
                                size: {
                                    type: Number,
                                    required: !1,
                                    default: 3
                                },
                                userPresence: {
                                    type: Object,
                                    required: !0
                                }
                            },
                            computed: {
                                squareColor() {
                                    var e, t;
                                    return (null == (e = this.userPresence) ? void 0 : e.isPlaying) ? this.$style.red : (null == (t = this.userPresence) ? void 0 : t.isOnline) ? this.$style.green : ""
                                },
                                squareStyle() {
                                    return `width: ${this.size}rem; height: ${this.size}rem;`
                                }
                            }
                        },
                        hn = {
                            component: "presence-square-component",
                            square: "presence-square-square",
                            round: "presence-square-round",
                            red: "presence-square-red",
                            green: "presence-square-green"
                        };
                    var pn = (0, ns.Z)(mn, (function() {
                            var e, t = this,
                                s = t.$createElement,
                                a = t._self._c || s;
                            return a("div", {
                                class: t.$style.component
                            }, [a("div", {
                                class: [t.$style.square, t.squareColor, (e = {}, e[t.$style.round] = t.size > 2, e)],
                                style: t.squareStyle
                            })])
                        }), [], !1, (function presence_square_injectStyles(e) {
                            this.$style = hn.locals || hn
                        }), null, null).exports,
                        bn = {
                            name: "UserAvatar",
                            directives: {
                                ImageDefer: ln.Z
                            },
                            components: {
                                OnlineStatus: un,
                                PresenceSquare: pn
                            },
                            props: {
                                alt: {
                                    type: String,
                                    default: ""
                                },
                                image: {
                                    type: String,
                                    required: !0
                                },
                                isLive: {
                                    type: Boolean,
                                    default: !1
                                },
                                presenceData: {
                                    type: Object,
                                    default: void 0
                                },
                                presenceSize: {
                                    type: Number,
                                    default: 1.5
                                },
                                isOnline: {
                                    type: Boolean,
                                    default: !1
                                },
                                url: {
                                    type: String,
                                    required: !1
                                }
                            },
                            computed: {
                                blankImage: () => (0, da.n)("bundles/web/images/user-image.svg")
                            }
                        },
                        gn = {
                            component: "user-avatar-component",
                            image: "user-avatar-image"
                        };
                    var vn = (0, ns.Z)(bn, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s(e.url ? "a" : "div", {
                                tag: "component",
                                class: e.$style.component,
                                attrs: {
                                    href: e.url
                                }
                            }, [s("img", {
                                directives: [{
                                    name: "image-defer",
                                    rawName: "v-image-defer",
                                    value: {
                                        src: e.image,
                                        srcset: !0
                                    },
                                    expression: "{src: image, srcset: true}"
                                }],
                                class: e.$style.image,
                                attrs: {
                                    alt: e.alt.length ? e.alt : null,
                                    src: e.blankImage,
                                    width: "50",
                                    height: "50"
                                }
                            }), e._v(" "), e.presenceData ? s("presence-square", {
                                attrs: {
                                    size: e.presenceSize,
                                    "user-presence": e.presenceData
                                }
                            }) : s("online-status", {
                                attrs: {
                                    "is-in-live-chess": e.isLive,
                                    "is-online": e.isOnline
                                }
                            })], 1)
                        }), [], !1, (function user_avatar_injectStyles(e) {
                            this.$style = gn.locals || gn
                        }), null, null).exports,
                        wn = {
                            name: "UserFlairStatus",
                            props: {
                                status: {
                                    type: String,
                                    required: !0
                                }
                            }
                        },
                        fn = {
                            component: "user-flair-status-component"
                        };
                    var yn = (0, ns.Z)(wn, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return e.status.length ? s("div", {
                                class: e.$style.component,
                                domProps: {
                                    textContent: e._s(e.status)
                                }
                            }) : e._e()
                        }), [], !1, (function user_flair_status_injectStyles(e) {
                            this.$style = fn.locals || fn
                        }), null, null).exports,
                        _n = {
                            name: "UserRating",
                            components: {
                                IconFont: Vo.Z
                            },
                            props: {
                                icon: {
                                    type: String,
                                    required: !0
                                },
                                rating: {
                                    type: Number,
                                    required: !0
                                }
                            }
                        },
                        kn = {
                            component: "user-rating-component",
                            icon: "user-rating-icon",
                            rating: "user-rating-rating"
                        };
                    var Cn = (0, ns.Z)(_n, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("span", {
                                class: e.$style.component
                            }, [s("icon-font", {
                                class: e.$style.icon,
                                attrs: {
                                    theme: "primary",
                                    name: e.icon
                                }
                            }), e._v(" "), s("span", {
                                class: e.$style.rating
                            }, [e._v("\n    " + e._s(e.rating) + "\n  ")])], 1)
                        }), [], !1, (function user_rating_injectStyles(e) {
                            this.$style = kn.locals || kn
                        }), null, null).exports,
                        Sn = {
                            name: "CountryFlag",
                            directives: {
                                tooltip: Sa.Z
                            },
                            props: {
                                code: {
                                    type: [Number, String],
                                    required: !1
                                },
                                name: {
                                    type: [String, Object],
                                    required: !1
                                },
                                size: {
                                    type: String,
                                    required: !1
                                }
                            },
                            computed: {
                                decoratedCode() {
                                    return this.isChessVerified || this.isSanctioned ? "sanctioned" : this.code
                                },
                                isChessVerified() {
                                    return ["fd", 431].includes(this.code)
                                },
                                isRussia() {
                                    var e;
                                    return ["ru", "RU", "116"].includes(null == (e = this.code) ? void 0 : e.toString())
                                },
                                isSanctioned() {
                                    var e, t;
                                    return Boolean((null == (t = null == (e = window.chesscom) ? void 0 : e.features) ? void 0 : t.includes("sanction_russia_flag")) && this.isRussia)
                                },
                                tooltip() {
                                    return this.isChessVerified ? Vt.Z.trans("Due to the ongoing war and resulting international sanctions, Russian and Belarusian flags will not be shown for players in Verified events.") : this.name
                                },
                                ukraineLink: () => i.Z.generate("web_blog_view", {
                                    url: "CHESScom/on-the-invasion-of-ukraine"
                                })
                            }
                        },
                        xn = (0, ns.Z)(Sn, (function() {
                            var e, t, s = this,
                                a = s.$createElement,
                                o = s._self._c || a;
                            return s.isSanctioned ? o("a", {
                                directives: [{
                                    name: "tooltip",
                                    rawName: "v-tooltip",
                                    value: s.$trans("Click here to see our stance on the war in Ukraine"),
                                    expression: "$trans('Click here to see our stance on the war in Ukraine')"
                                }],
                                class: ["country-flags-component", "country-" + s.decoratedCode, (e = {}, e["country-flags-" + s.size] = s.size, e)],
                                attrs: {
                                    href: s.ukraineLink,
                                    target: "_blank"
                                }
                            }) : o("div", {
                                directives: [{
                                    name: "tooltip",
                                    rawName: "v-tooltip",
                                    value: s.tooltip,
                                    expression: "tooltip"
                                }],
                                class: ["country-flags-component", ("country-" + s.decoratedCode).toLowerCase(), (t = {}, t["country-flags-" + s.size] = s.size, t)]
                            })
                        }), [], !1, null, null, null).exports,
                        $n = s(7660),
                        Pn = {
                            name: "Flair",
                            props: {
                                available: {
                                    type: Boolean,
                                    default: !0
                                },
                                showTheNothingFlair: {
                                    type: Boolean,
                                    default: !1
                                },
                                code: {
                                    type: String,
                                    default: vo.Wp.code
                                },
                                size: {
                                    type: String
                                }
                            },
                            emits: ["click"],
                            computed: {
                                isNothing() {
                                    return this.code === vo.Wp.code
                                }
                            }
                        },
                        En = (0, ns.Z)(Pn, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return e.showTheNothingFlair || !e.isNothing ? s("span", {
                                class: ["flair-component", "flair-" + e.code, "flair-" + e.size],
                                on: {
                                    click: function(t) {
                                        return e.$emit("click", t)
                                    }
                                }
                            }) : e._e()
                        }), [], !1, null, null, null).exports;
                    const generateRoute = (e, t, s) => {
                            let a = e;
                            const o = t;
                            if (s) {
                                const e = document.querySelector("[data-url-locale]"),
                                    t = null == e ? void 0 : e.getAttribute("data-url-locale"),
                                    n = "en" !== (null == t ? void 0 : t.split("_")[0]) && (null == t ? void 0 : t.split("_")[0]);
                                n && o && (a = s, o._locale = n)
                            }
                            return i.Z.generate(a, o)
                        },
                        On = "web_user_settings_edit",
                        profile_config_routes_communityGuidelines = () => generateRoute("web_policies_community"),
                        profile_config_routes_settings = () => generateRoute(On);
                    Vt.Z.trans("Are you sure you want to disable this account?"), Vt.Z.trans("Edit status"), Vt.Z.trans("Are you sure you want to enable this account?"), Vt.Z.trans("Enter a status here"), Vt.Z.trans("Are you sure you want to impersonate this user?"), Vt.Z.trans("Error occurred"), Vt.Z.trans("Are you sure you want to mute this user?"), Vt.Z.trans("Are you sure you want to remove user About section?"), Vt.Z.trans("Are you sure you want to remove this user's avatar?"), Vt.Z.trans("Are you sure you want to remove this user's background?"), Vt.Z.trans("Are you sure you want to report user for spamming?"), Vt.Z.trans("Are you sure you want to reset this user's flair?"), Vt.Z.trans("Save status"), Vt.Z.trans("Your status must be %len% characters or less", {
                        "%len%": 50
                    }), Vt.Z.trans("Are you sure you want to stop impersonating this user?"), Vt.Z.trans("Are you sure you want to unmute this user?"), Vt.Z.trans("Your post seems to not fit our <a href=%url%>Community Guidelines</a>. Repeated violations may result in your account being restricted. Thank you for helping Chess.com stay a fun and friendly place for all!", {
                        "%url%": profile_config_routes_communityGuidelines()
                    });
                    var An = {
                            props: {
                                membership: {
                                    type: Number
                                }
                            },
                            computed: {
                                flairHref() {
                                    return (({
                                        code: e,
                                        flairMembership: t,
                                        selfIsPremium: s
                                    }) => t >= vo.p0.moderator ? vo._j.about() : t === vo.p0.cheater || t === vo.p0.abuser ? profile_config_routes_communityGuidelines() : vo.yc.includes(e) ? "" : s ? `${profile_config_routes_settings()}#flair-modal` : vo._j.membership("flair"))({
                                        code: this.standardizedFlairCodeFromMixin,
                                        flairMembership: this.membership,
                                        selfIsPremium: (0, bo.S_)("isPremium"),
                                        selfIsModerator: (0, bo.S_)("isModerator")
                                    })
                                },
                                flairTooltip() {
                                    return (({
                                        code: e,
                                        flairMembership: t
                                    }) => t >= vo.p0.staff ? vo.Iz.staff : t >= vo.p0.moderator ? vo.Iz.moderator : t < vo.p0.basic ? vo.Cz[t] : vo.yc.includes(e) ? vo.Cz[vo.p0.unspecifiedClosed] : vo.Iz.showYourFlair)({
                                        code: this.standardizedFlairCodeFromMixin,
                                        flairMembership: this.membership
                                    })
                                },
                                shouldSeeUpgradeModal: () => !(0, bo.S_)("isPremium"),
                                standardizedFlairCodeFromMixin() {
                                    return this.code || this.userFlair && this.userFlair.code || vo.Wp.code
                                }
                            },
                            methods: {
                                handleFlairClick() {
                                    this.shouldSeeUpgradeModal ? ((e = {}) => {
                                        postMessage({
                                            key: ho,
                                            payload: e
                                        })
                                    })({
                                        referral: "flair",
                                        startingSlide: "flair",
                                        title: this.$trans("Want Your Own Flair?")
                                    }) : this.flairHref.length && window.open(this.flairHref, "_blank")
                                }
                            }
                        },
                        Tn = {
                            name: "UserMembershipIcon",
                            props: {
                                membership: {
                                    type: [Number, String],
                                    required: !0
                                },
                                size: {
                                    type: String
                                }
                            },
                            data() {
                                return {
                                    membershipIcon: vo.qG[this.membership]
                                }
                            },
                            computed: {
                                isBasic() {
                                    return this.membership === vo.p0.basic
                                },
                                componentClasses() {
                                    return ["string" == typeof this.membership ? this.$style[this.membership] : this.$style[`level-${this.membership}`], this.$style[this.size], this.$style.component]
                                }
                            }
                        },
                        Mn = {
                            component: "user-membership-icon-component",
                            "level-30": "user-membership-icon-level-30",
                            gold: "user-membership-icon-gold",
                            "level-40": "user-membership-icon-level-40",
                            platinum: "user-membership-icon-platinum",
                            "level-50": "user-membership-icon-level-50",
                            diamond: "user-membership-icon-diamond",
                            "level-90": "user-membership-icon-level-90",
                            staff: "user-membership-icon-staff",
                            "level-80": "user-membership-icon-level-80",
                            mod: "user-membership-icon-mod",
                            moderator: "user-membership-icon-moderator",
                            "level-5": "user-membership-icon-level-5",
                            "level-8": "user-membership-icon-level-8",
                            cheater: "user-membership-icon-cheater",
                            unspecifiedClosed: "user-membership-icon-unspecifiedClosed",
                            "level-6": "user-membership-icon-level-6",
                            abuser: "user-membership-icon-abuser",
                            "level-7": "user-membership-icon-level-7",
                            voluntarilyClosed: "user-membership-icon-voluntarilyClosed",
                            "level-10": "user-membership-icon-level-10",
                            basic: "user-membership-icon-basic",
                            level: "user-membership-icon-level",
                            middle: "user-membership-icon-middle",
                            large: "user-membership-icon-large",
                            responsive: "user-membership-icon-responsive",
                            "x-large": "user-membership-icon-x-large"
                        };
                    var Rn = {
                            name: "UserFlairIcon",
                            components: {
                                Flair: En,
                                UserMembershipIcon: (0, ns.Z)(Tn, (function() {
                                    var e = this,
                                        t = e.$createElement,
                                        s = e._self._c || t;
                                    return e.membershipIcon && !e.isBasic ? s("span", {
                                        class: e.componentClasses
                                    }) : e._e()
                                }), [], !1, (function user_membership_icon_injectStyles(e) {
                                    this.$style = Mn.locals || Mn
                                }), null, null).exports
                            },
                            directives: {
                                Tooltip: Sa.Z
                            },
                            mixins: [An],
                            props: {
                                code: {
                                    type: String
                                },
                                membership: {
                                    type: [Number, String],
                                    default: vo.p0.basic
                                },
                                size: {
                                    type: String,
                                    default: "small"
                                }
                            },
                            data: () => ({
                                showMembershipIconFallback: (0, f.F)(y.R.SHOW_MEMBERSHIP_ICON_FALLBACK)
                            })
                        },
                        In = {
                            component: "user-flair-icon-component"
                        };
                    var jn = (0, ns.Z)(Rn, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return e.code ? s("a", {
                                class: e.$style.component,
                                attrs: {
                                    "aria-label": e.flairTooltip,
                                    href: e.flairHref
                                },
                                on: {
                                    click: function(t) {
                                        return t.stopPropagation(), t.preventDefault(), e.handleFlairClick.apply(null, arguments)
                                    }
                                }
                            }, [s("flair", {
                                directives: [{
                                    name: "tooltip",
                                    rawName: "v-tooltip",
                                    value: e.flairTooltip,
                                    expression: "flairTooltip"
                                }],
                                attrs: {
                                    code: e.code,
                                    size: e.size
                                }
                            })], 1) : e.showMembershipIconFallback ? e._e() : s("user-membership-icon", {
                                attrs: {
                                    membership: e.membership,
                                    size: e.size
                                }
                            })
                        }), [], !1, (function user_flair_icon_injectStyles(e) {
                            this.$style = In.locals || In
                        }), null, null),
                        Bn = jn.exports,
                        Ln = s(5775),
                        Dn = {
                            name: "UserTagline",
                            components: {
                                CountryFlag: xn,
                                UserChessTitle: $n.Z,
                                UserFlairIcon: Bn,
                                UserUsername: Ln.Z
                            },
                            props: {
                                country: {
                                    type: Object,
                                    required: !1
                                },
                                flairCode: {
                                    type: String
                                },
                                isUsernameClickable: {
                                    type: Boolean,
                                    default: !0
                                },
                                isDarkMode: Boolean,
                                iconAnchorIsEnabled: {
                                    type: Boolean,
                                    default: !0
                                },
                                membership: {
                                    type: [Number, String],
                                    default: vo.p0.basic
                                },
                                notClickable: {
                                    type: Boolean,
                                    default: !1
                                },
                                rating: {
                                    type: Number,
                                    required: !1
                                },
                                title: {
                                    type: String,
                                    required: !1
                                },
                                url: {
                                    type: String,
                                    required: !1
                                },
                                usernameTheme: {
                                    type: String,
                                    default: "blue"
                                },
                                titleUrl: {
                                    type: String,
                                    required: !1
                                },
                                username: {
                                    type: String,
                                    required: !0
                                },
                                openProfileOnNewTab: {
                                    type: Boolean,
                                    required: !1
                                },
                                openTitleOnNewTab: {
                                    type: Boolean,
                                    required: !1
                                }
                            }
                        },
                        Un = {
                            component: "user-tagline-component",
                            username: "user-tagline-username",
                            "not-clickable": "user-tagline-not-clickable",
                            rating: "user-tagline-rating",
                            darkMode: "user-tagline-darkMode",
                            dark: "user-tagline-dark"
                        };
                    var zn = (0, ns.Z)(Dn, (function() {
                            var e, t, s = this,
                                a = s.$createElement,
                                o = s._self._c || a;
                            return o("div", {
                                class: [s.$style.component, (e = {}, e[s.$style.darkMode] = s.isDarkMode, e)]
                            }, [s.title ? o("user-chess-title", {
                                attrs: {
                                    "open-new-tab": s.openTitleOnNewTab,
                                    url: s.titleUrl,
                                    title: s.title
                                }
                            }) : s._e(), s._v(" "), o("user-username", {
                                class: [s.$style.username, (t = {}, t[s.$style["not-clickable"]] = s.notClickable, t)],
                                attrs: {
                                    "is-clickable": s.isUsernameClickable,
                                    "open-new-tab": s.openProfileOnNewTab,
                                    theme: s.isDarkMode ? "dark" : s.usernameTheme,
                                    url: s.url,
                                    "data-test-element": "user-tagline-username",
                                    username: s.username
                                }
                            }), s._v(" "), s.rating ? o("span", {
                                class: [s.$style.rating, s.$style[s.usernameTheme]]
                            }, [s._v("\n    (" + s._s(s.rating) + ")\n  ")]) : s._e(), s._v(" "), s.country ? o("country-flag", {
                                attrs: {
                                    code: s.country.code,
                                    name: s.country.name
                                }
                            }) : s._e(), s._v(" "), s.flairCode || s.membership ? o("user-flair-icon", {
                                attrs: {
                                    code: s.flairCode,
                                    membership: s.membership
                                }
                            }) : s._e(), s._v(" "), s._t("default")], 2)
                        }), [], !1, (function user_tagline_injectStyles(e) {
                            this.$style = Un.locals || Un
                        }), null, null).exports,
                        qn = {
                            init: s(1128).U,
                            logEvent: ps.K
                        },
                        Vn = {
                            name: "PresenceButton",
                            directives: {
                                tooltip: Sa.Z
                            },
                            components: {
                                V5Button: ko.V5Button
                            },
                            props: {
                                username: {
                                    type: String,
                                    required: !0
                                },
                                userPresence: {
                                    type: Object,
                                    required: !0
                                },
                                isButtonSmall: {
                                    type: Boolean,
                                    default: !1
                                },
                                isIconsOnly: {
                                    type: Boolean,
                                    default: !1
                                },
                                isShowLastOnline: {
                                    type: Boolean,
                                    default: !1
                                },
                                isWatchOnly: {
                                    type: Boolean,
                                    default: !1
                                },
                                location: {
                                    type: String,
                                    default: "N/A"
                                }
                            },
                            computed: {
                                buttonData() {
                                    const {
                                        battleLink: e,
                                        eventLink: t,
                                        gameLink: s,
                                        isOnline: a,
                                        isPlaying: o,
                                        offlineSince: n
                                    } = this.userPresence;
                                    return o ? {
                                        theme: this.isIconsOnly ? "" : "danger",
                                        text: this.isIconsOnly ? "" : this.$trans("Playing"),
                                        tooltip: this.$trans("Watch"),
                                        icon: "binoculars",
                                        show: !0,
                                        href: t || s || e
                                    } : a ? {
                                        theme: this.isIconsOnly ? "" : "primary",
                                        text: this.isIconsOnly ? "" : this.$trans("Online"),
                                        tooltip: this.$trans("Challenge"),
                                        icon: "chess-board-plus",
                                        show: !this.isWatchOnly,
                                        href: i.Z.generate("web_play_new", {
                                            opponent: this.username
                                        })
                                    } : this.isShowLastOnline ? {
                                        lastOnline: _o.p6.relative(new Date(n)),
                                        show: !1
                                    } : {
                                        show: !1
                                    }
                                }
                            },
                            methods: {
                                handleClick() {
                                    const e = this.userPresence.isPlaying ? "watch" : "challenge",
                                        t = this.location;
                                    qn.logEvent("presenceUiClick", {
                                        selection: e,
                                        location: t
                                    })
                                }
                            }
                        },
                        Nn = {
                            component: "presence-button-component",
                            placeholder: "presence-button-placeholder",
                            visible: "presence-button-visible",
                            hidden: "presence-button-hidden",
                            narrow: "presence-button-narrow",
                            watchIconOnly: "presence-button-watchIconOnly",
                            challengeIconOnly: "presence-button-challengeIconOnly"
                        };
                    var Zn = (0, ns.Z)(Vn, (function() {
                            var e, t, s, a, o = this,
                                n = o.$createElement,
                                r = o._self._c || n;
                            return r("div", {
                                class: [o.$style.component, (e = {}, e[o.$style.narrow] = o.isIconsOnly, e), (t = {}, t[o.$style.visible] = o.buttonData.show, t), (s = {}, s[o.$style.hidden] = !o.buttonData.show, s)]
                            }, [o.buttonData.show ? r("v5-button", {
                                directives: [{
                                    name: "tooltip",
                                    rawName: "v-tooltip",
                                    value: o.buttonData.tooltip,
                                    expression: "buttonData.tooltip"
                                }],
                                class: (a = {
                                    staffGreen: "primary" === o.buttonData.theme
                                }, a[o.$style.challengeIconOnly] = o.isIconsOnly && o.userPresence.isOnline && !o.userPresence.isPlaying, a[o.$style.watchIconOnly] = o.isIconsOnly && o.userPresence.isPlaying, a),
                                attrs: {
                                    href: o.buttonData.href,
                                    size: o.isButtonSmall ? "x-small" : "small",
                                    theme: o.buttonData.theme
                                },
                                on: {
                                    click: function(e) {
                                        return o.handleClick(e)
                                    }
                                }
                            }, [r("span", {
                                domProps: {
                                    textContent: o._s(o.buttonData.text)
                                }
                            }), o._v(" "), r("span", {
                                class: ["icon-font-chess ui_v5-button-icon", o.buttonData.icon]
                            })]) : o.isShowLastOnline && o.buttonData.lastOnline ? r("div", {
                                domProps: {
                                    textContent: o._s(o.buttonData.lastOnline)
                                }
                            }) : r("div", {
                                class: o.$style.placeholder
                            })], 1)
                        }), [], !1, (function presence_button_injectStyles(e) {
                            this.$style = Nn.locals || Nn
                        }), null, null).exports,
                        Fn = {
                            name: "UserPopover",
                            components: {
                                LoaderThreeBounce: Mo.Z,
                                UserAvatar: vn,
                                UserFlairStatus: yn,
                                UserRating: Cn,
                                UserTagline: zn,
                                UserActions: rn,
                                AdminActions: Oo,
                                V5Button: ko.V5Button,
                                V5Input: ko.V5Input,
                                PresenceButton: Zn
                            },
                            directives: {
                                Tooltip: Sa.Z,
                                ClickOutside: To
                            },
                            props: {
                                avatar: {
                                    type: String,
                                    default: ""
                                },
                                ratings: {
                                    type: Array,
                                    required: !0
                                },
                                chessTitle: {
                                    type: String,
                                    required: !1
                                },
                                country: {
                                    type: Object,
                                    required: !1
                                },
                                flair: {
                                    type: Object,
                                    default: () => ({
                                        code: "",
                                        status: ""
                                    })
                                },
                                isEnabled: {
                                    type: Boolean
                                },
                                isGuest: {
                                    type: Boolean,
                                    default: !1
                                },
                                isLoading: {
                                    type: Boolean,
                                    default: !1
                                },
                                joinedDate: String,
                                lastLoginDate: String,
                                membership: {
                                    type: Number,
                                    required: !1
                                },
                                onlineStatus: {
                                    type: [Boolean, String],
                                    required: !1
                                },
                                usernameElementRef: {
                                    type: HTMLElement,
                                    required: !0
                                },
                                username: {
                                    type: String,
                                    required: !1
                                },
                                isFideVerified: {
                                    type: Boolean,
                                    default: !1
                                },
                                canAddFriend: Boolean,
                                canBlockUser: Boolean,
                                canUseGlobalChat: Boolean,
                                canReportUser: Boolean,
                                canCreateChallenge: Boolean,
                                canFollowUser: Boolean,
                                canGiftMembership: Boolean,
                                canRemoveFriend: Boolean,
                                canSendMessage: Boolean,
                                canInviteToChat: Boolean,
                                canSendTrophy: Boolean,
                                canUnblockUser: Boolean,
                                canUnfollowUser: Boolean,
                                loggedAsAnother: Boolean,
                                canMuteUser: {
                                    type: Boolean,
                                    default: !1
                                },
                                canObserveGame: {
                                    type: Boolean,
                                    default: !1
                                },
                                isBughousePartner: {
                                    type: Boolean,
                                    default: !1
                                },
                                shouldShowModeration: {
                                    type: Boolean,
                                    default: !1
                                },
                                challengeUrl: String,
                                canCancelFriendRequest: {
                                    type: Boolean,
                                    default: !1
                                },
                                canDeclineFriendRequest: {
                                    type: Boolean,
                                    default: !1
                                },
                                canAcceptFriendRequest: {
                                    type: Boolean,
                                    default: !1
                                },
                                archiveUrl: String,
                                chatOptions: {
                                    type: Array,
                                    default: () => []
                                },
                                canInviteToAnalysis: {
                                    type: Boolean,
                                    default: !1
                                },
                                analysisOptions: {
                                    type: Array,
                                    default: () => []
                                },
                                canModerate: {
                                    type: Boolean,
                                    default: !1
                                },
                                clientName: String,
                                canWarnOnChat: Boolean,
                                canModerateOnChat: Boolean,
                                showBughousePartner: {
                                    type: Boolean,
                                    default: !1
                                },
                                openProfileOnNewTab: {
                                    type: Boolean,
                                    required: !1
                                },
                                membershipUrl: String,
                                dynamicActions: Array,
                                clubChatIdForModeratorActions: String,
                                popoverPosition: {
                                    type: Object,
                                    default: null
                                },
                                presenceDetails: {
                                    type: Object,
                                    default: null
                                },
                                showProfileUrls: {
                                    type: Boolean,
                                    default: !0
                                },
                                userAlreadyMutedOnChat: Boolean,
                                uuid: String,
                                leagueCode: String,
                                leagueDivision: String,
                                leagueName: String
                            },
                            emits: ["chat-kick-user", "chat-mute-user", "chat-warn-user", "ban-user", "kick-user", "mute-user", "warn-user", "block-user", "remove-friend", "user-popover-hide", "request-chat", "invite-analysis", "bughouse-unpartner", "bughouse-partner", "observe-user", "show-trophy", "show-report", "unblock-user", "unfollow-user", "follow-user", "accept-friend-request", "start-direct-chat", "show-archive", "show-gift", "decline-friend-request", "cancel-friend-request", "add-friend", "send-message", "create-challenge"],
                            data: () => ({
                                clubChatModeratorMessage: "",
                                isLoggedIn: (0, bo.jl)(),
                                offset: 12,
                                translations: vo.Iz,
                                confirmMessage: null,
                                confirmCallback: null,
                                position: {
                                    x: 0,
                                    y: 0,
                                    top: 0,
                                    left: 0
                                }
                            }),
                            computed: {
                                adminActionsIsVisible() {
                                    return this.canModerate || this.canWarnOnChat || this.canModerateOnChat || this.clubChatIdForModeratorActions
                                },
                                formatedJoinedDate() {
                                    return (0, bo.jl)() ? this.joinedDate : _o.p6.relative(this.joinedDate)
                                },
                                formatedLastLoginDate() {
                                    return (0, bo.jl)() ? this.presenceLastLoginDate : _o.p6.relative(this.presenceLastLoginDate)
                                },
                                memberUrl() {
                                    return i.Z.generate("web_member_view", {
                                        username: this.username
                                    })
                                },
                                fideUrl: () => i.Z.generate("web_verification_index"),
                                ratingsToShow() {
                                    return this.ratings.slice(0, 3)
                                },
                                isConfirmVisible() {
                                    return !!this.confirmMessage && !!this.confirmCallback
                                },
                                isFideEnabledAndVerified() {
                                    return this.isFideVerified && window.chesscom.features.includes("chess_com_verified")
                                },
                                isLeaguePlayer() {
                                    return this.leagueCode && this.leagueDivision && this.username
                                },
                                showOfflineText() {
                                    return this.presenceDetails && !this.presenceDetails.isOnline
                                },
                                presenceLastLoginDate() {
                                    var e;
                                    return !(null == (e = this.presenceDetails) ? void 0 : e.offlineSince) || this.presenceDetails.isOfflineStatusUncertain ? this.lastLoginDate || "" : _o.p6.relative(new Date(this.presenceDetails.offlineSince))
                                },
                                inlineStyles() {
                                    return setPopoverPosition(this.position)
                                },
                                userDivision() {
                                    return vo._j.userDivision({
                                        league: this.leagueCode,
                                        division: this.leagueDivision
                                    })
                                }
                            },
                            mounted() {
                                this.popoverPosition ? this.position = this.popoverPosition : this.updatePopoverPosition()
                            },
                            methods: {
                                onMouseEnter() {
                                    clearTimeout(this.hideTimeout)
                                },
                                onMouseLeave() {
                                    this.hideTimeout = setTimeout((() => {
                                        this.hidePopover()
                                    }), 500)
                                },
                                hidePopover() {
                                    this.$emit("user-popover-hide")
                                },
                                onConfirmYes() {
                                    this.confirmCallback && this.confirmCallback(), this.onConfirmNo()
                                },
                                onConfirmNo() {
                                    this.confirmMessage = null, this.confirmCallback = null
                                },
                                onClickRemoveFriend() {
                                    this.confirmMessage = this.$trans("Are you sure you want to remove this friend from your list?"), this.confirmCallback = () => this.$emit("remove-friend")
                                },
                                onClickBlockUser() {
                                    this.confirmMessage = this.$trans("Are you sure you want to block this user?"), this.confirmCallback = () => this.$emit("block-user")
                                },
                                onClickWarn() {
                                    this.confirmMessage = this.$trans("Are you sure you want to warn this user?"), this.confirmCallback = () => this.$emit("warn-user")
                                },
                                onClickMute() {
                                    this.confirmMessage = this.$trans("Are you sure you want to mute this user?"), this.confirmCallback = () => this.$emit("mute-user")
                                },
                                onClickKick() {
                                    this.confirmMessage = this.$trans("Are you sure you want to kick this user?"), this.confirmCallback = () => this.$emit("kick-user")
                                },
                                onClickBan() {
                                    this.confirmMessage = this.$trans("Are you sure you want to ban this user?"), this.confirmCallback = () => this.$emit("ban-user")
                                },
                                onClickChatWarn() {
                                    this.confirmMessage = this.$trans("Are you sure you want to warn this user?"), this.clubChatIdForModeratorActions ? this.confirmCallback = this.onClubChatAction(Co.WARN) : this.confirmCallback = () => this.$emit("chat-warn-user")
                                },
                                onClickChatMute() {
                                    this.confirmMessage = this.$trans("Are you sure you want to mute this user?"), this.clubChatIdForModeratorActions ? this.confirmCallback = this.onClubChatAction(Co.MUTE) : this.confirmCallback = () => this.$emit("chat-mute-user")
                                },
                                onClickChatMuteRemoveMessages() {
                                    this.confirmMessage = this.$trans("Are you sure you want to mute this user?"), this.confirmCallback = this.onClubChatAction(Co.MUTE, !0)
                                },
                                onClickChatUnMute() {
                                    this.confirmMessage = this.$trans("Are you sure you want to unmute this user?"), this.confirmCallback = this.onClubChatAction(Co.UNMUTE)
                                },
                                onClickChatKick() {
                                    this.confirmMessage = this.$trans("Are you sure you want to kick this user?"), this.clubChatIdForModeratorActions || (this.confirmCallback = () => this.$emit("chat-kick-user"))
                                },
                                onClubChatAction(e, t) {
                                    const s = {
                                        chatId: this.clubChatIdForModeratorActions,
                                        key: mo,
                                        type: e,
                                        userId: this.uuid
                                    };
                                    return t && (s.hideMessages = !0), () => {
                                        s.message = this.clubChatModeratorMessage, postMessage(s)
                                    }
                                },
                                updatePopoverPosition() {
                                    if (!this.usernameElementRef || !this.$refs.userPopover) return;
                                    const e = this.usernameElementRef.getBoundingClientRect(),
                                        t = this.$refs.userPopover.offsetHeight;
                                    this.position = (0, go.MD)(e, t)
                                }
                            }
                        },
                        Gn = {
                            popover: "user-popover-popover",
                            bottom: "user-popover-bottom",
                            top: "user-popover-top",
                            component: "user-popover-component",
                            "avatar-placeholder": "user-popover-avatar-placeholder",
                            profile: "user-popover-profile",
                            meta: "user-popover-meta",
                            info: "user-popover-info",
                            onlive: "user-popover-onlive",
                            online: "user-popover-online",
                            status: "user-popover-status",
                            details: "user-popover-details",
                            secondary: "user-popover-secondary",
                            loader: "user-popover-loader",
                            actions: "user-popover-actions",
                            ratings: "user-popover-ratings",
                            confirm: "user-popover-confirm",
                            "moderator-message": "user-popover-moderator-message",
                            badge: "user-popover-badge"
                        };
                    var Wn = (0, ns.Z)(Fn, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                directives: [{
                                    name: "click-outside",
                                    rawName: "v-click-outside",
                                    value: e.onMouseLeave,
                                    expression: "onMouseLeave"
                                }],
                                ref: "userPopover",
                                class: [e.$style.popover, e.$style[e.position.x], e.$style[e.position.y]],
                                style: e.inlineStyles,
                                on: {
                                    mouseenter: e.onMouseEnter,
                                    mouseleave: e.onMouseLeave
                                }
                            }, [s("div", {
                                class: e.$style.component
                            }, [s("div", {
                                class: e.$style.profile
                            }, [s("div", {
                                class: e.$style.meta
                            }, [e.username ? s("user-avatar", {
                                attrs: {
                                    image: e.avatar,
                                    "presence-data": e.presenceDetails,
                                    url: e.showProfileUrls ? e.memberUrl : null
                                }
                            }) : e._e(), e._v(" "), e.username ? e._e() : s("div", {
                                class: e.$style["avatar-placeholder"]
                            }), e._v(" "), e.username ? s("div", {
                                class: e.$style.info
                            }, [s("user-tagline", {
                                attrs: {
                                    "username-theme": "blue",
                                    country: e.country,
                                    "flair-code": e.flair ? e.flair.code : "",
                                    membership: e.membership,
                                    "not-clickable": !e.showProfileUrls,
                                    "open-profile-on-new-tab": e.openProfileOnNewTab,
                                    title: e.chessTitle,
                                    url: e.showProfileUrls ? e.memberUrl : null,
                                    username: e.username
                                }
                            }), e._v(" "), e.isEnabled ? s("user-flair-status", {
                                attrs: {
                                    status: e.flair ? e.flair.status : ""
                                }
                            }) : e._e(), e._v(" "), s("div", {
                                class: e.$style.ratings
                            }, e._l(e.ratingsToShow, (function(e) {
                                return s("user-rating", {
                                    directives: [{
                                        name: "tooltip",
                                        rawName: "v-tooltip",
                                        value: e.label,
                                        expression: "rating.label"
                                    }],
                                    key: e.type,
                                    attrs: {
                                        icon: e.icon,
                                        rating: e.value
                                    }
                                })
                            })), 1)], 1) : e._e(), e._v(" "), e.isLeaguePlayer ? s("a", {
                                directives: [{
                                    name: "tooltip",
                                    rawName: "v-tooltip",
                                    value: e.$trans("%leagueName% Division", {
                                        "%leagueName%": e.leagueName
                                    }),
                                    expression: "$trans('%leagueName% Division', { '%leagueName%': leagueName })"
                                }],
                                class: e.$style.badge,
                                attrs: {
                                    href: e.userDivision
                                }
                            }, [s("img", {
                                attrs: {
                                    src: "/bundles/web/images/leagues/badges/" + e.leagueCode + ".svg",
                                    width: "38",
                                    height: "28"
                                }
                            })]) : e._e(), e._v(" "), e.isFideEnabledAndVerified ? s("a", {
                                directives: [{
                                    name: "tooltip",
                                    rawName: "v-tooltip",
                                    value: e.$trans("Verified"),
                                    expression: "$trans('Verified')"
                                }],
                                class: e.$style.badge,
                                attrs: {
                                    href: e.fideUrl
                                }
                            }, [s("img", {
                                attrs: {
                                    width: "30",
                                    height: "28",
                                    src: "/bundles/web/images/color-icons/verified.svg"
                                }
                            })]) : e._e(), e._v(" "), e.username ? e._e() : s("div", {
                                class: e.$style.info
                            }, [s("loader-three-bounce", {
                                directives: [{
                                    name: "show",
                                    rawName: "v-show",
                                    value: e.isLoading,
                                    expression: "isLoading"
                                }],
                                class: e.$style.loader,
                                attrs: {
                                    size: 40
                                }
                            })], 1)], 1), e._v(" "), e.joinedDate && e.username ? s("div", {
                                class: e.$style.secondary
                            }, [s("div", {
                                domProps: {
                                    textContent: e._s(e.translations.joinedDate(e.formatedJoinedDate))
                                }
                            }), e._v(" "), s("div", {
                                class: e.$style.status
                            }, [e.presenceDetails && e.loggedAsAnother ? s("presence-button", {
                                attrs: {
                                    location: "user-popover",
                                    username: e.username,
                                    "user-presence": e.presenceDetails
                                }
                            }) : e._e(), e._v(" "), e.presenceLastLoginDate && e.showOfflineText ? s("div", {
                                domProps: {
                                    textContent: e._s(e.translations.lastOnline(e.formatedLastLoginDate))
                                }
                            }) : e._e()], 1)]) : e._e(), e._v(" "), e.username ? e._e() : s("div", {
                                class: e.$style.secondary
                            })]), e._v(" "), e.adminActionsIsVisible ? s("admin-actions", {
                                attrs: {
                                    "can-moderate": e.canModerate,
                                    "client-name": e.clientName,
                                    "can-mute-on-chat": Boolean(e.clubChatIdForModeratorActions),
                                    "can-warn-on-chat": e.canWarnOnChat || Boolean(e.clubChatIdForModeratorActions),
                                    "can-moderate-on-chat": e.canModerateOnChat,
                                    "user-already-muted-on-chat": e.userAlreadyMutedOnChat
                                },
                                on: {
                                    "warn-user": e.onClickWarn,
                                    "mute-user": e.onClickMute,
                                    "kick-user": e.onClickKick,
                                    "ban-user": e.onClickBan,
                                    "chat-warn-user": e.onClickChatWarn,
                                    "chat-mute-user": e.onClickChatMute,
                                    "chat-unmute-user": e.onClickChatUnMute,
                                    "chat-mute-user-remove-messages": e.onClickChatMuteRemoveMessages,
                                    "chat-kick-user": e.onClickChatKick
                                }
                            }) : e._e(), e._v(" "), e.isLoggedIn && !e.isGuest ? s("div", {
                                class: e.$style.actions
                            }, [e.username ? s("user-actions", {
                                attrs: {
                                    avatar: e.avatar,
                                    "can-add-friend": e.canAddFriend,
                                    "can-block-user": e.canBlockUser,
                                    "can-create-challenge": e.canCreateChallenge,
                                    "can-follow-user": e.canFollowUser,
                                    "can-gift-membership": e.canGiftMembership,
                                    "can-remove-friend": e.canRemoveFriend,
                                    "can-report-user": e.canReportUser,
                                    "can-send-message": e.canSendMessage,
                                    "can-invite-to-chat": e.canInviteToChat,
                                    "can-send-trophy": e.canSendTrophy,
                                    "can-unblock-user": e.canUnblockUser,
                                    "can-unfollow-user": e.canUnfollowUser,
                                    "can-use-global-chat": e.canUseGlobalChat,
                                    "can-cancel-friend-request": e.canCancelFriendRequest,
                                    "can-decline-friend-request": e.canDeclineFriendRequest,
                                    "can-accept-friend-request": e.canAcceptFriendRequest,
                                    "dynamic-actions": e.dynamicActions,
                                    "logged-as-another": e.loggedAsAnother,
                                    username: e.username,
                                    "can-observe-game": e.canObserveGame,
                                    "is-bughouse-partner": e.isBughousePartner,
                                    "challenge-url": e.challengeUrl,
                                    "archive-url": e.archiveUrl,
                                    "chat-options": e.chatOptions,
                                    position: e.position,
                                    "can-invite-to-analysis": e.canInviteToAnalysis,
                                    "analysis-options": e.analysisOptions,
                                    "is-enabled": e.isEnabled,
                                    "is-confirm-visible": e.isConfirmVisible,
                                    "show-bughouse-partner": e.showBughousePartner,
                                    "membership-url": e.membershipUrl
                                },
                                on: {
                                    "all-actions-shown": e.updatePopoverPosition,
                                    "remove-friend": e.onClickRemoveFriend,
                                    "block-user": e.onClickBlockUser,
                                    "user-popover-hide": e.hidePopover,
                                    "create-challenge": function(t) {
                                        return e.$emit("create-challenge", t)
                                    },
                                    "send-message": function(t) {
                                        return e.$emit("send-message", t)
                                    },
                                    "add-friend": function(t) {
                                        return e.$emit("add-friend", t)
                                    },
                                    "cancel-friend-request": function(t) {
                                        return e.$emit("cancel-friend-request", t)
                                    },
                                    "decline-friend-request": function(t) {
                                        return e.$emit("decline-friend-request", t)
                                    },
                                    "show-gift": function(t) {
                                        return e.$emit("show-gift", t)
                                    },
                                    "show-archive": function(t) {
                                        return e.$emit("show-archive", t)
                                    },
                                    "start-direct-chat": function(t) {
                                        return e.$emit("start-direct-chat")
                                    },
                                    "mute-user": function(t) {
                                        return e.$emit("mute-user", t)
                                    },
                                    "accept-friend-request": function(t) {
                                        return e.$emit("accept-friend-request", t)
                                    },
                                    "follow-user": function(t) {
                                        return e.$emit("follow-user", t)
                                    },
                                    "unfollow-user": function(t) {
                                        return e.$emit("unfollow-user", t)
                                    },
                                    "unblock-user": function(t) {
                                        return e.$emit("unblock-user", t)
                                    },
                                    "show-report": function(t) {
                                        return e.$emit("show-report", t)
                                    },
                                    "show-trophy": function(t) {
                                        return e.$emit("show-trophy", t)
                                    },
                                    "observe-user": function(t) {
                                        return e.$emit("observe-user", t)
                                    },
                                    "bughouse-partner": function(t) {
                                        return e.$emit("bughouse-partner", t)
                                    },
                                    "bughouse-unpartner": function(t) {
                                        return e.$emit("bughouse-unpartner", t)
                                    },
                                    "request-chat": function(t) {
                                        return e.$emit("request-chat", t)
                                    },
                                    "invite-analysis": function(t) {
                                        return e.$emit("invite-analysis", t)
                                    }
                                }
                            }) : e._e()], 1) : e._e()], 1), e._v(" "), e.isConfirmVisible ? s("div", {
                                class: e.$style.confirm
                            }, [s("p", {
                                domProps: {
                                    innerHTML: e._s(e.confirmMessage)
                                }
                            }), e._v(" "), e.clubChatIdForModeratorActions && !e.userAlreadyMutedOnChat ? s("p", [e._v("\n      " + e._s(e.$trans("Message to user:")) + "\n      "), s("v5-input", {
                                class: e.$style["moderator-message"],
                                attrs: {
                                    "force-theme": "light"
                                },
                                model: {
                                    value: e.clubChatModeratorMessage,
                                    callback: function(t) {
                                        e.clubChatModeratorMessage = t
                                    },
                                    expression: "clubChatModeratorMessage"
                                }
                            })], 1) : e._e(), e._v(" "), s("div", [s("v5-button", {
                                attrs: {
                                    size: "x-small",
                                    theme: "basic-light"
                                },
                                domProps: {
                                    textContent: e._s(e.$trans("No"))
                                },
                                on: {
                                    click: e.onConfirmNo
                                }
                            }), e._v(" "), s("v5-button", {
                                attrs: {
                                    size: "x-small",
                                    theme: "primary"
                                },
                                domProps: {
                                    textContent: e._s(e.$trans("Yes"))
                                },
                                on: {
                                    click: e.onConfirmYes
                                }
                            })], 1)]) : e._e()])
                        }), [], !1, (function user_popover_injectStyles(e) {
                            this.$style = Gn.locals || Gn
                        }), null, null).exports,
                        Hn = (Object.create, Object.defineProperty),
                        Yn = Object.defineProperties,
                        Kn = (Object.getOwnPropertyDescriptor, Object.getOwnPropertyDescriptors),
                        Qn = (Object.getOwnPropertyNames, Object.getOwnPropertySymbols),
                        Jn = (Object.getPrototypeOf, Object.prototype.hasOwnProperty),
                        Xn = Object.prototype.propertyIsEnumerable,
                        user_popovervue_type_script_lang_js_defNormalProp = (e, t, s) => t in e ? Hn(e, t, {
                            enumerable: !0,
                            configurable: !0,
                            writable: !0,
                            value: s
                        }) : e[t] = s,
                        user_popovervue_type_script_lang_js_spreadValues = (e, t) => {
                            for (var s in t || (t = {})) Jn.call(t, s) && user_popovervue_type_script_lang_js_defNormalProp(e, s, t[s]);
                            if (Qn)
                                for (var s of Qn(t)) Xn.call(t, s) && user_popovervue_type_script_lang_js_defNormalProp(e, s, t[s]);
                            return e
                        },
                        user_popovervue_type_script_lang_js_spreadProps = (e, t) => Yn(e, Kn(t)),
                        er = {
                            name: "UserPopoverWidget",
                            components: {
                                giftMembershipModal: () => ({
                                    component: s.e(614).then(s.bind(s, 5626))
                                }),
                                UserReportModal: () => ({
                                    component: s.e(210).then(s.bind(s, 7200))
                                }),
                                UserPopover: Wn,
                                TrophyPopover: () => ({
                                    component: s.e(284).then(s.bind(s, 6030))
                                })
                            },
                            data: () => ({
                                clubChatIdForModeratorActions: !1,
                                clickListener: null,
                                dynamicActions: null,
                                isLoading: !1,
                                showGiftMembershipModal: !1,
                                isUserReportModalVisible: !1,
                                isChallengePopoverVisible: !1,
                                isTrophyPopoverVisible: !1,
                                scrollContainer: null,
                                elementRef: null,
                                userAlreadyMutedOnChat: !1
                            }),
                            computed: user_popovervue_type_script_lang_js_spreadProps(user_popovervue_type_script_lang_js_spreadValues({}, (0, $a.rn)({
                                currentUserIsGuest: e => e.user.isGuest,
                                show: e => e.userPopover.show,
                                user: e => e.userPopover.user,
                                username: e => e.user.username,
                                position: e => e.userPopover.position,
                                presenceDetails: e => e.userPopover.presenceDetails
                            })), {
                                ratings() {
                                    const {
                                        bestRating: e,
                                        bestRatingType: t,
                                        topPuzzleRushScore: s
                                    } = this.user, a = [{
                                        type: t,
                                        icon: t,
                                        value: e
                                    }];
                                    return s && a.push({
                                        type: "puzzle",
                                        icon: "fire-puzzle",
                                        value: s
                                    }), a
                                },
                                canAddFriend() {
                                    return this.loggedAsAnother && !this.user.areFriends && !this.user.isFriendRequestFromUserExists && !this.user.isFriendRequestExists && this.user.isEnabled
                                },
                                canBlockUser() {
                                    return this.loggedAsAnother && !this.user.areFriends && !this.user.isBlocked && this.user.isEnabled && this.user.membership && this.user.membership.level < vo.p0.moderator
                                },
                                canUseGlobalChat() {
                                    return this.loggedAsAnother && this.user.isEnabled
                                },
                                canCreateChallenge() {
                                    return this.loggedAsAnother && this.user.isEnabled
                                },
                                canFollowUser() {
                                    return this.loggedAsAnother && !this.user.isTracked && this.user.isEnabled
                                },
                                canGiftMembership() {
                                    return this.user.canReceiveGiftMembership && this.user.isEnabled
                                },
                                canRemoveFriend() {
                                    return this.loggedAsAnother && this.user.areFriends
                                },
                                canReportUser() {
                                    return this.loggedAsAnother && !this.user.isModerator && !this.user.isStaff
                                },
                                canSendMessage() {
                                    return this.loggedAsAnother && this.user.isMessageable && this.user.isEnabled
                                },
                                canSendTrophy() {
                                    return this.canSendMessage && this.user.isEnabled
                                },
                                canUnblockUser() {
                                    return this.loggedAsAnother && this.user.isBlocked && this.user.isEnabled
                                },
                                canUnfollowUser() {
                                    return this.loggedAsAnother && this.user.isTracked && this.user.isEnabled
                                },
                                hasInboundFriendRequest() {
                                    return this.loggedAsAnother && this.user.isFriendRequestFromUserExists
                                },
                                hasOutboundFriendRequest() {
                                    return this.loggedAsAnother && this.user.isFriendRequestExists
                                },
                                canCancelFriendRequest() {
                                    return this.hasOutboundFriendRequest && !this.hasInboundFriendRequest
                                },
                                canAcceptFriendRequest() {
                                    return this.hasInboundFriendRequest
                                },
                                loggedAsAnother() {
                                    return this.username && this.username !== this.user.username
                                },
                                membershipNumber() {
                                    return (0, bo.yO)(this.user.membership ? this.user.membership.level : null, this.user.isEnabled)
                                },
                                inlineStyles() {
                                    return setPopoverPosition(this.position)
                                },
                                areFriends() {
                                    return this.user.areFriends
                                },
                                isGuest() {
                                    return this.currentUserIsGuest || this.user.isGuest
                                }
                            }),
                            created() {
                                registerModules({
                                    modalMessages: wo,
                                    trophies: yo
                                })
                            },
                            mounted() {
                                this.scrollContainer = window, Ha.Z.on("userPopover/show", (({
                                    actions: e,
                                    clubChatIdForModeratorActions: t,
                                    userAlreadyMutedOnChat: s,
                                    username: a
                                }, o) => {
                                    if (this.dynamicActions = e, this.clubChatIdForModeratorActions = t, this.userAlreadyMutedOnChat = s, this.$store.dispatch("userPopover/fetchUserPopover", a).then((() => {
                                            this.isLoading = !1
                                        })), this.$store.commit("userPopover/resetUser"), null == a) return;
                                    this.clickListener = document.addEventListener("click", (e => {
                                        (this.user.userNotExist || this.$refs.userPopover && e.target !== this.$refs.userPopover.$el && !this.$refs.userPopover.$el.contains(e.target) && !document.getElementById(vo.xL.USER_POPOVER_CONTAINER).contains(e.target)) && this.hideUserPopup()
                                    }), !0), setTimeout((() => {
                                        this.user.username || this.user.userNotExist || (this.isLoading = !0)
                                    }), 500), this.scrollContainer.addEventListener("scroll", this.hideUserPopup), this.elementRef = o;
                                    const n = (0, go.MD)(o.getBoundingClientRect());
                                    this.$store.commit("userPopover/setPosition", n), this.$store.commit("userPopover/showUserPopover")
                                })), Ha.Z.on("userPopover/hide", this.hideUserPopup)
                            },
                            beforeDestroy() {
                                this.removeListeners()
                            },
                            methods: user_popovervue_type_script_lang_js_spreadProps(user_popovervue_type_script_lang_js_spreadValues({}, (0, $a.OI)({
                                hideUserPopover: "userPopover/hideUserPopover",
                                setRecipientIsFriend: "trophies/setRecipientIsFriend",
                                setRecipientUsername: "trophies/setRecipientUsername"
                            })), {
                                onChallenge({
                                    username: e
                                }) {
                                    window.location = i.Z.generate("web_play_new", {
                                        opponent: e
                                    })
                                },
                                onMessage(e) {
                                    this.hideUserPopup(), window.postMessage({
                                        event: "SHOW_MESSAGE_MODAL",
                                        user: {
                                            avatar_url: e.avatar,
                                            username: e.username
                                        }
                                    }, window.location.origin)
                                },
                                onTrophy(e) {
                                    this.hideUserPopup(), this.setRecipientUsername(e.username), this.isTrophyPopoverVisible = !0
                                },
                                acceptFriendRequest() {
                                    this.$store.dispatch("user/approveFriendRequest", this.user.userId).then(this.reload)
                                },
                                addFriend() {
                                    this.$store.dispatch("user/addFriend", this.user.userId).then(this.reload)
                                },
                                blockUser() {
                                    this.$store.dispatch("user/blockUser", this.user.username).then(this.reload)
                                },
                                cancelFriendRequest() {
                                    this.$store.dispatch("user/cancelFriendRequest", this.user.userId).then(this.reload)
                                },
                                deleteFriend() {
                                    this.$store.dispatch("user/deleteFriend", this.user.userId).then(this.reload)
                                },
                                hideUserPopup() {
                                    this.setRecipientIsFriend(this.areFriends), this.hideUserPopover(), this.removeListeners(), this.isLoading = !1
                                },
                                reload() {
                                    return this.$store.dispatch("userPopover/fetchUserPopover", this.user.username)
                                },
                                removeListeners() {
                                    document.removeEventListener("click", this.clickListener, !0), this.scrollContainer.removeEventListener("scroll", this.hideUserPopup)
                                },
                                trackUser() {
                                    this.$store.dispatch("user/trackUser", this.user.username).then(this.reload)
                                },
                                unblockUser() {
                                    this.$store.dispatch("user/unblockUser", this.user.username).then(this.reload)
                                },
                                untrackUser() {
                                    this.$store.dispatch("user/untrackUser", this.user.username).then(this.reload)
                                },
                                showGiftModal() {
                                    this.hideUserPopup(), this.showGiftMembershipModal = !0
                                },
                                hideGiftMembershipModal() {
                                    this.showGiftMembershipModal = !1
                                },
                                showReportModal() {
                                    this.hideUserPopup(), this.isUserReportModalVisible = !0
                                },
                                hideUserReportModal() {
                                    this.isUserReportModalVisible = !1
                                },
                                hideChallengePopover() {
                                    this.isChallengePopoverVisible = !1
                                },
                                hideTrophyPopover() {
                                    this.isTrophyPopoverVisible = !1
                                },
                                showArchive(e) {
                                    window.location.href = i.Z.generate("web_archive_index", {
                                        username: e.username
                                    })
                                },
                                startDirectChat() {
                                    const e = po,
                                        t = {
                                            avatarUrl: this.user.avatarUrl,
                                            id: this.user.uuid,
                                            username: this.user.username
                                        };
                                    window.postMessage({
                                        key: e,
                                        payload: t
                                    }, window.location.origin)
                                }
                            })
                        },
                        tr = er,
                        sr = {
                            "placeholder-popover": "user-popover-placeholder-popover",
                            bottom: "user-popover-bottom",
                            top: "user-popover-top",
                            "placeholder-component": "user-popover-placeholder-component",
                            "placeholder-profile": "user-popover-placeholder-profile",
                            "placeholder-avatar": "user-popover-placeholder-avatar",
                            "placeholder-info": "user-popover-placeholder-info"
                        };
                    var ar = (0, ns.Z)(tr, (function() {
                        var e = this,
                            t = e.$createElement,
                            s = e._self._c || t;
                        return s("div", [e.user.userNotExist ? e._e() : s("div", {
                            attrs: {
                                id: "user-popover"
                            }
                        }, [e.show ? s("user-popover", {
                            ref: "userPopover",
                            attrs: {
                                "dynamic-actions": e.dynamicActions,
                                avatar: e.user.avatarUrl,
                                "is-fide-verified": e.user.isFideVerified,
                                "can-add-friend": e.canAddFriend,
                                "can-block-user": e.canBlockUser,
                                "can-create-challenge": e.canCreateChallenge,
                                "can-follow-user": e.canFollowUser,
                                "can-gift-membership": e.canGiftMembership,
                                "can-remove-friend": e.canRemoveFriend,
                                "can-report-user": e.canReportUser,
                                "can-send-message": e.canSendMessage,
                                "can-send-trophy": e.canSendTrophy,
                                "can-unblock-user": e.canUnblockUser,
                                "can-unfollow-user": e.canUnfollowUser,
                                "can-use-global-chat": e.canUseGlobalChat,
                                "can-cancel-friend-request": e.canCancelFriendRequest,
                                "can-accept-friend-request": e.canAcceptFriendRequest,
                                "chess-title": e.user.chessTitle,
                                country: {
                                    name: e.user.countryName,
                                    code: e.user.countryId
                                },
                                flair: e.user.flair,
                                "club-chat-id-for-moderator-actions": e.clubChatIdForModeratorActions,
                                "is-enabled": e.user.isEnabled,
                                "is-guest": e.isGuest,
                                "is-loading": e.isLoading,
                                "joined-date": e.user.joinDate,
                                "last-login-date": e.user.lastLoginDate,
                                "logged-as-another": e.loggedAsAnother,
                                membership: e.membershipNumber,
                                "popover-position": e.position,
                                "presence-details": e.presenceDetails,
                                ratings: e.ratings,
                                username: e.user.username,
                                "username-element-ref": e.elementRef,
                                "user-already-muted-on-chat": e.userAlreadyMutedOnChat,
                                uuid: e.user.uuid,
                                "league-code": e.user.leagueCode,
                                "league-division": e.user.leagueDivision,
                                "league-name": e.user.leagueName
                            },
                            on: {
                                "accept-friend-request": e.acceptFriendRequest,
                                "add-friend": e.addFriend,
                                "block-user": e.blockUser,
                                "cancel-friend-request": e.cancelFriendRequest,
                                "create-challenge": e.onChallenge,
                                "follow-user": e.trackUser,
                                "remove-friend": e.deleteFriend,
                                "send-message": e.onMessage,
                                "show-archive": e.showArchive,
                                "show-gift": e.showGiftModal,
                                "show-report": e.showReportModal,
                                "show-trophy": e.onTrophy,
                                "start-direct-chat": e.startDirectChat,
                                "unblock-user": e.unblockUser,
                                "unfollow-user": e.untrackUser,
                                "user-popover-hide": e.hideUserPopup
                            }
                        }) : e._e(), e._v(" "), e.isUserReportModalVisible ? s("user-report-modal", {
                            attrs: {
                                username: e.user.username
                            },
                            on: {
                                "modal-did-hide": e.hideUserReportModal
                            }
                        }) : e._e(), e._v(" "), e.showGiftMembershipModal ? s("gift-membership-modal", {
                            attrs: {
                                "receiver-username": e.user.username,
                                "receiver-id": e.user.userId,
                                "sender-username": e.username
                            },
                            on: {
                                "hide-modal": e.hideGiftMembershipModal
                            }
                        }) : e._e(), e._v(" "), e.isTrophyPopoverVisible ? s("trophy-popover", {
                            on: {
                                hide: e.hideTrophyPopover
                            }
                        }) : e._e()], 1), e._v(" "), e.user.userNotExist && e.show ? s("div", {
                            class: [e.$style["placeholder-popover"], e.$style[e.position.x], e.$style[e.position.y]],
                            style: e.inlineStyles
                        }, [s("div", {
                            class: e.$style["placeholder-component"]
                        }, [s("div", {
                            class: e.$style["placeholder-profile"]
                        }, [s("div", {
                            class: e.$style["placeholder-avatar"]
                        }), e._v(" "), s("div", {
                            class: e.$style["placeholder-info"],
                            domProps: {
                                textContent: e._s(e.$trans("Member name does not exist"))
                            }
                        })])])]) : e._e()])
                    }), [], !1, (function user_user_popover_injectStyles(e) {
                        this.$style = sr.locals || sr
                    }), null, null).exports;
                    registerModules({
                        user: Ta,
                        userPopover: uo
                    });
                    const or = lazy_vue({
                            userPopover: {
                                component: ar,
                                el: "#user-popover",
                                store: za
                            }
                        }),
                        nr = window;
                    let rr, ir = 0;
                    const documentClickListener = e => {
                            const t = document.getElementById("userPopover");
                            if (!t || e.target !== t && !t.contains(e.target)) {
                                document.removeEventListener("click", documentClickListener, !0);
                                const t = !rr || e.target !== rr && !rr.contains(e.target),
                                    s = null === rr.getAttribute("href");
                                t ? ir = 0 : s && setTimeout((() => {
                                    ir = 0
                                }), 0)
                            }
                        },
                        documentScrollListener = () => {
                            nr.removeEventListener("scroll", documentScrollListener), ir = 0
                        },
                        directiveClickListener = e => {
                            rr = e.target, 0 === ir && (ir += 1, or.createInstance("userPopover"), Ha.Z.emit("userPopover/show", e.currentTarget.userPopoverProps, e.target), e.preventDefault(), document.addEventListener("click", documentClickListener, !0), nr.addEventListener("scroll", documentScrollListener))
                        },
                        normalizeProps = e => "string" == typeof e ? {
                            username: e
                        } : e;
                    var lr = {
                            bind: (e, t) => {
                                if (!t.value) return !1;
                                e.userPopoverProps = normalizeProps(t.value), e.addEventListener("click", directiveClickListener)
                            },
                            unbind: e => {
                                e.removeEventListener("click", directiveClickListener)
                            },
                            update: (e, t) => {
                                if (!t.value) return !1;
                                const s = normalizeProps(t.value);
                                e.userPopoverProps.username = s.username, s.actions && e.userPopoverProps.actions.splice(0, s.actions.length, ...s.actions)
                            }
                        },
                        cr = (0, g.aZ)({
                            name: "Player",
                            directives: {
                                tooltip: Sa.Z,
                                userPopover: lr
                            },
                            components: {
                                Avatar: pa,
                                Clock: Ca,
                                UserTagline: zn
                            },
                            props: {
                                boardId: {
                                    type: String,
                                    required: !0
                                },
                                color: {
                                    type: Number,
                                    required: !0
                                },
                                currentTime: {
                                    type: Date,
                                    required: !0
                                },
                                player: {
                                    type: PlayerModel,
                                    required: !0
                                },
                                position: {
                                    type: String,
                                    required: !0
                                },
                                room: {
                                    type: RoomModel,
                                    required: !1
                                },
                                moveTimestamp: {
                                    type: String,
                                    required: !1
                                },
                                isPlayerTurn: {
                                    type: Boolean,
                                    default: !1
                                },
                                isClockVisible: {
                                    type: Boolean,
                                    required: !0
                                },
                                country: {
                                    type: Object,
                                    required: !1
                                },
                                timeControl: {
                                    type: Object,
                                    required: !1
                                }
                            },
                            emits: ["click-user"],
                            computed: {
                                componentClasses() {
                                    return [this.$style.component, this.$style[this.position]]
                                },
                                userAvatarTooltip() {
                                    return {
                                        content: this.player.name,
                                        position: this.position === ca.Top ? "bottom" : "top"
                                    }
                                },
                                titleUrl: () => i.Z.generate("web_member_titled_players"),
                                userPopover() {
                                    return this.player.hasAccount ? {
                                        username: this.player.name
                                    } : null
                                }
                            }
                        }),
                        dr = {
                            component: "player-component",
                            tagline: "player-tagline"
                        };
                    var ur = (0, ns.Z)(cr, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.componentClasses
                            }, [s("avatar", {
                                directives: [{
                                    name: "tooltip",
                                    rawName: "v-tooltip",
                                    value: e.userAvatarTooltip,
                                    expression: "userAvatarTooltip"
                                }],
                                attrs: {
                                    width: "40",
                                    height: "40",
                                    alt: e.player.name,
                                    src: e.player.getAvatarUrl()
                                }
                            }), e._v(" "), s("div", {
                                class: e.$style.tagline
                            }, [s("user-tagline", {
                                directives: [{
                                    name: "user-popover",
                                    rawName: "v-user-popover",
                                    value: e.userPopover,
                                    expression: "userPopover"
                                }],
                                key: e.player.getName(),
                                attrs: {
                                    "username-theme": "dark",
                                    "open-title-on-new-tab": "",
                                    username: e.player.getName(),
                                    title: e.player.title,
                                    "title-url": e.titleUrl,
                                    country: e.country,
                                    "flair-code": e.player.flairCode,
                                    membership: e.player.membership,
                                    rating: e.player.rating
                                }
                            }), e._v(" "), e.boardId ? s("captured-pieces", {
                                class: e.$style.pieces,
                                attrs: {
                                    "board-id": e.boardId,
                                    color: e.color
                                }
                            }) : e._e()], 1), e._v(" "), e.isClockVisible ? s("clock", {
                                attrs: {
                                    "is-player-turn": e.isPlayerTurn,
                                    "current-time": e.currentTime,
                                    "move-timestamp": e.moveTimestamp,
                                    "time-control": e.timeControl,
                                    room: e.room,
                                    color: e.color,
                                    position: e.position
                                }
                            }) : e._e()], 1)
                        }), [], !1, (function player_injectStyles(e) {
                            this.$style = dr.locals || dr
                        }), null, null).exports,
                        mr = (0, g.aZ)({
                            name: "PlayerController",
                            components: {
                                Player: ur
                            },
                            props: {
                                position: {
                                    type: String,
                                    default: ca.Bottom
                                }
                            },
                            computed: {
                                boardId() {
                                    return this.activeBoard ? getActiveChessboardElementId() : ""
                                },
                                activeRoom: () => getActiveRoom(),
                                activeBoard: () => getActiveBoard(),
                                currentTime: () => getCurrentTime(),
                                player() {
                                    return this.activeBoard ? this.color === q.White ? this.activeBoard.whitePlayer : this.color === q.Black ? this.activeBoard.blackPlayer : null : new PlayerModel(this.color)
                                },
                                country() {
                                    var e, t;
                                    return (null == (e = this.player) ? void 0 : e.country) ? /^[0-9]+$/.test(this.player.country) ? {
                                        name: (null == (t = getCountryOptions().find((e => {
                                            var t;
                                            return e.value === (null == (t = this.player) ? void 0 : t.country)
                                        }))) ? void 0 : t.label) || "",
                                        code: this.player.country
                                    } : (/^[a-zA-Z]+$/.test(this.player.country), {
                                        name: this.$trans(this.player.country, {}, "countries"),
                                        code: this.player.country.toLowerCase()
                                    }) : null
                                },
                                color() {
                                    var e;
                                    return (null == (e = this.activeBoard) ? void 0 : e.flipped) ? this.position === ca.Bottom ? q.Black : q.White : this.position === ca.Bottom ? q.White : q.Black
                                },
                                timeControl() {
                                    var e;
                                    if (!(null == (e = this.activeBoard) ? void 0 : e.pgn)) return null;
                                    const t = getActiveChessboard().game.getHeaders();
                                    return t.TimeControl ? getTimeControl(t.TimeControl) : null
                                },
                                moveTimestamp() {
                                    var e, t, s, a, o;
                                    if (!this.activeRoom || !this.activeBoard) return null;
                                    if (!isNumber(null == (e = this.activeBoard) ? void 0 : e.line) || !isNumber(null == (t = this.activeBoard) ? void 0 : t.move)) return null;
                                    const n = getActiveChessboard();
                                    let r = n.game.getSelectedNode();
                                    if (r && r.color !== this.color && (r = r.previous ? n.game.getNodeByIds(r.previous) : null), null == (s = null == r ? void 0 : r.commands) ? void 0 : s.clk) return null == r ? void 0 : r.commands.clk.replace(/\.[0-9]$/, "").replace(/^0:/, "").replace(/^0/, "");
                                    if ((null == (a = null == r ? void 0 : r.commands) ? void 0 : a.timestamp) && this.timeControl) {
                                        const e = n.game.getLine(r.ids.line).filter((e => e.color === r.color && e.ply <= r.ply)).reduce(((e, t) => e + Number(t.commands.timestamp)), 0);
                                        return formatClock(10 * this.timeControl.baseTime - e)
                                    }
                                    return "daily" === (null == (o = this.timeControl) ? void 0 : o.timeType) ? this.$transChoice("{1} 1 day|]1,Inf] %1$s% days", this.timeControl.baseTime, {
                                        "%1$s%": this.timeControl.baseTime
                                    }) : this.timeControl ? formatClock(10 * this.timeControl.baseTime) : null
                                },
                                isPlayerTurn() {
                                    var e;
                                    if (!this.activeRoom || !this.activeBoard || !this.moveTimestamp) return !1;
                                    const t = null == (e = getActiveChessboard()) ? void 0 : e.game.getSelectedNode();
                                    return t && this.color !== t.color
                                },
                                isClockVisible() {
                                    var e, t;
                                    return Boolean(this.moveTimestamp || (null == (e = this.activeRoom) ? void 0 : e.clockType) === Z.Timer || (null == (t = this.activeRoom) ? void 0 : t.clockType) === Z.Stopwatch)
                                }
                            }
                        }),
                        hr = mr,
                        pr = (0, ns.Z)(hr, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return e.player ? s("player", {
                                attrs: {
                                    "board-id": e.boardId,
                                    color: e.color,
                                    country: e.country,
                                    "current-time": e.currentTime,
                                    "is-clock-visible": e.isClockVisible,
                                    "is-player-turn": e.isPlayerTurn,
                                    "move-timestamp": e.moveTimestamp,
                                    player: e.player,
                                    position: e.position,
                                    room: e.activeRoom,
                                    "time-control": e.timeControl
                                }
                            }) : e._e()
                        }), [], !1, null, null, null).exports,
                        br = (0, g.aZ)({
                            el: "#player-bottom",
                            name: "PlayerBottomController",
                            extends: pr
                        }),
                        gr = (0, ns.Z)(br, undefined, undefined, !1, null, null, null).exports,
                        vr = (0, g.aZ)({
                            el: "#player-top",
                            name: "PlayerTopController",
                            extends: pr,
                            props: {
                                position: {
                                    type: String,
                                    default: ca.Top
                                }
                            }
                        }),
                        wr = (0, ns.Z)(vr, undefined, undefined, !1, null, null, null).exports;

                    function getBoardStyles() {
                        return b.boardStyles
                    }

                    function hideSettingsModal() {
                        Rs.isVisible = !1
                    }
                    var fr = s(6110);
                    const yr = ["webm", "ogg", "mp3", "wav"],
                        _r = ["move-check", "premove", "capture", "castle", "game-end", "game-start", "promote", "move-opponent", "move-self"],
                        kr = _r.concat(["click", "correct", "drawoffer", "illegal", "incorrect", "notify", "tenseconds"]);

                    function getThemeUrl(e, t, s = "default") {
                        return `//images.chesscomfiles.com/chess-themes/sounds/_${t.toUpperCase()}_/${s}/${e}.${t}`
                    }

                    function previewSound(e) {
                        const t = (0, fr.IZ)(function getUrls(e, t) {
                            return _r.includes(e) ? yr.map((s => getThemeUrl(e, s, t))) : kr.includes(e) ? yr.map((t => getThemeUrl(e, t))) : [`/bundles/web/sounds/${e}.mp3`]
                        }("move-self", e));
                        t && ((0, fr.GN)(t), setTimeout((() => t.unload()), 1e3))
                    }
                    const Cr = {
                        coordinates: e => nt.indexOf(e),
                        evaluationBarType: e => parseInt(e, 10)
                    };
                    var Sr = s(517);
                    async function saveBoardOptions(e) {
                        if (0 === Object.keys(e).length) return;
                        Object.assign(b.boardOptions, e), getChessboards().forEach((t => {
                            t.game.setOptions(e)
                        }));
                        const t = Object.keys(e).map((t => async function updateBoardOption(e, t) {
                            if (!Sr.f[e]) throw new Error(`${e} is not a valid board option`);
                            await r.Z.post(i.Z.generate(Sr.f[e]), {
                                action: Cr[e] ? Cr[e](t) : t
                            })
                        }(t, e[t])));
                        await Promise.all(t), c.n.setBoardOptions(b.boardOptions), updateChessboardLayout()
                    }
                    const xr = (new class Configuration {
                            constructor() {
                                const e = Object.assign({}, window.Config);
                                e.MainDomain || (e.MainDomain = e["domain.main"]), e.StaticDomain || (e.StaticDomain = e["domain.static"]), e.FilesDomain || (e.FilesDomain = e["domain.files"]), e.LiveDomain || (e.LiveDomain = e["domain.live"]), e.LiveWebSocketDomain || (e.LiveWebSocketDomain = e["domain.livews"]), e.LiveSecureWebSocketDomain || (e.LiveSecureWebSocketDomain = e["domain.livewss"]), e.VoiceDomain || (e.VoiceDomain = e["domain.voice"]), e.CssJsDomain || (e.CssJsDomain = e["domain.cssjs"]), e.ImagesDomain || (e.ImagesDomain = e["domain.images"]), e.AvatarsDomain || (e.AvatarsDomain = e["domain.avatars"]), e.ChessBoardAssetsDomain || (e.ChessBoardAssetsDomain = "//images.chesscomfiles.com/chess-themes"), e.ChessBoardLocalAssetsDomain || (e.ChessBoardLocalAssetsDomain = "bundles/web/images/chess-themes/pieces"), e.AppVersion || (e.AppVersion = e["application.version"]), e.AppVersion || (e.AppVersion = Math.floor(1e4 * Math.random()) + 1e4), e.DocumentRoot || (e.DocumentRoot = ""), void 0 === e.oldThemes && (e.oldThemes = !0), e.GfxUrl || (e.GfxUrl = e.ChessBoardAssetsDomain), e.GfxLocalUrl || (e.GfxLocalUrl = e.ChessBoardLocalAssetsDomain), e.ChessBoardPiecesPath || (e.ChessBoardPiecesPath = "/pieces"), e.ChessBoardBackgroundsPath || (e.ChessBoardBackgroundsPath = "/boards"), e.ChessBoardArrowsPath || (e.ChessBoardArrowsPath = "/arrows"), e.AudioSet || (e.AudioSet = "default"), e.AudioUrl || (e.AudioUrl = `${e.ChessBoardAssetsDomain}/sounds/`), e.DiagramGetPostUrl || (e.DiagramGetPostUrl = "/api/get_diagram"), e.DailyPuzzleGetUrl || (e.DailyPuzzleGetUrl = "/api/get_puzzle"), this.config = e
                            }
                        }).config,
                        $r = {
                            modern2: {
                                imgPath: "modern",
                                imgFormat: ".png"
                            },
                            lines: {
                                imgPath: "alpha",
                                imgFormat: ".png"
                            },
                            "3dwood": {
                                imgPath: "3d_wood",
                                imgFormat: ".png"
                            },
                            "3dplastic": {
                                imgPath: "3d_plastic",
                                imgFormat: ".png"
                            },
                            "3dchesskid": {
                                imgPath: "3d_chesskid",
                                imgFormat: ".png"
                            }
                        },
                        getPieceScheme = e => $r[e] ? $r[e] : {
                            imgPath: e,
                            imgFormat: ".png"
                        },
                        Pr = (new Array(76).join().split(",").map(((e, t) => 2 * t)).slice(22), {
                            default: ["#B58863", "#F0D9B5", null, ".png", "#ffff33"],
                            "8_bit": ["#6a9b41", "#f3f3f4", "8_bit", ".png", "#ffff33"],
                            bases: ["#c26b38", "#efcca1", "bases", ".jpg", "#f5cc2a"],
                            blue: ["#4D6D92", "#ECECD7", "blue", ".png", "#00a5ff"],
                            brown: ["#B58863", "#F0D9B5", "brown", ".png", "#ffff33"],
                            bubblegum: ["#f9cdd3", "#fff3f3", "bubblegum", ".png", "#de5d6f"],
                            burled_wood: ["#895132", "#d9b088", "burled_wood", ".jpg", "#ee9016"],
                            dark_wood: ["#8d675e", "#e7cdb2", "dark_wood", ".jpg", "#cc9122"],
                            dash: ["#6b3a27", "#bd9257", "dash", ".jpg", "#eca722"],
                            glass: ["#282f3f", "#667188", "glass", ".png", "#5b91b3"],
                            graffiti: ["#b96f18", "#aeaeae", "graffiti", ".jpg", "#f39011"],
                            green: ["#779952", "#edeed1", "green", ".png", "#ffff33"],
                            icy_sea: ["#7a9db2", "#c5d5dc", "icy_sea", ".jpg", "#5ed7f1"],
                            light: ["#aaaaaa", "#dcdcdc", "light", ".png", "#a4b8c4"],
                            lolz: ["#909898", "#e0e9e9", "lolz", ".jpg", "#a3becd"],
                            marble: ["#706b66", "#c7bdaa", "marble", ".jpg", "#f0db86"],
                            metal: ["#6e6e6e", "#c9c9c9", "metal", ".jpg", "#a3becd"],
                            nature: ["#8c976e", "#c3d1a4", "translucent", ".png", "#eef396"],
                            neon: ["#636363", "#b9b9b9", "neon", ".png", "#6d90a6"],
                            newspaper: ["#5a5956", "#5a5956", "newspaper", ".jpg", "#99976e"],
                            orange: ["#D08B18", "#FCE4B2", "orange", ".png", "#ffff33"],
                            overlay: ["#789ebd", "#4878a0", "overlay", ".png", "#0d9acf"],
                            parchment: ["#B58863", "#F0D9B5", "parchment", ".jpg", "#d8cc66"],
                            purple: ["#8877B7", "#EFEFEF", "purple", ".png", "#7dacc9"],
                            red: ["#BA5546", "#F0D8BF", "red", ".png", "#f8f893"],
                            sand: ["#b8a590", "#e5d3c4", "sand", ".jpg", "#e2bc87"],
                            sky: ["#c2d7e2", "#efefef", "sky", ".png", "#65daf7"],
                            stone: ["#666463", "#c8c3bd", "stone", ".jpg", "#36525f"],
                            tan: ["#D08B18", "#FCE4B2", "tan", ".png", "#f7d84a"],
                            tournament: ["#316549", "#ebece8", "tournament", ".jpg", "#a4c25b"],
                            translucent: ["#667188", "#282f3f", "translucent", ".png", "#5b91b3"],
                            walnut: ["#835f42", "#c0a684", "walnut", ".jpg", "#d1a52d"],
                            wood: ["#8d675e", "#e7cdb2", "dark_wood", ".jpg", "#cc9122"],
                            grey: ["#aaaaaa", "#dcdcdc", "light", ".png", "#a4b8c4"],
                            pink: ["#f9cdd3", "#fff3f3", "bubblegum", ".png", "#de5d6f"],
                            natural: ["#D08B18", "#FCE4B2", "tan", ".png", "#f0e464"],
                            winboard: ["#316549", "#ebece8", "tournament", ".jpg", "#a4c25b"],
                            blackwhite: ["#667188", "#282f3f", "translucent", ".png", "#5b91b3"],
                            marbleblue: ["#c2d7e2", "#efefef", "marbleblue", ".jpg", "#65daf7"],
                            marblebrown: ["#b96f18", "#aeaeae", "graffiti", ".jpg", "#f39011"],
                            marblegreen: ["#706b66", "#c7bdaa", "marblegreen", ".jpg", "#f0db86"],
                            wooddark: ["#895132", "#d9b088", "burled_wood", ".jpg", "#ee9016"],
                            woodlight: ["#B58863", "#F0D9B5", "parchment", ".jpg", "#d8cc66"],
                            woodmid: ["#8d675e", "#e7cdb2", "dark_wood", ".jpg", "#cc9122"],
                            woodolive: ["#6e6e6e", "#c9c9c9", "woodolive", ".jpg", "#a3becd"]
                        });
                    var Er = {
                            name: "GamePreview",
                            components: {
                                IconFont: Vo.Z
                            },
                            props: {
                                autoResize: {
                                    type: Boolean
                                },
                                colorScheme: {
                                    type: String,
                                    default: "green"
                                },
                                fen: {
                                    type: String
                                },
                                flipBoard: {
                                    type: Boolean
                                },
                                highlightColor: {
                                    type: String
                                },
                                highlightSquares: {
                                    type: String
                                },
                                is960Board: {
                                    type: Boolean
                                },
                                is960Title: {
                                    type: Boolean
                                },
                                isBoardPopover: {
                                    type: Boolean
                                },
                                pieceStyle: {
                                    type: String,
                                    default: "neo"
                                },
                                size: {
                                    type: [String, Number]
                                },
                                staticBoard: {
                                    type: [Boolean, String]
                                },
                                hideHandPieces: {
                                    type: Boolean
                                }
                            },
                            data: () => ({
                                squares: [],
                                squareWidth: 12.5,
                                isRetina: window.devicePixelRatio > 1,
                                backgroundImage: null,
                                board: null,
                                pieces: []
                            }),
                            computed: {
                                isThreeD: () => !1,
                                loadStaticBoard() {
                                    return "boolean" != typeof this.staticBoard ? "true" === this.staticBoard : this.staticBoard
                                },
                                watchedProps() {
                                    return this.fen, this.size, this.flipBoard, this.autoResize, this.isBoardPopover, this.colorScheme, this.pieceStyle, this.highlightColor, this.highlightSquares, Date.now()
                                },
                                gamePreviewScheme() {
                                    return `game-preview-${this.colorScheme}`
                                }
                            },
                            watch: {
                                watchedProps() {
                                    this.updatePreview()
                                }
                            },
                            created() {
                                this.updatePreview()
                            },
                            methods: {
                                updatePreview() {
                                    this.staticBoard || (this.board = this.getBoard()), this.pieces = this.getPieces(), this.squares = this.getHighlightedSquares()
                                },
                                getHighlightedSquares() {
                                    const e = [],
                                        t = {
                                            a: 0,
                                            b: 1,
                                            c: 2,
                                            d: 3,
                                            e: 4,
                                            f: 5,
                                            g: 6,
                                            h: 7
                                        },
                                        s = this.squareWidth,
                                        a = this.highlightSquares,
                                        o = this.flipBoard || !1,
                                        n = this.colorScheme || "green",
                                        r = Pr[n] || Pr.default,
                                        i = this.highlightColor || r[4];
                                    if (r[2] || (r[2] = n), "string" == typeof a)
                                        for (let l = 0; l < a.length; l += 2) {
                                            let n = t[a.substr(l, 1)],
                                                r = 8 - Number(a.substr(l + 1, 1));
                                            o && (n = 7 - n, r = 7 - r);
                                            const c = 7 * s - r * s,
                                                d = n * s;
                                            if (isNaN(c) || isNaN(d)) break;
                                            e.push({
                                                backgroundColor: i,
                                                bottom: `${c}%`,
                                                height: `${this.squareWidth}%`,
                                                key: `${n}${r}${this.highlightSquares}`,
                                                left: `${d}%`,
                                                opacity: ".5",
                                                position: "absolute",
                                                right: 100 - d - s + "%",
                                                top: 100 - c - s + "%",
                                                width: `${this.squareWidth}%`
                                            })
                                        }
                                    return e
                                },
                                getBoardUrl() {
                                    const e = xr.GfxUrl + xr.ChessBoardBackgroundsPath;
                                    let t = Math.max(20, Number(this.size || 0));
                                    const s = this.colorScheme || "green",
                                        a = Pr[s] || Pr.green;
                                    this.isRetina && (t *= 2);
                                    let o = a[2];
                                    "overlay" === o && (o = "translucent");
                                    return `${e}/${o}/${t}${a[3]}`
                                },
                                getBoard() {
                                    const e = Math.max(10, Number(this.size || 0));
                                    let t = 8 * e,
                                        s = "none",
                                        a = "0";
                                    return this.autoResize && (s = "100%", t = 0, a = "100%"), {
                                        width: `${8*e}px`,
                                        height: `${t}px`,
                                        maxWidth: s,
                                        paddingBottom: a,
                                        backgroundImage: `url(${this.getBoardUrl()})`
                                    }
                                },
                                getPieces() {
                                    return this.fen ? this.parseFEN() : []
                                },
                                parsePiece(e, t) {
                                    let s = e;
                                    const a = this.flipBoard,
                                        o = Math.max(20, Number(this.size || 0));
                                    let n = 0,
                                        r = "";
                                    for (; s >= 8;) n += 1, s -= 8;
                                    return /[A-Z]/.test(t) ? r = "w" : /[a-z]/.test(t) && (r = "b"), a && (s = 7 - s, n = 7 - n), {
                                        bottom: 7 * this.squareWidth - n * this.squareWidth,
                                        left: s * this.squareWidth,
                                        size: o,
                                        type: t.toLowerCase(),
                                        color: r
                                    }
                                },
                                getPieceUrl(e, t) {
                                    let s = xr.GfxUrl + xr.ChessBoardPiecesPath,
                                        a = Math.max(30, Number(this.size || 0)),
                                        o = this.pieceStyle || "preview";
                                    const n = window.location.href.indexOf(i.Z.generate("web_user_settings_themes")),
                                        r = window.location.href.indexOf(i.Z.generate("web_user_settings_board"));
                                    return "real3d" === o && -1 !== n || "real3d" === o && -1 !== r ? s = xr.GfxLocalUrl : o = "real3d" === o ? "3d_wood" : getPieceScheme(o).imgPath, this.isRetina && (a *= 2), s === xr.GfxLocalUrl ? (0, da.n)(`${s}/${o}/${a}/${e}${t}.png`) : `${s}/${o}/${a}/${e}${t}.png`
                                },
                                parseFEN() {
                                    const e = [],
                                        t = this.fen.split(/\s/g)[0];
                                    let s = 0;
                                    for (let a = 0; a < t.length; a += 1) {
                                        const o = t.substr(a, 1);
                                        if (o.match(/[A-Z]/i)) {
                                            const t = this.parsePiece(s, o);
                                            let a = "";
                                            o === o.toLowerCase() ? a += "b" : a += "w", a += o.toLowerCase(), s += 1, (!this.hideHandPieces || t.bottom >= 0) && e.push({
                                                url: this.getPieceUrl(t.color, t.type),
                                                bottom: `${t.bottom}%`,
                                                left: `${t.left}%`,
                                                size: t.size,
                                                code: a
                                            })
                                        }
                                        o.match(/[0-8]/) && (s += o / 1)
                                    }
                                    return e
                                },
                                pieceClass(e) {
                                    let t = this.pieceStyle;
                                    "modern2" === t ? t = "modern" : "real3d" === t ? t = "3d_wood" : /3d[^_]/.test(t) && (t = `3d_${t.substr(2)}`);
                                    let s = `sprite-piece sprite-piece-60 sprite-piece-${t}`;
                                    return this.isThreeD ? s += ` sprite-3d-piece sprite-3d-piece-${e.code}` : s += ` sprite-piece-${e.code}`, s
                                }
                            }
                        },
                        Or = Er,
                        Ar = {
                            component: "game-preview-component",
                            piece: "game-preview-piece",
                            "icon-wrapper": "game-preview-icon-wrapper",
                            icon: "game-preview-icon",
                            "chess960-title": "game-preview-chess960-title"
                        };
                    var Tr = (0, ns.Z)(Or, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return e.loadStaticBoard ? s("div", {
                                class: e.$style.component
                            }, [s("div", {
                                staticClass: "game-preview-board",
                                class: e.gamePreviewScheme
                            }), e._v(" "), e._l(e.squares, (function(e) {
                                return s("div", {
                                    key: e.key,
                                    staticClass: "highlight-square",
                                    style: e
                                })
                            })), e._v(" "), e._l(e.pieces, (function(t, a) {
                                return s("div", {
                                    key: a,
                                    class: e.pieceClass(t),
                                    style: {
                                        bottom: t.bottom,
                                        left: t.left
                                    }
                                })
                            }))], 2) : s("div", {
                                class: e.$style.component,
                                style: e.board
                            }, [e.is960Board ? s("div", {
                                class: e.$style["icon-wrapper"]
                            }, [s("icon-font", {
                                class: e.$style.icon,
                                attrs: {
                                    name: "chess960",
                                    theme: "primary"
                                }
                            })], 1) : e._e(), e._v(" "), e.is960Title ? s("div", {
                                class: e.$style["chess960-title"],
                                domProps: {
                                    textContent: e._s("Chess960")
                                }
                            }) : e._e(), e._v(" "), e._l(e.squares, (function(e) {
                                return s("div", {
                                    key: e.key,
                                    style: e
                                })
                            })), e._v(" "), e._l(e.pieces, (function(t, a) {
                                return s("img", {
                                    key: a,
                                    class: e.$style.piece,
                                    style: {
                                        width: e.squareWidth + "%",
                                        height: e.squareWidth + "%",
                                        bottom: t.bottom,
                                        left: t.left
                                    },
                                    attrs: {
                                        src: t.url,
                                        width: "20",
                                        height: "20"
                                    }
                                })
                            }))], 2)
                        }), [], !1, (function game_preview_injectStyles(e) {
                            this.$style = Ar.locals || Ar
                        }), null, null).exports,
                        Mr = (0, g.aZ)({
                            name: "SettingsField",
                            components: {},
                            directives: {
                                tooltip: Sa.Z
                            },
                            props: {
                                label: {
                                    type: String,
                                    required: !0
                                },
                                tooltip: String
                            }
                        }),
                        Rr = {
                            row: "settings-field-row",
                            label: "settings-field-label",
                            icon: "settings-field-icon"
                        };
                    var Ir = (0, ns.Z)(Mr, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.$style.row
                            }, [e._m(0), e._v(" "), e._t("default"), e._v(" "), s("div", {
                                class: e.$style.clearfix
                            })], 2)
                        }), [function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("label", {
                                class: e.$style.label
                            }, [e._v("\n    " + e._s(e.label) + "\n    "), e.tooltip ? s("span", {
                                directives: [{
                                    name: "tooltip",
                                    rawName: "v-tooltip",
                                    value: e.tooltip,
                                    expression: "tooltip"
                                }],
                                staticClass: "icon-font-chess circle-question",
                                class: e.$style.icon
                            }) : e._e()])
                        }], !1, (function settings_field_injectStyles(e) {
                            this.$style = Rr.locals || Rr
                        }), null, null).exports,
                        jr = (0, g.aZ)({
                            name: "Settings",
                            components: {
                                GamePreview: Tr,
                                SettingsField: Ir,
                                V5Select: ko.V5Select,
                                V5Switch: ko.V5Switch
                            },
                            directives: {
                                tooltip: Sa.Z
                            },
                            props: {
                                boardStyles: {
                                    type: Object,
                                    required: !0
                                },
                                cameraId: {
                                    type: String,
                                    required: !1
                                },
                                cameraOptions: {
                                    type: Array,
                                    required: !0
                                },
                                isOwner: {
                                    type: Boolean,
                                    required: !0
                                },
                                microphoneId: {
                                    type: String,
                                    required: !1
                                },
                                microphoneOptions: {
                                    type: Array,
                                    required: !0
                                },
                                settings: {
                                    type: Object,
                                    required: !0
                                }
                            },
                            emits: ["change-settings"],
                            data() {
                                return {
                                    moveMethods: [{
                                        key: "drag",
                                        value: this.$trans("Drag Pieces")
                                    }, {
                                        key: "click",
                                        value: this.$trans("Click Squares")
                                    }, {
                                        key: "drag-only",
                                        value: this.$trans("Drag Pieces Only")
                                    }],
                                    coordinatesOptions: [{
                                        key: 0,
                                        value: "off",
                                        label: this.$trans("None")
                                    }, {
                                        key: 1,
                                        value: "inside",
                                        label: this.$trans("Inside")
                                    }, {
                                        key: 2,
                                        value: "outside",
                                        label: this.$trans("Outside")
                                    }]
                                }
                            },
                            computed: {
                                selectedSound() {
                                    return this.settings.playSounds ? this.settings.soundTheme : "none"
                                },
                                soundOptions() {
                                    const e = this.boardStyles.sounds || [];
                                    return [{
                                        name: this.$trans("None"),
                                        id: 0,
                                        code: "none"
                                    }].concat(e)
                                },
                                previewFen: () => (0, O.H)(),
                                computedAnimationType() {
                                    return "battle" === this.settings.animationType ? "default" : this.settings.animationType
                                }
                            },
                            methods: {
                                onChange(e, t) {
                                    this.$emit("change-settings", {
                                        field: e,
                                        value: t
                                    })
                                },
                                onChangeSound(e) {
                                    "none" === e ? this.onChange("playSounds", !1) : (this.onChange("playSounds", !0), this.onChange("soundTheme", e))
                                }
                            }
                        }),
                        Br = {
                            select: "settings-select",
                            switch: "settings-switch",
                            preview: "settings-preview"
                        };
                    var Lr = (0, ns.Z)(jr, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", [s("div", {
                                class: e.$style.preview
                            }, [s("game-preview", {
                                attrs: {
                                    size: "60",
                                    fen: e.previewFen,
                                    "flip-board": e.settings.flipBoard,
                                    "piece-style": e.settings.pieceStyle,
                                    "color-scheme": e.settings.boardStyle
                                }
                            })], 1), e._v(" "), s("settings-field", {
                                attrs: {
                                    label: e.$trans("Pieces")
                                }
                            }, [s("v5-select", {
                                class: e.$style.select,
                                attrs: {
                                    "force-theme": "light",
                                    "label-key": "name",
                                    "value-key": "code",
                                    icon: "caret-down",
                                    value: e.settings.pieceStyle,
                                    options: e.boardStyles.pieceStyles || []
                                },
                                on: {
                                    input: function(t) {
                                        return e.onChange("pieceStyle", t)
                                    }
                                }
                            })], 1), e._v(" "), s("settings-field", {
                                attrs: {
                                    label: e.$trans("Board")
                                }
                            }, [s("v5-select", {
                                class: e.$style.select,
                                attrs: {
                                    "force-theme": "light",
                                    "label-key": "name",
                                    "value-key": "code",
                                    icon: "caret-down",
                                    value: e.settings.boardStyle,
                                    options: e.boardStyles.boardColors || []
                                },
                                on: {
                                    input: function(t) {
                                        return e.onChange("boardStyle", t)
                                    }
                                }
                            })], 1), e._v(" "), s("settings-field", {
                                attrs: {
                                    label: e.$trans("Sound Theme")
                                }
                            }, [s("v5-select", {
                                class: e.$style.select,
                                attrs: {
                                    "force-theme": "light",
                                    "label-key": "name",
                                    "value-key": "code",
                                    icon: "caret-down",
                                    value: e.selectedSound,
                                    options: e.soundOptions
                                },
                                on: {
                                    input: function(t) {
                                        return e.onChangeSound(t)
                                    }
                                }
                            })], 1), e._v(" "), s("settings-field", {
                                attrs: {
                                    label: e.$trans("Coordinates")
                                }
                            }, [s("v5-select", {
                                class: e.$style.select,
                                attrs: {
                                    "force-theme": "light",
                                    icon: "caret-down",
                                    value: e.settings.coordinates,
                                    options: e.coordinatesOptions
                                },
                                on: {
                                    input: function(t) {
                                        return e.onChange("coordinates", t)
                                    }
                                }
                            })], 1), e._v(" "), s("settings-field", {
                                attrs: {
                                    label: e.$trans("Piece Notation")
                                }
                            }, [s("v5-select", {
                                class: e.$style.select,
                                attrs: {
                                    "force-theme": "light",
                                    "label-key": "name",
                                    "value-key": "code",
                                    icon: "caret-down",
                                    value: e.settings.moveListDisplayType,
                                    options: e.boardStyles.moveListDisplayTypes
                                },
                                on: {
                                    input: function(t) {
                                        return e.onChange("moveListDisplayType", t)
                                    }
                                }
                            })], 1), e._v(" "), s("settings-field", {
                                attrs: {
                                    label: e.$trans("Animation Type")
                                }
                            }, [s("v5-select", {
                                class: e.$style.select,
                                attrs: {
                                    "force-theme": "light",
                                    "label-key": "name",
                                    "value-key": "code",
                                    icon: "caret-down",
                                    value: e.computedAnimationType,
                                    options: e.boardStyles.animationTypes
                                },
                                on: {
                                    input: function(t) {
                                        return e.onChange("animationType", t)
                                    }
                                }
                            })], 1), e._v(" "), s("settings-field", {
                                attrs: {
                                    tooltip: e.$trans("“Drag Pieces” causes pieces to snap to your mouse pointer when you grab them. “Drag Pieces Only” also completely ignores single clicks. “Click Squares” allows you to move by clicking on the start and destination squares without the piece snapping to your pointer."),
                                    label: e.$trans("Move Method")
                                }
                            }, [s("v5-select", {
                                class: e.$style.select,
                                attrs: {
                                    "force-theme": "light",
                                    "label-key": "value",
                                    "value-key": "key",
                                    icon: "caret-down",
                                    value: e.settings.moveMethod,
                                    options: e.moveMethods
                                },
                                on: {
                                    input: function(t) {
                                        return e.onChange("moveMethod", t)
                                    }
                                }
                            })], 1), e._v(" "), s("settings-field", {
                                attrs: {
                                    label: e.$trans("Highlight Moves")
                                }
                            }, [s("v5-switch", {
                                class: e.$style.switch,
                                attrs: {
                                    name: "highlightMoves",
                                    value: e.settings.highlightMoves
                                },
                                on: {
                                    input: function(t) {
                                        return e.onChange("highlightMoves", t)
                                    }
                                }
                            })], 1), e._v(" "), s("settings-field", {
                                attrs: {
                                    label: e.$trans("Show Legal Moves")
                                }
                            }, [s("v5-switch", {
                                class: e.$style.switch,
                                attrs: {
                                    name: "highlightLegalMoves",
                                    value: e.settings.highlightLegalMoves
                                },
                                on: {
                                    input: function(t) {
                                        return e.onChange("highlightLegalMoves", t)
                                    }
                                }
                            })], 1), e._v(" "), s("settings-field", {
                                attrs: {
                                    label: e.$trans("White Always on Bottom")
                                }
                            }, [s("v5-switch", {
                                class: e.$style.switch,
                                attrs: {
                                    name: "isWhiteOnBottom",
                                    value: e.settings.isWhiteOnBottom
                                },
                                on: {
                                    input: function(t) {
                                        return e.onChange("isWhiteOnBottom", t)
                                    }
                                }
                            })], 1), e._v(" "), e.isOwner ? s("settings-field", {
                                attrs: {
                                    tooltip: e.$trans("Toggle Large Classroom on for optimal video and audio support if you think your room will have more than 6 participants."),
                                    label: e.$trans("Large Classroom")
                                }
                            }, [s("v5-switch", {
                                class: e.$style.switch,
                                attrs: {
                                    name: "largeClassroom",
                                    value: e.settings.largeClassroom
                                },
                                on: {
                                    input: function(t) {
                                        return e.onChange("largeClassroom", t)
                                    }
                                }
                            })], 1) : e._e(), e._v(" "), s("settings-field", {
                                attrs: {
                                    label: e.$trans("Camera")
                                }
                            }, [s("v5-select", {
                                class: e.$style.select,
                                attrs: {
                                    "force-theme": "light",
                                    icon: "caret-down",
                                    value: e.cameraId,
                                    options: e.cameraOptions
                                },
                                on: {
                                    input: function(t) {
                                        return e.onChange("camera", t)
                                    }
                                }
                            })], 1), e._v(" "), s("settings-field", {
                                attrs: {
                                    label: e.$trans("Microphone")
                                }
                            }, [s("v5-select", {
                                class: e.$style.select,
                                attrs: {
                                    "force-theme": "light",
                                    icon: "caret-down",
                                    value: e.microphoneId,
                                    options: e.microphoneOptions
                                },
                                on: {
                                    input: function(t) {
                                        return e.onChange("microphone", t)
                                    }
                                }
                            })], 1)], 1)
                        }), [], !1, (function settings_injectStyles(e) {
                            this.$style = Br.locals || Br
                        }), null, null).exports,
                        Dr = s(5072),
                        Ur = s(5823),
                        zr = {
                            name: "SettingsModalContainer",
                            components: {
                                ModalContent: Ur.Z,
                                ModalContainer: Dr.Z,
                                V5Button: ko.V5Button
                            },
                            props: {
                                isSaveDisabled: Boolean
                            },
                            emits: ["save-settings", "close-modal"]
                        },
                        qr = {
                            component: "settings-modal-container-component",
                            footer: "settings-modal-container-footer",
                            button: "settings-modal-container-button"
                        };
                    var Vr = (0, ns.Z)(zr, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("modal-container", {
                                attrs: {
                                    "auto-show": ""
                                },
                                on: {
                                    "modal-did-hide": function(t) {
                                        return e.$emit("close-modal")
                                    }
                                }
                            }, [s("modal-content", {
                                class: e.$style.component,
                                attrs: {
                                    "data-cy": "settings-modal-content"
                                }
                            }, [e._t("default"), e._v(" "), s("div", {
                                class: e.$style.footer
                            }, [s("v5-button", {
                                class: e.$style.button,
                                attrs: {
                                    "data-cy": "cancel",
                                    theme: "basic-light"
                                },
                                on: {
                                    click: function(t) {
                                        return e.$emit("close-modal")
                                    }
                                }
                            }, [e._v("\n        " + e._s(e.$trans("Cancel")) + "\n      ")]), e._v(" "), s("v5-button", {
                                class: e.$style.button,
                                attrs: {
                                    "data-cy": "save",
                                    disabled: e.isSaveDisabled,
                                    theme: "primary"
                                },
                                on: {
                                    click: function(t) {
                                        return e.$emit("save-settings")
                                    }
                                }
                            }, [e._v("\n        " + e._s(e.$trans("Save")) + "\n      ")])], 1)], 2)], 1)
                        }), [], !1, (function settings_modal_container_injectStyles(e) {
                            this.$style = qr.locals || qr
                        }), null, null).exports,
                        Nr = {
                            name: "SettingsModalContent"
                        },
                        Zr = {
                            content: "settings-modal-content-content"
                        };
                    var Fr = (0, ns.Z)(Nr, (function() {
                            var e = this,
                                t = e.$createElement;
                            return (e._self._c || t)("div", {
                                class: e.$style.content
                            }, [e._t("default")], 2)
                        }), [], !1, (function settings_modal_content_injectStyles(e) {
                            this.$style = Zr.locals || Zr
                        }), null, null).exports,
                        Gr = (0, g.aZ)({
                            el: "#settings-modal",
                            name: "SettingsModalController",
                            components: {
                                SettingsModalContainer: Vr,
                                SettingsModalContent: Fr,
                                Settings: Lr
                            },
                            data: () => ({
                                changedSettings: [],
                                microphoneOptions: [],
                                cameraOptions: []
                            }),
                            computed: {
                                activeRoom: () => getActiveRoom(),
                                isVisible() {
                                    return Boolean(function isSettingsModalVisible() {
                                        return Rs.isVisible
                                    }() && this.boardStyles)
                                },
                                boardStyles: () => getBoardStyles(),
                                hasChanged() {
                                    return Boolean(this.changedSettings.length)
                                },
                                settings() {
                                    var e, t;
                                    const s = Object.assign({}, getBoardOptions(), {
                                        largeClassroom: null != (t = null == (e = this.activeRoom) ? void 0 : e.largeClassroom) && t,
                                        microphone: null,
                                        camera: null
                                    });
                                    return this.changedSettings.forEach((e => {
                                        s[e.field] = e.value
                                    })), s
                                },
                                isOwner() {
                                    return Boolean(this.activeRoom) && isRoomOwner(this.activeRoom.id)
                                },
                                cameraId: () => getCameraId(),
                                microphoneId: () => getMicrophoneId()
                            },
                            watch: {
                                async isVisible() {
                                    if (this.isVisible) {
                                        const e = await navigator.mediaDevices.enumerateDevices();
                                        this.cameraOptions = e.filter((e => "videoinput" === e.kind)).map((e => ({
                                            value: e.deviceId,
                                            label: e.label || this.$trans("Enable a camera in your browser")
                                        }))), this.microphoneOptions = e.filter((e => "audioinput" === e.kind)).map((e => ({
                                            value: e.deviceId,
                                            label: e.label || this.$trans("Enable a microphone in your browser")
                                        }))), 0 === this.cameraOptions.length && (this.cameraOptions = [{
                                            value: null,
                                            label: this.$trans("None")
                                        }]), 0 === this.microphoneOptions.length && (this.cameraOptions = [{
                                            value: null,
                                            label: this.$trans("None")
                                        }])
                                    }
                                }
                            },
                            methods: {
                                onCloseModal() {
                                    hideSettingsModal(), this.changedSettings = []
                                },
                                onSaveSettings() {
                                    const e = this.changedSettings.find((e => "largeClassroom" === e.field));
                                    e && async function updateLargeClassroom(e, t) {
                                        const s = getRoom(e);
                                        s && isRoomOwner(e) && (await z.publish({
                                            method: "put",
                                            service: j.Classroom,
                                            path: [D.Sessions, s.id, D.LargeClassroom],
                                            data: {
                                                largeClassroom: t
                                            }
                                        }), (0, a.Uc)(s, {
                                            largeClassroom: t
                                        }))
                                    }(this.activeRoom.id, Boolean(e.value));
                                    const t = this.changedSettings.find((e => "camera" === e.field));
                                    t && function setCameraId(e) {
                                        Qs.cameraId = e, Ks.Z.set(Ws.CameraId, e)
                                    }(t.value);
                                    const s = this.changedSettings.find((e => "microphone" === e.field));
                                    s && function setMicrophoneId(e) {
                                        Qs.microphoneId = e, Ks.Z.set(Ws.MicrophoneId, e)
                                    }(s.value), async function saveSettings(e) {
                                        const t = getBoardOptions(),
                                            s = {};
                                        e.forEach((({
                                            field: e,
                                            value: a
                                        }) => {
                                            e in t && Object.assign(s, {
                                                [e]: a
                                            })
                                        })), await saveBoardOptions(s)
                                    }(this.changedSettings), hideSettingsModal(), this.changedSettings = []
                                },
                                onChangeSettings({
                                    field: e,
                                    value: t
                                }) {
                                    "soundTheme" === e && previewSound(t), removeFromArray(this.changedSettings, (t => t.field === e)), this.settings[e] !== t && this.changedSettings.push({
                                        field: e,
                                        value: t
                                    })
                                }
                            }
                        }),
                        Wr = Gr,
                        Hr = (0, ns.Z)(Wr, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return e.isVisible ? s("settings-modal-container", {
                                attrs: {
                                    "is-save-disabled": !e.hasChanged
                                },
                                on: {
                                    "close-modal": e.onCloseModal,
                                    "save-settings": e.onSaveSettings
                                }
                            }, [s("settings-modal-content", [s("settings", {
                                attrs: {
                                    "board-styles": e.boardStyles,
                                    "camera-id": e.cameraId,
                                    "camera-options": e.cameraOptions,
                                    "is-owner": e.isOwner,
                                    "microphone-id": e.microphoneId,
                                    "microphone-options": e.microphoneOptions,
                                    settings: e.settings
                                },
                                on: {
                                    "change-settings": e.onChangeSettings
                                }
                            })], 1)], 1) : e._e()
                        }), [], !1, null, null, null).exports;
                    class LibraryGameModel extends a.Hn {
                        constructor() {
                            super(...arguments), this.id = "", this.pgn = "", this.result = "*", this.gameType = "chess", this.timeControl = null, this.whitePlayer = new PlayerModel(q.White), this.blackPlayer = new PlayerModel(q.Black)
                        }
                        getTimeControlIcon() {
                            return this.timeControl ? getTimeControlIcon(this.timeControl, this.gameType) : "chess-board"
                        }
                        getTimeControlLabel() {
                            return this.timeControl ? getTimeControlLabel(this.timeControl) : (0, V.dW)("n/a")
                        }
                        getResult() {
                            return "1/2-1/2" === this.result ? "½-½" : this.result
                        }
                    }
                    class LibraryCollectionModel extends a.Hn {
                        constructor() {
                            super(...arguments), this.createTime = null, this.customThumbnailUrl = null, this.id = "", this.name = "", this.numberOfItems = 0, this.thumbnail = null, this.gamesMeta = null, this.games = (0, a.BL)(LibraryGameModel, {
                                key: "id"
                            })
                        }
                        isExpanded() {
                            return Boolean(this.gamesMeta)
                        }
                    }
                    class LibraryCollectionMetaModel extends a.Hn {
                        constructor() {
                            super(...arguments), this.countPerPage = 0, this.currentPage = 1, this.totalCount = 0, this.totalPages = 1, this.pageSize = 10
                        }
                        getTotalPages() {
                            return Number(this.totalPages)
                        }
                        getCurrentPage() {
                            return Number(this.currentPage)
                        }
                        getRange() {
                            const e = this.getCurrentPage(),
                                t = (e - 1) * this.pageSize + 1,
                                s = Math.min(e * this.pageSize, this.totalCount);
                            return (0, V.dW)("%start%-%end% of %total%", {
                                "%start%": t,
                                "%end%": s,
                                "%total%": this.totalCount
                            })
                        }
                    }
                    class LibraryCollectionSelectionModel extends a.Hn {
                        constructor() {
                            super(...arguments), this.id = "", this.allGames = !1, this.games = [], this.totalGamesCount = 0
                        }
                    }
                    const Yr = {
                        isCreatingCollection: !1,
                        isSearchingCollections: !1,
                        isLoadingCollections: !1,
                        sort: null,
                        sortParam: 8,
                        collections: (0, a.BL)(LibraryCollectionModel, {
                            key: "id"
                        }),
                        collectionOptions: (0, a.BL)(LibraryCollectionModel, {
                            key: "id"
                        }),
                        meta: new LibraryCollectionMetaModel,
                        selectedCollections: (0, a.BL)(LibraryCollectionSelectionModel, {
                            key: "id"
                        })
                    };

                    function hideConfirmCloseRoomModal() {
                        Ie.isConfirmCloseRoomModalVisible = !1
                    }
                    var Kr = {
                            name: "Transpose",
                            props: {
                                target: String
                            },
                            watch: {
                                target() {
                                    this.appendToTarget()
                                }
                            },
                            mounted() {
                                this.appendToTarget()
                            },
                            beforeDestroy() {
                                this.$el && this.$el.parentNode && this.$el.parentNode.removeChild(this.$el)
                            },
                            methods: {
                                appendToTarget() {
                                    var e;
                                    null == (e = document.querySelector(this.target)) || e.appendChild(this.$el)
                                }
                            }
                        },
                        Qr = (0, ns.Z)(Kr, (function() {
                            var e = this,
                                t = e.$createElement;
                            return (e._self._c || t)("div", [e._t("default")], 2)
                        }), [], !1, null, null, null).exports,
                        Jr = (0, g.aZ)({
                            name: "ConfirmAutoSaveModal",
                            components: {
                                Transpose: Qr,
                                ModalContent: Ur.Z,
                                ModalContainer: Dr.Z,
                                V5Button: ko.V5Button
                            },
                            props: {
                                collection: {
                                    type: String,
                                    required: !0
                                },
                                isSavingRoom: {
                                    type: Boolean,
                                    required: !0
                                }
                            },
                            emits: ["cancel-close-room", "confirm-close-room", "close-room-without-saving"],
                            computed: {
                                message() {
                                    return this.isSavingRoom ? this.$trans("Saving...") : this.$trans("Are you sure you want to save your current game list over %collection%?", {
                                        "%collection%": this.collection
                                    })
                                }
                            },
                            methods: {
                                onCancel(e) {
                                    this.$emit("cancel-close-room", e)
                                },
                                onConfirm(e) {
                                    this.$emit("confirm-close-room", e)
                                },
                                onClose(e) {
                                    this.$emit("close-room-without-saving", e)
                                }
                            }
                        }),
                        Xr = {
                            content: "confirm-auto-save-modal-content",
                            message: "confirm-auto-save-modal-message",
                            buttons: "confirm-auto-save-modal-buttons",
                            link: "confirm-auto-save-modal-link",
                            button: "confirm-auto-save-modal-button"
                        };
                    var ei = (0, ns.Z)(Jr, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("transpose", {
                                attrs: {
                                    target: "body"
                                }
                            }, [s("modal-container", {
                                attrs: {
                                    "auto-show": ""
                                },
                                on: {
                                    "modal-did-hide": e.onCancel
                                }
                            }, [s("modal-content", {
                                class: e.$style.content
                            }, [s("h3", {
                                class: e.$style.message,
                                domProps: {
                                    textContent: e._s(e.message)
                                }
                            }), e._v(" "), e.isSavingRoom ? e._e() : s("div", {
                                class: e.$style.buttons
                            }, [s("v5-button", {
                                class: e.$style.button,
                                attrs: {
                                    size: "small",
                                    theme: "basic-light"
                                },
                                on: {
                                    click: e.onCancel
                                }
                            }, [e._v("\n          " + e._s(e.$trans("Cancel")) + "\n        ")]), e._v(" "), s("v5-button", {
                                class: e.$style.button,
                                attrs: {
                                    size: "small",
                                    theme: "primary"
                                },
                                on: {
                                    click: e.onConfirm
                                }
                            }, [e._v("\n          " + e._s(e.$trans("Save Changes")) + "\n        ")]), e._v(" "), s("button", {
                                class: e.$style.link,
                                attrs: {
                                    type: "button"
                                },
                                domProps: {
                                    textContent: e._s(e.$trans("Leave without saving game list"))
                                },
                                on: {
                                    click: e.onClose
                                }
                            })], 1)])], 1)], 1)
                        }), [], !1, (function confirm_auto_save_modal_injectStyles(e) {
                            this.$style = Xr.locals || Xr
                        }), null, null).exports,
                        ti = (0, g.aZ)({
                            name: "ConfirmCloseRoomModal",
                            components: {
                                Transpose: Qr,
                                ModalContent: Ur.Z,
                                ModalContainer: Dr.Z,
                                V5Button: ko.V5Button
                            },
                            props: {},
                            emits: ["cancel-close-room", "confirm-close-room"],
                            methods: {
                                onCancel(e) {
                                    this.$emit("cancel-close-room", e)
                                },
                                onConfirm(e) {
                                    this.$emit("confirm-close-room", e)
                                }
                            }
                        }),
                        si = {
                            content: "confirm-close-room-modal-content",
                            message: "confirm-close-room-modal-message",
                            buttons: "confirm-close-room-modal-buttons",
                            button: "confirm-close-room-modal-button"
                        };
                    var ai = (0, ns.Z)(ti, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("transpose", {
                                attrs: {
                                    target: "body"
                                }
                            }, [s("modal-container", {
                                attrs: {
                                    "auto-show": ""
                                },
                                on: {
                                    "modal-did-hide": e.onCancel
                                }
                            }, [s("modal-content", {
                                class: e.$style.content
                            }, [s("h3", {
                                class: e.$style.message
                            }, [e._v("\n        " + e._s(e.$trans("Are you sure you want to leave this room?")) + "\n      ")]), e._v(" "), s("div", {
                                class: e.$style.buttons
                            }, [s("v5-button", {
                                class: e.$style.button,
                                attrs: {
                                    size: "small",
                                    theme: "basic-light"
                                },
                                on: {
                                    click: e.onCancel
                                }
                            }, [e._v("\n          " + e._s(e.$trans("Cancel")) + "\n        ")]), e._v(" "), s("v5-button", {
                                class: e.$style.button,
                                attrs: {
                                    size: "small",
                                    theme: "primary"
                                },
                                on: {
                                    click: e.onConfirm
                                }
                            }, [e._v("\n          " + e._s(e.$trans("Confirm")) + "\n        ")])], 1)])], 1)], 1)
                        }), [], !1, (function confirm_close_room_modal_injectStyles(e) {
                            this.$style = si.locals || si
                        }), null, null).exports,
                        oi = (0, g.aZ)({
                            name: "LobbyFooter",
                            computed: {
                                howToBecomeCoachUrl: () => i.Z.generate("web_article_view", {
                                    url: "how-to-become-a-coach-on-chess-com"
                                }),
                                coachesUrl: () => i.Z.generate("web_coaches")
                            }
                        }),
                        ni = {
                            component: "lobby-footer-component",
                            row: "lobby-footer-row",
                            separator: "lobby-footer-separator",
                            icon: "lobby-footer-icon",
                            title: "lobby-footer-title",
                            subtitle: "lobby-footer-subtitle"
                        };
                    var ri = (0, ns.Z)(oi, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.$style.component
                            }, [s("a", {
                                class: e.$style.row,
                                attrs: {
                                    target: "_blank",
                                    href: e.coachesUrl
                                }
                            }, [s("span", {
                                staticClass: "icon-font-chess magnifying-glass",
                                class: e.$style.icon
                            }), e._v(" "), s("span", {
                                class: e.$style.title,
                                domProps: {
                                    textContent: e._s(e.$trans("Looking for a Coach?"))
                                }
                            }), e._v(" "), s("div", {
                                class: e.$style.subtitle,
                                domProps: {
                                    textContent: e._s(e.$trans("Browse through thousands of coaches"))
                                }
                            })]), e._v(" "), s("div", {
                                class: e.$style.separator
                            }), e._v(" "), s("a", {
                                class: e.$style.row,
                                attrs: {
                                    target: "_blank",
                                    href: e.howToBecomeCoachUrl
                                }
                            }, [s("span", {
                                staticClass: "icon-font-chess user",
                                class: e.$style.icon
                            }), e._v(" "), s("span", {
                                class: e.$style.title,
                                domProps: {
                                    textContent: e._s(e.$trans("Are you a Coach?"))
                                }
                            }), e._v(" "), s("div", {
                                class: e.$style.subtitle,
                                domProps: {
                                    textContent: e._s(e.$trans("Join the Chess.com Coaches program!"))
                                }
                            })])])
                        }), [], !1, (function lobby_footer_injectStyles(e) {
                            this.$style = ni.locals || ni
                        }), null, null).exports,
                        ii = (0, g.aZ)({
                            name: "ClassroomIcon"
                        }),
                        li = {
                            component: "classroom-icon-component"
                        };
                    var ci = (0, ns.Z)(ii, (function() {
                            var e = this,
                                t = e.$createElement;
                            return (e._self._c || t)("div", {
                                class: e.$style.component
                            })
                        }), [], !1, (function classroom_icon_injectStyles(e) {
                            this.$style = li.locals || li
                        }), null, null).exports,
                        di = (0, g.aZ)({
                            name: "LobbyHeader",
                            components: {
                                ClassroomIcon: ci
                            }
                        }),
                        ui = {
                            component: "lobby-header-component",
                            title: "lobby-header-title",
                            image: "lobby-header-image"
                        };
                    var mi = (0, ns.Z)(di, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.$style.component,
                                attrs: {
                                    "data-lobby-header-arc": ""
                                }
                            }, [s("h1", {
                                class: e.$style.title,
                                attrs: {
                                    "data-lobby-header-title": ""
                                },
                                domProps: {
                                    textContent: e._s(e.$trans("Classroom"))
                                }
                            }), e._v(" "), s("classroom-icon", {
                                class: e.$style.image,
                                attrs: {
                                    "data-lobby-header-image": ""
                                }
                            })], 1)
                        }), [], !1, (function lobby_header_injectStyles(e) {
                            this.$style = ui.locals || ui
                        }), null, null).exports,
                        hi = (0, g.aZ)({
                            name: "IconHelp",
                            directives: {
                                tooltip: Sa.Z
                            },
                            props: {
                                help: {
                                    type: String,
                                    required: !0
                                }
                            }
                        }),
                        pi = {
                            icon: "icon-help-icon"
                        };
                    var bi = (0, ns.Z)(hi, (function() {
                            var e = this,
                                t = e.$createElement;
                            return (e._self._c || t)("span", {
                                directives: [{
                                    name: "tooltip",
                                    rawName: "v-tooltip",
                                    value: e.help,
                                    expression: "help"
                                }],
                                staticClass: "icon-font-chess circle-question",
                                class: e.$style.icon
                            })
                        }), [], !1, (function icon_help_injectStyles(e) {
                            this.$style = pi.locals || pi
                        }), null, null).exports,
                        gi = (0, g.aZ)({
                            name: "LobbyTitle",
                            components: {
                                IconHelp: bi
                            },
                            props: {
                                label: {
                                    type: String,
                                    required: !0
                                },
                                help: {
                                    type: String,
                                    required: !0
                                }
                            }
                        }),
                        vi = {
                            title: "lobby-title-title",
                            border: "lobby-title-border",
                            label: "lobby-title-label"
                        };
                    var wi = (0, ns.Z)(gi, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.$style.title
                            }, [s("div", {
                                class: e.$style.border
                            }), e._v(" "), s("div", {
                                class: e.$style.label
                            }, [e._v("\n    " + e._s(e.label) + "\n    "), e.help ? s("icon-help", {
                                attrs: {
                                    help: e.help
                                }
                            }) : e._e()], 1), e._v(" "), s("div", {
                                class: e.$style.border
                            })])
                        }), [], !1, (function lobby_title_injectStyles(e) {
                            this.$style = vi.locals || vi
                        }), null, null).exports,
                        fi = (0, g.aZ)({
                            name: "LobbyJoinRoom",
                            directives: {
                                tooltip: Sa.Z
                            },
                            components: {
                                LobbyTitle: wi,
                                V5InputGroup: ko.V5InputGroup
                            },
                            props: {
                                isLoggedIn: {
                                    type: Boolean,
                                    required: !0
                                }
                            },
                            emits: ["join-room"],
                            data: () => ({
                                roomId: ""
                            }),
                            computed: {
                                componentClasses() {
                                    return {
                                        [this.$style.component]: !0,
                                        [this.$style.disabled]: !this.isLoggedIn
                                    }
                                },
                                iconRight() {
                                    return this.roomId ? "arrow-right" : null
                                },
                                tooltip() {
                                    return this.isLoggedIn ? null : this.$trans("Please login to create or join a room.")
                                }
                            },
                            methods: {
                                onEnter() {
                                    this.$emit("join-room", {
                                        roomId: this.roomId
                                    }), this.roomId = ""
                                }
                            }
                        }),
                        yi = {
                            component: "lobby-join-room-component",
                            disabled: "lobby-join-room-disabled",
                            row: "lobby-join-room-row",
                            input: "lobby-join-room-input"
                        };
                    var _i = (0, ns.Z)(fi, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.componentClasses,
                                attrs: {
                                    "data-lobby-join-room": ""
                                }
                            }, [s("lobby-title", {
                                attrs: {
                                    help: e.$trans("Join a Classroom by entering a room ID below."),
                                    label: e.$trans("Join Room")
                                }
                            }), e._v(" "), s("div", {
                                class: e.$style.row
                            }, [s("v5-input-group", {
                                directives: [{
                                    name: "tooltip",
                                    rawName: "v-tooltip",
                                    value: e.tooltip,
                                    expression: "tooltip"
                                }],
                                class: e.$style.input,
                                attrs: {
                                    name: "roomId",
                                    disabled: !e.isLoggedIn,
                                    "icon-right": e.iconRight,
                                    placeholder: e.$trans("Enter Room ID")
                                },
                                on: {
                                    enter: e.onEnter,
                                    "icon-click-right": e.onEnter
                                },
                                model: {
                                    value: e.roomId,
                                    callback: function(t) {
                                        e.roomId = t
                                    },
                                    expression: "roomId"
                                }
                            })], 1)], 1)
                        }), [], !1, (function lobby_join_room_injectStyles(e) {
                            this.$style = yi.locals || yi
                        }), null, null).exports,
                        ki = (0, g.aZ)({
                            name: "LobbyNewRoom",
                            directives: {
                                tooltip: Sa.Z
                            },
                            props: {
                                isLoggedIn: {
                                    type: Boolean,
                                    required: !0
                                }
                            },
                            emits: ["new-room"],
                            computed: {
                                componentClasses() {
                                    return {
                                        [this.$style.component]: !0,
                                        [this.$style.disabled]: !this.isLoggedIn
                                    }
                                },
                                tooltip() {
                                    return this.isLoggedIn ? null : this.$trans("Please login to create or join a room.")
                                }
                            },
                            methods: {
                                onClick(e) {
                                    this.isLoggedIn && this.$emit("new-room", e)
                                }
                            }
                        }),
                        Ci = {
                            component: "lobby-new-room-component",
                            disabled: "lobby-new-room-disabled",
                            button: "lobby-new-room-button",
                            text: "lobby-new-room-text",
                            icon: "lobby-new-room-icon"
                        };
                    var Si = (0, ns.Z)(ki, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.componentClasses
                            }, [s("button", {
                                directives: [{
                                    name: "tooltip",
                                    rawName: "v-tooltip",
                                    value: e.tooltip,
                                    expression: "tooltip"
                                }],
                                class: e.$style.button,
                                attrs: {
                                    "data-lobby-new-room": ""
                                },
                                on: {
                                    click: e.onClick
                                }
                            }, [s("span", {
                                staticClass: "icon-font-chess plus",
                                class: e.$style.icon
                            }), e._v(" "), s("span", {
                                class: e.$style.text,
                                domProps: {
                                    textContent: e._s(e.$trans("New Room"))
                                }
                            })])])
                        }), [], !1, (function lobby_new_room_injectStyles(e) {
                            this.$style = Ci.locals || Ci
                        }), null, null).exports,
                        xi = (0, g.aZ)({
                            name: "UserInvitations",
                            components: {
                                Avatar: pa,
                                LobbyTitle: wi,
                                V5Button: ko.V5Button
                            },
                            props: {
                                userInvitations: {
                                    type: Array,
                                    required: !0
                                }
                            },
                            emits: ["accept-invitation", "decline-invitation"],
                            methods: {
                                onClickAccept(e) {
                                    this.$emit("accept-invitation", {
                                        invitation: e
                                    })
                                },
                                onClickDecline(e) {
                                    this.$emit("decline-invitation", {
                                        invitation: e
                                    })
                                }
                            }
                        }),
                        $i = {
                            component: "user-invitations-component",
                            row: "user-invitations-row",
                            username: "user-invitations-username",
                            button: "user-invitations-button",
                            icon: "user-invitations-icon"
                        };
                    var Pi = (0, ns.Z)(xi, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.$style.component
                            }, [s("lobby-title", {
                                attrs: {
                                    help: e.$trans("Accept or reject invites to join a Classroom."),
                                    label: e.$trans("Invites")
                                }
                            }), e._v(" "), e._l(e.userInvitations, (function(t) {
                                return s("div", {
                                    key: t.id,
                                    class: e.$style.row
                                }, [s("avatar", {
                                    class: e.$style.avatar,
                                    attrs: {
                                        width: "24",
                                        height: "24",
                                        alt: t.creator.username,
                                        src: t.creator.avatarUrl
                                    }
                                }), e._v(" "), s("span", {
                                    class: e.$style.username,
                                    domProps: {
                                        textContent: e._s(t.creator.username)
                                    }
                                }), e._v(" "), s("v5-button", {
                                    class: e.$style.button,
                                    attrs: {
                                        "data-cy": "user-invitations-decline",
                                        size: "small",
                                        theme: "basic",
                                        "aria-label": e.$trans("Decline Invitation")
                                    },
                                    on: {
                                        click: function(s) {
                                            return e.onClickDecline(t)
                                        }
                                    }
                                }, [s("span", {
                                    staticClass: "icon-font-chess x",
                                    class: e.$style.icon
                                })]), e._v(" "), s("v5-button", {
                                    class: e.$style.button,
                                    attrs: {
                                        "data-cy": "user-invitations-accept",
                                        size: "small",
                                        theme: "primary",
                                        "aria-label": e.$trans("Accept Invitation")
                                    },
                                    on: {
                                        click: function(s) {
                                            return e.onClickAccept(t)
                                        }
                                    }
                                }, [s("span", {
                                    staticClass: "icon-font-chess checkmark",
                                    class: e.$style.icon
                                })])], 1)
                            }))], 2)
                        }), [], !1, (function user_invitations_injectStyles(e) {
                            this.$style = $i.locals || $i
                        }), null, null).exports,
                        Ei = (0, g.aZ)({
                            name: "Lobby",
                            components: {
                                LobbyHeader: mi,
                                LobbyFooter: ri,
                                LobbyNewRoom: Si,
                                LobbyJoinRoom: _i,
                                UserInvitations: Pi
                            },
                            props: {
                                userInvitations: {
                                    type: Array,
                                    required: !0
                                },
                                isLoggedIn: {
                                    type: Boolean,
                                    required: !0
                                }
                            },
                            emits: ["accept-invitation", "decline-invitation", "new-room", "join-room"]
                        }),
                        Oi = {
                            component: "lobby-component",
                            body: "lobby-body"
                        };
                    var Ai = (0, ns.Z)(Ei, (function() {
                        var e = this,
                            t = e.$createElement,
                            s = e._self._c || t;
                        return s("div", {
                            class: e.$style.component
                        }, [s("lobby-header"), e._v(" "), s("div", {
                            class: e.$style.body
                        }, [s("lobby-new-room", {
                            attrs: {
                                "is-logged-in": e.isLoggedIn
                            },
                            on: {
                                "new-room": function(t) {
                                    return e.$emit("new-room", t)
                                }
                            }
                        }), e._v(" "), s("lobby-join-room", {
                            attrs: {
                                "is-logged-in": e.isLoggedIn
                            },
                            on: {
                                "join-room": function(t) {
                                    return e.$emit("join-room", t)
                                }
                            }
                        }), e._v(" "), e.userInvitations.length ? s("user-invitations", {
                            attrs: {
                                "user-invitations": e.userInvitations
                            },
                            on: {
                                "accept-invitation": function(t) {
                                    return e.$emit("accept-invitation", t)
                                },
                                "decline-invitation": function(t) {
                                    return e.$emit("decline-invitation", t)
                                }
                            }
                        }) : e._e()], 1), e._v(" "), s("lobby-footer")], 1)
                    }), [], !1, (function lobby_injectStyles(e) {
                        this.$style = Oi.locals || Oi
                    }), null, null).exports;

                    function dispatchResize() {
                        window.dispatchEvent(new Event("resize"))
                    }

                    function getActiveChessboardWithState() {
                        const e = l.getActiveChessboardId();
                        if (!e) throw new Error("No active chessboard");
                        return function getChessboardWithState(e) {
                            return b.chessboards[`${e}`]
                        }(e)
                    }

                    function getSelectedRoomTab() {
                        return Ie.selectedRoomTab
                    }
                    const Ti = [Re.SetupPosition, Re.LoadFromLibrary, Re.LoadFromArchive, Re.LoadFromExplorer];

                    function isSetupBoardVisible() {
                        return Boolean(isDraftingBoard() && !isAddingBoards(getActiveRoom().id) && !Ti.includes(getSelectedSetupBoardTab()))
                    }

                    function getRect(e) {
                        var t, s;
                        return null != (s = null == (t = document.querySelector(e)) ? void 0 : t.getBoundingClientRect()) ? s : {
                            top: 0,
                            height: 0
                        }
                    }

                    function getHeight(e) {
                        return getRect(e).height
                    }

                    function getBottom(e) {
                        const t = getRect(e);
                        return t.top + t.height
                    }

                    function getChatMaxHeight() {
                        let e = window.innerHeight - 16;
                        if (getSelectedRoomTab() === Me.Members) e -= getBottom(".members-list-row:first-child");
                        else if (isSetupBoardVisible()) switch (getSelectedSetupBoardTab()) {
                            case Re.SetupPosition:
                                e -= getBottom(".setup-position-bottom");
                                break;
                            case Re.LoadFromArchive:
                                e -= getBottom(".load-from-archive-row"), e -= getHeight(".load-from-archive-footer");
                                break;
                            case Re.LoadFromLibrary:
                                e -= getBottom(".load-from-library-list .collection-item-component"), e -= getHeight(".load-from-library-footer");
                                break;
                            default:
                                e -= getBottom(".setup-board-accordion:last-child")
                        } else e -= getRect(".board-moves-moves").top + 50;
                        return e -= getRect(".board-controls-component").height, e
                    }

                    function shouldAutoCollapseChat() {
                        return isDraftingBoard() || Ti.includes(getSelectedSetupBoardTab())
                    }

                    function isChatVisible() {
                        return shouldAutoCollapseChat() ? Ie.isAutoCollapsedChatVisible : Ie.isChatVisible
                    }

                    function selectRoomTab(e) {
                        Ie.selectedRoomTab = e
                    }

                    function toggleChat(e = !isChatVisible()) {
                        var t, s;
                        shouldAutoCollapseChat() ? Ie.isAutoCollapsedChatVisible = e : Ie.isChatVisible = e, Ie.toggleChatMessages = null != (s = null == (t = getActiveRoom()) ? void 0 : t.chatMessages.length) ? s : 0
                    }

                    function toggleVideoContainerMounted(e) {
                        Qs.videoContainerMounted = e
                    }
                    var Mi = Object.defineProperty,
                        Ri = Object.getOwnPropertySymbols,
                        Ii = Object.prototype.hasOwnProperty,
                        ji = Object.prototype.propertyIsEnumerable,
                        update_evaluation_settings_defNormalProp = (e, t, s) => t in e ? Mi(e, t, {
                            enumerable: !0,
                            configurable: !0,
                            writable: !0,
                            value: s
                        }) : e[t] = s,
                        update_evaluation_settings_spreadValues = (e, t) => {
                            for (var s in t || (t = {})) Ii.call(t, s) && update_evaluation_settings_defNormalProp(e, s, t[s]);
                            if (Ri)
                                for (var s of Ri(t)) ji.call(t, s) && update_evaluation_settings_defNormalProp(e, s, t[s]);
                            return e
                        };
                    async function updateEvaluationSettings(e, t) {
                        const s = getRoom(e);
                        s && isRoomOwner(e) && (await z.publish({
                            method: "put",
                            service: j.Classroom,
                            path: [D.Sessions, s.id, D.EvaluationSettings],
                            data: update_evaluation_settings_spreadValues({
                                showEvaluationBar: s.showEvaluationBar,
                                showEvaluationLines: s.showEvaluationLines,
                                showMoveList: s.showMoveList,
                                coachOnly: s.coachOnly
                            }, t)
                        }), (0, a.Uc)(s, t), t.showEvaluationBar && function logEvalToggledOn(e) {
                            (0, ps.K)(hs.ClassroomEvalToggledOn, {
                                roomId: e
                            })
                        }(s.id), t.showEvaluationLines && function logLinesToggledOn(e) {
                            (0, ps.K)(hs.ClassroomLinesToggledOn, {
                                roomId: e
                            })
                        }(s.id), t.coachOnly && function logOnlyCoachToggledOn(e) {
                            (0, ps.K)(hs.ClassroomOnlyCoachToggledOn, {
                                roomId: e
                            })
                        }(s.id))
                    }
                    var Bi = (e => (e.OnlyCoach = "coachOnly", e.EvaluationBar = "showEvaluationBar", e.EvaluationLines = "showEvaluationLines", e.Notation = "showMoveList", e))(Bi || {}),
                        Li = (0, g.aZ)({
                            name: "DropdownMenu",
                            directives: {
                                clickOutside: To
                            },
                            emits: ["close-menu"],
                            methods: {
                                onClickOutside() {
                                    this.$emit("close-menu")
                                }
                            }
                        }),
                        Di = {
                            component: "dropdown-menu-component"
                        };
                    var Ui = (0, ns.Z)(Li, (function() {
                            var e = this,
                                t = e.$createElement;
                            return (e._self._c || t)("div", {
                                directives: [{
                                    name: "click-outside",
                                    rawName: "v-click-outside",
                                    value: e.onClickOutside,
                                    expression: "onClickOutside"
                                }],
                                class: e.$style.component
                            }, [e._t("default")], 2)
                        }), [], !1, (function dropdown_menu_injectStyles(e) {
                            this.$style = Di.locals || Di
                        }), null, null).exports,
                        zi = {
                            name: "ConfirmTray",
                            directives: {
                                clickOutside: To
                            },
                            components: {
                                V5Button: ko.V5Button
                            },
                            props: {
                                confirmText: String
                            },
                            emits: ["yes", "no"],
                            methods: {
                                noClick(e) {
                                    this.$emit("no", e)
                                },
                                yesClick(e) {
                                    this.$emit("yes", e)
                                }
                            }
                        },
                        qi = {
                            component: "confirm-tray-component",
                            text: "confirm-tray-text"
                        };
                    var Vi = (0, ns.Z)(zi, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                directives: [{
                                    name: "click-outside",
                                    rawName: "v-click-outside",
                                    value: {
                                        handler: e.noClick,
                                        clickEvent: "mousedown"
                                    },
                                    expression: "{ handler: noClick, clickEvent: 'mousedown' }"
                                }],
                                class: e.$style.component,
                                on: {
                                    click: function(e) {
                                        e.stopPropagation()
                                    },
                                    mousedown: function(e) {
                                        e.stopPropagation()
                                    }
                                }
                            }, [e.confirmText ? s("div", {
                                class: e.$style.text,
                                domProps: {
                                    textContent: e._s(e.confirmText)
                                }
                            }) : e._e(), e._v(" "), e._t("default"), e._v(" "), e._m(0), e._v(" "), e._m(1)], 2)
                        }), [function() {
                            var e = this,
                                t = e.$createElement;
                            return (e._self._c || t)("v5-button", {
                                attrs: {
                                    theme: "basic-light",
                                    size: "small"
                                },
                                domProps: {
                                    textContent: e._s(e.$trans("No"))
                                },
                                on: {
                                    click: function(t) {
                                        return t.stopPropagation(), e.noClick.apply(null, arguments)
                                    }
                                }
                            })
                        }, function() {
                            var e = this,
                                t = e.$createElement;
                            return (e._self._c || t)("v5-button", {
                                attrs: {
                                    theme: "primary",
                                    size: "small"
                                },
                                domProps: {
                                    textContent: e._s(e.$trans("Yes"))
                                },
                                on: {
                                    click: function(t) {
                                        return t.stopPropagation(), e.yesClick.apply(null, arguments)
                                    }
                                }
                            })
                        }], !1, (function confirm_tray_injectStyles(e) {
                            this.$style = qi.locals || qi
                        }), null, null),
                        Ni = Vi.exports,
                        Zi = (0, g.aZ)({
                            name: "TransposeWithPosition",
                            components: {
                                Transpose: Qr
                            },
                            props: {
                                parent: {
                                    type: HTMLElement,
                                    required: !0
                                }
                            },
                            data: () => ({
                                styles: {}
                            }),
                            mounted() {
                                this.updatePosition()
                            },
                            methods: {
                                updatePosition() {
                                    const e = this.parent.getBoundingClientRect();
                                    this.styles = {
                                        top: `${e.top}px`,
                                        left: `${e.left}px`
                                    }
                                }
                            }
                        }),
                        Fi = {
                            component: "transpose-with-position-component"
                        };
                    var Gi = (0, ns.Z)(Zi, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("transpose", {
                                attrs: {
                                    target: "body"
                                }
                            }, [s("div", {
                                class: e.$style.component,
                                style: e.styles
                            }, [e._t("default")], 2)])
                        }), [], !1, (function transpose_with_position_injectStyles(e) {
                            this.$style = Fi.locals || Fi
                        }), null, null).exports,
                        Wi = (0, g.aZ)({
                            name: "DropdownOption",
                            directives: {
                                tooltip: Sa.Z
                            },
                            components: {
                                ConfirmTray: Ni,
                                TransposeWithPosition: Gi,
                                V5Switch: ko.V5Switch
                            },
                            props: {
                                icon: {
                                    type: String,
                                    required: !1
                                },
                                label: {
                                    type: String,
                                    required: !1
                                },
                                confirm: {
                                    type: String,
                                    required: !1
                                },
                                checked: {
                                    type: Boolean,
                                    default: !1
                                },
                                showSwitch: {
                                    type: Boolean,
                                    default: !1
                                },
                                value: {
                                    type: Boolean,
                                    default: !1
                                },
                                name: {
                                    type: String,
                                    required: !1
                                },
                                info: {
                                    type: String,
                                    required: !1
                                }
                            },
                            emits: ["click"],
                            data: () => ({
                                isConfirmVisible: !1
                            }),
                            methods: {
                                onClick(e) {
                                    this.confirm ? this.isConfirmVisible = !0 : this.$emit("click", e)
                                },
                                onCancel() {
                                    this.isConfirmVisible = !1
                                },
                                onConfirm(e) {
                                    this.$emit("click", e)
                                }
                            }
                        }),
                        Hi = {
                            option: "dropdown-option-option",
                            label: "dropdown-option-label",
                            icon: "dropdown-option-icon",
                            info: "dropdown-option-info",
                            checked: "dropdown-option-checked",
                            switch: "dropdown-option-switch",
                            confirm: "dropdown-option-confirm"
                        };
                    var Yi = (0, ns.Z)(Wi, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("a", {
                                class: e.$style.option,
                                on: {
                                    click: e.onClick
                                }
                            }, [e.icon ? s("span", {
                                staticClass: "icon-font-chess",
                                class: [e.$style.icon, e.icon]
                            }) : e._e(), e._v(" "), e.label ? s("span", {
                                class: e.$style.label,
                                domProps: {
                                    textContent: e._s(e.label)
                                }
                            }) : e._e(), e._v(" "), e.info ? s("span", {
                                directives: [{
                                    name: "tooltip",
                                    rawName: "v-tooltip",
                                    value: e.info,
                                    expression: "info"
                                }],
                                staticClass: "icon-font-chess circle-info",
                                class: e.$style.info
                            }) : e._e(), e._v(" "), e.checked ? s("span", {
                                staticClass: "icon-font-chess checkmark",
                                class: e.$style.checked
                            }) : e._e(), e._v(" "), e.showSwitch ? s("v5-switch", {
                                class: e.$style.switch,
                                attrs: {
                                    name: e.name,
                                    value: e.value
                                }
                            }) : e._e(), e._v(" "), e._t("default"), e._v(" "), e.isConfirmVisible ? s("transpose-with-position", {
                                attrs: {
                                    parent: e.$el
                                }
                            }, [s("confirm-tray", {
                                class: e.$style.confirm,
                                attrs: {
                                    "confirm-text": e.confirm
                                },
                                on: {
                                    yes: e.onConfirm,
                                    no: e.onCancel
                                }
                            })], 1) : e._e()], 2)
                        }), [], !1, (function dropdown_option_injectStyles(e) {
                            this.$style = Hi.locals || Hi
                        }), null, null).exports,
                        Ki = (0, g.aZ)({
                            name: "EvaluationSettingsDropdown",
                            directives: {
                                tooltip: Sa.Z
                            },
                            components: {
                                DropdownMenu: Ui,
                                DropdownOption: Yi
                            },
                            props: {
                                room: {
                                    type: RoomModel,
                                    required: !0
                                }
                            },
                            emits: ["close-evaluation-settings", "toggle-evaluation-settings"],
                            computed: {
                                options() {
                                    return [{
                                        key: Bi.OnlyCoach,
                                        label: this.$trans("Only Coach"),
                                        icon: "eye",
                                        value: this.room.coachOnly,
                                        info: this.$trans("With Only Coach active, the toggles below only affect you, and everything is toggled off for students.")
                                    }, {
                                        key: Bi.EvaluationBar,
                                        label: this.$trans("Evaluation"),
                                        icon: "comp-analysis",
                                        value: this.room.showEvaluationBar
                                    }, {
                                        key: Bi.EvaluationLines,
                                        label: this.$trans("Lines"),
                                        icon: "thumb-row",
                                        value: this.room.showEvaluationLines
                                    }, {
                                        key: Bi.Notation,
                                        label: this.$trans("Notation"),
                                        icon: "paper-pencil",
                                        value: this.room.showMoveList
                                    }]
                                }
                            },
                            methods: {
                                onClickOption(e) {
                                    this.$emit("toggle-evaluation-settings", {
                                        option: e.key,
                                        value: !e.value
                                    })
                                }
                            }
                        }),
                        Qi = {
                            dropdown: "evaluation-settings-dropdown-dropdown"
                        };
                    var Ji = (0, ns.Z)(Ki, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("dropdown-menu", {
                                class: e.$style.dropdown,
                                on: {
                                    "close-menu": function(t) {
                                        return e.$emit("close-evaluation-settings", t)
                                    }
                                }
                            }, e._l(e.options, (function(t) {
                                return s("dropdown-option", {
                                    key: t.key,
                                    attrs: {
                                        "show-switch": "",
                                        name: t.key,
                                        icon: t.icon,
                                        value: t.value,
                                        label: t.label,
                                        confirm: t.confirm,
                                        info: t.info
                                    },
                                    on: {
                                        click: function(s) {
                                            return s.preventDefault(), e.onClickOption(t)
                                        }
                                    }
                                })
                            })), 1)
                        }), [], !1, (function evaluation_settings_dropdown_injectStyles(e) {
                            this.$style = Qi.locals || Qi
                        }), null, null).exports,
                        Xi = (0, g.aZ)({
                            name: "BoardControls",
                            directives: {
                                tooltip: Sa.Z
                            },
                            components: {
                                EvaluationSettingsDropdown: Ji
                            },
                            props: {
                                room: {
                                    type: RoomModel,
                                    required: !0
                                },
                                isAtEndOfLine: {
                                    type: Boolean,
                                    required: !0
                                },
                                isChatVisible: {
                                    type: Boolean,
                                    required: !0
                                },
                                isOwner: {
                                    type: Boolean,
                                    required: !0
                                },
                                hasBoardControl: {
                                    type: Boolean,
                                    required: !0
                                },
                                newChatMessages: {
                                    type: Number,
                                    required: !0
                                }
                            },
                            emits: ["go-to-end", "go-to-start", "move-backward", "move-forward", "toggle-chat", "toggle-evaluation-settings"],
                            data: () => ({
                                isReplaying: !1,
                                isDropdownVisible: !1
                            }),
                            computed: {
                                chatTooltip() {
                                    return this.isChatVisible ? this.$trans("Hide Chat") : this.$trans("Show Chat")
                                },
                                replayIcon() {
                                    return this.isReplaying ? "pause" : "play"
                                }
                            },
                            methods: {
                                onClickSettings() {
                                    this.isDropdownVisible = !this.isDropdownVisible
                                },
                                onCloseDropdown() {
                                    this.isDropdownVisible = !1
                                },
                                onClickReplay() {
                                    this.isReplaying = !this.isReplaying, this.isReplaying ? this.playNextMove() : this.clearReplayTimeout()
                                },
                                clearReplayTimeout() {
                                    this.replayTimeout && (clearTimeout(this.replayTimeout), this.replayTimeout = null)
                                },
                                playNextMove() {
                                    this.clearReplayTimeout(), this.isAtEndOfLine ? this.onClickReplay() : (this.$emit("move-forward"), this.replayTimeout = setTimeout(this.playNextMove, 1e3))
                                }
                            }
                        }),
                        el = {
                            component: "board-controls-component",
                            buttons: "board-controls-buttons",
                            button: "board-controls-button",
                            "button-icon": "board-controls-button-icon",
                            settings: "board-controls-settings",
                            chat: "board-controls-chat",
                            "chat-visible": "board-controls-chat-visible",
                            collapse: "board-controls-collapse",
                            expand: "board-controls-expand",
                            badge: "board-controls-badge"
                        };
                    var tl = (0, ns.Z)(Xi, (function() {
                        var e, t = this,
                            s = t.$createElement,
                            a = t._self._c || s;
                        return a("div", {
                            class: t.$style.component
                        }, [t.isOwner ? a("div", {
                            class: t.$style.settings
                        }, [a("button", {
                            directives: [{
                                name: "tooltip",
                                rawName: "v-tooltip",
                                value: t.$trans("Settings"),
                                expression: "$trans('Settings')"
                            }],
                            class: t.$style.button,
                            attrs: {
                                type: "button",
                                "aria-label": t.$trans("Settings")
                            },
                            on: {
                                click: t.onClickSettings
                            }
                        }, [a("span", {
                            staticClass: "icon-font-chess switches",
                            class: t.$style["button-icon"]
                        })]), t._v(" "), t.isDropdownVisible ? a("evaluation-settings-dropdown", {
                            attrs: {
                                room: t.room
                            },
                            on: {
                                "close-evaluation-settings": t.onCloseDropdown,
                                "toggle-evaluation-settings": function(e) {
                                    return t.$emit("toggle-evaluation-settings", e)
                                }
                            }
                        }) : t._e()], 1) : t._e(), t._v(" "), a("div", {
                            class: t.$style.buttons
                        }, [t.hasBoardControl ? [a("button", {
                            directives: [{
                                name: "tooltip",
                                rawName: "v-tooltip",
                                value: t.$trans("Beginning"),
                                expression: "$trans('Beginning')"
                            }],
                            class: t.$style.button,
                            attrs: {
                                type: "button",
                                "aria-label": t.$trans("Beginning")
                            },
                            on: {
                                click: function(e) {
                                    return t.$emit("go-to-start", e)
                                }
                            }
                        }, [a("span", {
                            staticClass: "icon-font-chess chevron-previous",
                            class: t.$style["button-icon"]
                        })]), t._v(" "), a("button", {
                            directives: [{
                                name: "tooltip",
                                rawName: "v-tooltip",
                                value: t.$trans("Back"),
                                expression: "$trans('Back')"
                            }],
                            class: t.$style.button,
                            attrs: {
                                type: "button",
                                "aria-label": t.$trans("Back")
                            },
                            on: {
                                click: function(e) {
                                    return t.$emit("move-backward", e)
                                }
                            }
                        }, [a("span", {
                            staticClass: "icon-font-chess chevron-left",
                            class: t.$style["button-icon"]
                        })]), t._v(" "), a("button", {
                            directives: [{
                                name: "tooltip",
                                rawName: "v-tooltip",
                                value: t.$trans("Replay"),
                                expression: "$trans('Replay')"
                            }],
                            class: t.$style.button,
                            attrs: {
                                type: "button",
                                "aria-label": t.$trans("Replay")
                            },
                            on: {
                                click: t.onClickReplay
                            }
                        }, [a("span", {
                            staticClass: "icon-font-chess",
                            class: [t.$style["button-icon"], t.replayIcon]
                        })]), t._v(" "), a("button", {
                            directives: [{
                                name: "tooltip",
                                rawName: "v-tooltip",
                                value: t.$trans("Forward"),
                                expression: "$trans('Forward')"
                            }],
                            class: t.$style.button,
                            attrs: {
                                type: "button",
                                "aria-label": t.$trans("Forward")
                            },
                            on: {
                                click: function(e) {
                                    return t.$emit("move-forward", e)
                                }
                            }
                        }, [a("span", {
                            staticClass: "icon-font-chess chevron-right",
                            class: t.$style["button-icon"]
                        })]), t._v(" "), a("button", {
                            directives: [{
                                name: "tooltip",
                                rawName: "v-tooltip",
                                value: t.$trans("Ending"),
                                expression: "$trans('Ending')"
                            }],
                            class: t.$style.button,
                            attrs: {
                                type: "button",
                                "aria-label": t.$trans("Ending")
                            },
                            on: {
                                click: function(e) {
                                    return t.$emit("go-to-end", e)
                                }
                            }
                        }, [a("span", {
                            staticClass: "icon-font-chess chevron-next",
                            class: t.$style["button-icon"]
                        })])] : t._e()], 2), t._v(" "), a("button", {
                            directives: [{
                                name: "tooltip",
                                rawName: "v-tooltip",
                                value: t.chatTooltip,
                                expression: "chatTooltip"
                            }],
                            class: [t.$style.button, t.$style.chat, (e = {}, e[t.$style["chat-visible"]] = t.isChatVisible, e)],
                            attrs: {
                                type: "button",
                                "aria-label": t.chatTooltip
                            },
                            on: {
                                click: function(e) {
                                    return t.$emit("toggle-chat", e)
                                }
                            }
                        }, [a("div", {
                            staticClass: "icon-font-chess chat",
                            class: t.$style["button-icon"]
                        }), t._v(" "), !t.isChatVisible && t.newChatMessages ? a("span", {
                            class: t.$style.badge,
                            domProps: {
                                textContent: t._s(t.newChatMessages)
                            }
                        }) : a("span", {
                            staticClass: "icon-font-chess nav-expanded",
                            class: t.isChatVisible ? t.$style.collapse : t.$style.expand
                        })])])
                    }), [], !1, (function board_controls_injectStyles(e) {
                        this.$style = el.locals || el
                    }), null, null).exports;
                    const sl = [{
                            name: "",
                            icons: [{
                                name: "happy",
                                code: ":)",
                                emoji: "emoji_01_happy"
                            }, {
                                name: "sad",
                                code: ":(",
                                emoji: "emoji_05_sad"
                            }, {
                                name: "angry",
                                code: ":C",
                                emoji: "emoji_03_angry"
                            }, {
                                name: "ohno",
                                emoji: "emoji_04_hurt"
                            }, {
                                name: "worry",
                                emoji: "emoji_05_sad"
                            }, {
                                name: "wink",
                                code: ";)",
                                emoji: "emoji_06_wink"
                            }, {
                                name: "tears",
                                code: ":.(",
                                emoji: "emoji_07_sad"
                            }, {
                                name: "cry",
                                code: ":_(",
                                emoji: "emoji_08_lol"
                            }, {
                                name: "delicious",
                                emoji: "emoji_09_delicious"
                            }, {
                                name: "meh",
                                code: ":/",
                                emoji: "emoji_10_meh"
                            }, {
                                name: "grin",
                                code: ":D",
                                emoji: "emoji_11_happy"
                            }, {
                                name: "eek",
                                emoji: "emoji_12_shiver"
                            }, {
                                name: "grimace",
                                emoji: "emoji_13_bigmouth"
                            }, {
                                name: "evil",
                                code: ":V",
                                emoji: "emoji_14_bad"
                            }, {
                                name: "nervous",
                                emoji: "emoji_15_gasp"
                            }, {
                                name: "rage",
                                code: ":[]",
                                emoji: "emoji_16_angry"
                            }, {
                                name: "blush",
                                emoji: "emoji_17_flushed"
                            }, {
                                name: "shock",
                                emoji: "emoji_18_surprise"
                            }, {
                                name: "dead",
                                emoji: "emoji_19_dead"
                            }, {
                                name: "zzz",
                                emoji: "emoji_20_sleep"
                            }, {
                                name: "tongue",
                                emoji: "emoji_21_tongue"
                            }, {
                                name: "laugh",
                                code: ":P",
                                emoji: "emoji_22_happy"
                            }, {
                                name: "river",
                                emoji: "emoji_23_crying"
                            }, {
                                name: "horror",
                                emoji: "emoji_24_scream"
                            }, {
                                name: "peaceful",
                                emoji: "emoji_25_angel"
                            }, {
                                name: "love",
                                emoji: "emoji_26_love"
                            }, {
                                name: "smart",
                                emoji: "emoji_27_glasses"
                            }, {
                                name: "cool",
                                emoji: "emoji_28_cool"
                            }, {
                                name: "mustache",
                                emoji: "emoji_29_mustache"
                            }, {
                                name: "ghost",
                                emoji: "emoji_30_ghost"
                            }, {
                                name: "scream",
                                emoji: "emoji_31_scare"
                            }, {
                                name: "devil",
                                emoji: "emoji_32_evil"
                            }, {
                                name: "sick",
                                emoji: "emoji_33_yuk"
                            }, {
                                name: "kiss",
                                emoji: "emoji_34_kiss"
                            }, {
                                name: "thinker",
                                emoji: "emoji_35_thinker"
                            }, {
                                name: "exploding_head",
                                emoji: "emoji_37_mindblown"
                            }, {
                                name: "star",
                                emoji: "emoji_38_star"
                            }, {
                                name: "facepalm",
                                emoji: "emoji_36_facepalm"
                            }, {
                                name: "clap",
                                emoji: "emoji_39_clap"
                            }, {
                                name: "raised_hands",
                                emoji: "emoji_43_hands"
                            }, {
                                name: "tup",
                                emoji: "emoji_40_thumbsup"
                            }, {
                                name: "tdown",
                                emoji: "emoji_41_thumbsdown"
                            }, {
                                name: "fist",
                                emoji: "emoji_42_fist"
                            }, {
                                name: "strong",
                                emoji: "emoji_44_flexing"
                            }, {
                                name: "wave",
                                isPremium: !0,
                                emoji: "emoji_45_hand"
                            }, {
                                name: "troll",
                                isPremium: !0,
                                emoji: "emoji_46_meme"
                            }, {
                                name: "rainbow",
                                isPremium: !0,
                                emoji: "emoji_47_rainbow"
                            }, {
                                name: "unicorn",
                                isPremium: !0,
                                emoji: "emoji_48_unicorn"
                            }, {
                                name: "coffee",
                                isPremium: !0,
                                emoji: "emoji_49_coffee"
                            }, {
                                name: "donut",
                                isPremium: !0,
                                emoji: "emoji_50_donut"
                            }, {
                                name: "earth",
                                isPremium: !0,
                                emoji: "emoji_51_world"
                            }, {
                                name: "panda",
                                isPremium: !0,
                                emoji: "emoji_52_panda"
                            }, {
                                name: "skull",
                                isPremium: !0,
                                emoji: "emoji_53_skull"
                            }, {
                                name: "bitcoin",
                                isPremium: !0,
                                emoji: "emoji_54_coin"
                            }, {
                                name: "donkey",
                                isPremium: !0,
                                emoji: "emoji_55_dunkey"
                            }, {
                                name: "bomb",
                                isPremium: !0,
                                emoji: "emoji_57_bomb"
                            }, {
                                name: "fire",
                                isPremium: !0,
                                emoji: "emoji_56_fire"
                            }, {
                                name: "heart",
                                isPremium: !0,
                                emoji: "emoji_58_heart"
                            }, {
                                name: "flag_ukraine",
                                emoji: "emoji_59_flag_ukraine"
                            }, {
                                name: "peace",
                                emoji: "emoji_60_peace"
                            }]
                        }, {
                            name: "chess",
                            icons: [{
                                name: "play"
                            }, {
                                name: "draw"
                            }, {
                                name: "resign"
                            }, {
                                name: "board"
                            }, {
                                name: "wp"
                            }, {
                                name: "wn"
                            }, {
                                name: "wb"
                            }, {
                                name: "wr"
                            }, {
                                name: "wq"
                            }, {
                                name: "wk"
                            }, {
                                name: "medal"
                            }, {
                                name: "mate"
                            }, {
                                name: "cmate"
                            }, {
                                name: "clock"
                            }, {
                                name: "bp"
                            }, {
                                name: "bn"
                            }, {
                                name: "bb"
                            }, {
                                name: "br"
                            }, {
                                name: "bq"
                            }, {
                                name: "bk"
                            }, {
                                name: "bullet"
                            }, {
                                name: "blitz"
                            }, {
                                name: "live"
                            }, {
                                name: "castle"
                            }, {
                                name: "skewer"
                            }, {
                                name: "fork"
                            }, {
                                name: "pin"
                            }, {
                                name: "fish"
                            }, {
                                name: "trophy"
                            }, {
                                name: "battle"
                            }, {
                                name: "puzzle_rush"
                            }, {
                                name: "bughouse"
                            }, {
                                name: "daily"
                            }, {
                                name: "watch"
                            }, {
                                name: "four_player"
                            }, {
                                name: "chesskid"
                            }, {
                                name: "friend"
                            }, {
                                name: "club"
                            }, {
                                name: "leaderboard"
                            }, {
                                name: "computer"
                            }, {
                                name: "settings"
                            }, {
                                name: "messages"
                            }, {
                                name: "arena_kings"
                            }, {
                                name: "speed_chess_championship"
                            }, {
                                name: "titled_tuesday"
                            }, {
                                name: "diamond"
                            }, {
                                name: "platinum"
                            }, {
                                name: "gold"
                            }, {
                                name: "tilt"
                            }, {
                                name: "king_of_the_hill"
                            }, {
                                name: "3_check"
                            }, {
                                name: "crazyhouse"
                            }, {
                                name: "chess_960"
                            }, {
                                name: "brilliant"
                            }, {
                                name: "blunder"
                            }, {
                                name: "1_0"
                            }, {
                                name: "0_1"
                            }, {
                                name: "1_2"
                            }, {
                                name: "hype"
                            }, {
                                name: "good_game"
                            }, {
                                name: "stockfish"
                            }, {
                                name: "lc0"
                            }, {
                                name: "komodo"
                            }, {
                                name: "timeout"
                            }]
                        }, {
                            name: "holiday",
                            icons: [{
                                name: "birthday_cake",
                                isPremium: !0
                            }, {
                                name: "party_hat",
                                isPremium: !0
                            }, {
                                name: "cheers",
                                isPremium: !0
                            }, {
                                name: "heart_bear",
                                isPremium: !0
                            }, {
                                name: "heart_gift",
                                isPremium: !0
                            }, {
                                name: "heart_letter",
                                isPremium: !0
                            }, {
                                name: "clover",
                                isPremium: !0
                            }, {
                                name: "coins_bag",
                                isPremium: !0
                            }, {
                                name: "palm_tree",
                                isPremium: !0
                            }, {
                                name: "fireworks",
                                isPremium: !0
                            }, {
                                name: "halloween_ghost",
                                isPremium: !0
                            }, {
                                name: "halloween",
                                isPremium: !0
                            }, {
                                name: "rip",
                                isPremium: !0
                            }, {
                                name: "maple_leaf",
                                isPremium: !0
                            }, {
                                name: "turkey",
                                isPremium: !0
                            }, {
                                name: "present",
                                isPremium: !0
                            }, {
                                name: "hanukkah",
                                isPremium: !0
                            }, {
                                name: "christmas_tree",
                                isPremium: !0
                            }, {
                                name: "santa",
                                isPremium: !0
                            }, {
                                name: "christmas_wrench",
                                isPremium: !0
                            }]
                        }, {
                            name: "hosts",
                            icons: [{
                                name: "danny_rensch",
                                isPremium: !0
                            }, {
                                name: "danny_rensch_surprised",
                                isPremium: !0
                            }, {
                                name: "robert_hess",
                                isPremium: !0
                            }, {
                                name: "hikaru_nakamura",
                                isPremium: !0
                            }, {
                                name: "anand",
                                isPremium: !0
                            }, {
                                name: "naroditsky",
                                isPremium: !0
                            }, {
                                name: "maurice_ashley",
                                isPremium: !0
                            }, {
                                name: "anna_rudolf",
                                isPremium: !0
                            }, {
                                name: "alexandra_botez",
                                isPremium: !0
                            }, {
                                name: "andrea_botez",
                                isPremium: !0
                            }, {
                                name: "levy_rozman",
                                isPremium: !0
                            }, {
                                name: "eric_hansen",
                                isPremium: !0
                            }, {
                                name: "aman_hambleton",
                                isPremium: !0
                            }, {
                                name: "mike_klein",
                                isPremium: !0
                            }, {
                                name: "kosteniuk",
                                isPremium: !0
                            }, {
                                name: "samay_raina",
                                isPremium: !0
                            }, {
                                name: "kevin_bordi",
                                isPremium: !0
                            }, {
                                name: "krikor",
                                isPremium: !0
                            }]
                        }, {
                            name: "pro chess league",
                            icons: [{
                                name: "pcl",
                                isPremium: !0
                            }, {
                                name: "argentina_krakens",
                                isPremium: !0
                            }, {
                                name: "brazil_capybaras",
                                isPremium: !0
                            }, {
                                name: "california_unicorns",
                                isPremium: !0
                            }, {
                                name: "canada_chessbrahs",
                                isPremium: !0
                            }, {
                                name: "chicago_wind",
                                isPremium: !0
                            }, {
                                name: "china_pandas",
                                isPremium: !0
                            }, {
                                name: "croatia_bulldogs",
                                isPremium: !0
                            }, {
                                name: "france_roosters",
                                isPremium: !0
                            }, {
                                name: "germany_bears",
                                isPremium: !0
                            }, {
                                name: "hungary_hunters",
                                isPremium: !0
                            }, {
                                name: "india_yogis",
                                isPremium: !0
                            }, {
                                name: "israel_counsellors",
                                isPremium: !0
                            }, {
                                name: "italy_gladiators",
                                isPremium: !0
                            }, {
                                name: "netherlands_mosquitoes",
                                isPremium: !0
                            }, {
                                name: "new_york_marshalls",
                                isPremium: !0
                            }, {
                                name: "norway_gnomes",
                                isPremium: !0
                            }, {
                                name: "poland_hussars",
                                isPremium: !0
                            }, {
                                name: "russia_wizards",
                                isPremium: !0
                            }, {
                                name: "saint_louis_arch_bishops",
                                isPremium: !0
                            }, {
                                name: "spain_raptors",
                                isPremium: !0
                            }, {
                                name: "sweden_wasabis",
                                isPremium: !0
                            }, {
                                name: "turkey_knights",
                                isPremium: !0
                            }, {
                                name: "uk_lions",
                                isPremium: !0
                            }]
                        }],
                        al = /(:[\w\)\(\;\.\_\]\[]+)/g,
                        ol = /\S/;
                    const nl = "recentEmoticons";
                    const rl = new class Emoticons {
                        constructor() {
                            this.emoticonsByCode = {}, sl.forEach((e => {
                                e.icons.forEach((e => {
                                    e.code = e.code || `:${e.name}`, e.emoji && (e.emoji = (0, da.n)(`/bundles/web/images/emojis/${e.emoji}.json`)), this.emoticonsByCode[e.code] = e
                                }))
                            })), this.emoticonsMatcherRegEx = function createEmoticonMatcherRegEx(e) {
                                let t = e.map((e => e.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$|]/g, "\\$&")));
                                return t = t.join("|"), new RegExp(`(?:\\s|^)(${t})(?=\\s|$)`, "g")
                            }(Object.keys(this.emoticonsByCode))
                        }
                        getByCode(e) {
                            return this.emoticonsByCode[e]
                        }
                        getByName(e) {
                            return Object.values(this.emoticonsByCode).find((t => t.name === e))
                        }
                        getList(e) {
                            const t = [];
                            return sl.forEach((s => {
                                const a = {
                                    disabledIcons: [],
                                    enabledIcons: [],
                                    name: s.name
                                };
                                s.icons.forEach((t => {
                                    t.isPremium && !e ? a.disabledIcons.push(t) : a.enabledIcons.push(t)
                                })), t.push(a)
                            })), t
                        }
                        getRecentList() {
                            return this.recentList || (this.recentList = uniq(Ks.Z.get(nl, [])).map((e => this.getByCode(e)))), this.recentList
                        }
                        addRecentEmoticon(e) {
                            const t = this.getRecentList();
                            t.find((t => t.code === e)) || t.unshift(this.getByCode(e)), t.length >= 10 && t.pop(), Ks.Z.set(nl, uniq(t.map((e => e.code))))
                        }
                        getFormattedInput(e) {
                            return `${e} `
                        }
                        emoticonify({
                            text: e,
                            userHasPremium: t,
                            senderHasPremium: s,
                            className: a = "",
                            showEmoji: o
                        }) {
                            const n = function shouldEnlargeEmoticons(e = "") {
                                    const t = e.match(al);
                                    return t && t.length <= 5 && !ol.test(e.replace(al, ""))
                                }(e),
                                r = n ? "emoticon-2x" : "emoticon",
                                i = e.replace(this.emoticonsMatcherRegEx, ((e, i) => {
                                    const l = this.emoticonsByCode[i],
                                        c = l.isPremium && !t ? Vt.Z.trans("Upgrade to get all emojis!") : l.description || l.code;
                                    return s || !l.isPremium ? s && n && o && l.emoji ? '<lottie-animation autoplay src="$1" width="40" height="40" title="$2" speed="0.5" />'.replace("$1", l.emoji).replace("$2", c) : `<span class="${a}${a?" ":""}${r} ${r}-$1" title="$2"></span>`.replace("$1", l.name).replace("$2", c) : i
                                }));
                            return i
                        }
                        getEmojiFromMessage(e) {
                            return (e.match(this.emoticonsMatcherRegEx) || []).map((e => this.emoticonsByCode[e])).filter((e => Boolean(null == e ? void 0 : e.emoji)))
                        }
                    };
                    const il = new class Emotes {
                        constructor() {
                            this.emotes = {
                                Hello: Vt.Z.trans("Hello"),
                                "Good luck": Vt.Z.trans("Good luck"),
                                "Good move": Vt.Z.trans("Good move"),
                                Oops: Vt.Z.trans("Oops"),
                                Sorry: Vt.Z.trans("Sorry"),
                                Thanks: Vt.Z.trans("Thanks"),
                                "Good game": Vt.Z.trans("Good game"),
                                "Gotta go": Vt.Z.trans("Gotta go")
                            }, this.emoteRegExp = new RegExp(`(${Object.keys(this.emotes).join("|")})`)
                        }
                        getAllWithTranslations() {
                            return this.emotes
                        }
                        getTranslation(e) {
                            return this.emotes[e] || e
                        }
                        getAll() {
                            return Object.keys(this.emotes)
                        }
                        emotify(e) {
                            let t = e || "";
                            return t = t.replace(this.emoteRegExp, (e => this.getTranslation(e))), t
                        }
                    };
                    var ll = (0, ns.Z)({}, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("svg", {
                                attrs: {
                                    height: "24",
                                    viewBox: "0 0 11 24",
                                    width: "11",
                                    xmlns: "http://www.w3.org/2000/svg"
                                }
                            }, [s("path", {
                                attrs: {
                                    d: "m0 0h11v24h-11z",
                                    fill: "none"
                                }
                            }), e._v(" "), s("path", {
                                attrs: {
                                    d: "m4 24c6.85 0 7-3 7-3s-6-.73-6-7v-9a5 5 0 0 0 -5-5v24z",
                                    "fill-rule": "evenodd"
                                }
                            })])
                        }), [], !1, null, null, null).exports,
                        cl = {
                            name: "EmoticonsPopup",
                            directives: {
                                Tooltip: Sa.Z
                            },
                            components: {
                                IconFont: Vo.Z,
                                Bubble: ll,
                                Transpose: Qr
                            },
                            props: {
                                appendEmoticon: Function,
                                disabled: Boolean,
                                icon: {
                                    type: String,
                                    default: "smiley"
                                },
                                sendMessage: Function,
                                isPremium: Boolean,
                                alignRight: Boolean,
                                forceTheme: {
                                    type: String,
                                    default: ""
                                }
                            },
                            data: () => ({
                                clicks: 0,
                                popupStyles: null,
                                isEmoticonsPopupOpen: !1,
                                recentEmoticons: rl.getRecentList(),
                                emotes: il.getAllWithTranslations()
                            }),
                            computed: {
                                emoticons() {
                                    return rl.getList(this.isPremium)
                                },
                                popupClasses() {
                                    return {
                                        [this.$style.popup]: !0,
                                        [this.$style["align-right"]]: this.alignRight
                                    }
                                },
                                componentClasses() {
                                    return {
                                        [this.$style.component]: !0,
                                        [this.$style.disabled]: this.disabled,
                                        [this.$style.dark]: "dark" === this.forceTheme,
                                        [this.$style.light]: "light" === this.forceTheme
                                    }
                                }
                            },
                            watch: {
                                isEmoticonsPopupOpen() {
                                    this.clicks = 0
                                }
                            },
                            methods: {
                                getCategoryClasses(e) {
                                    return {
                                        [this.$style.category]: !0,
                                        [this.$style["with-margin"]]: !e.name && this.recentEmoticons.length && this.isPremium
                                    }
                                },
                                toggleEmoticonsPopup() {
                                    if (!this.disabled && (this.isEmoticonsPopupOpen = !this.isEmoticonsPopupOpen, this.isEmoticonsPopupOpen)) {
                                        const e = this.$el.getBoundingClientRect();
                                        this.popupStyles = {
                                            top: `${e.top}px`,
                                            left: `${e.left}px`
                                        };
                                        const eventListener = () => {
                                            this.hideEmoticonsPopup(), window.removeEventListener("resize", eventListener), document.removeEventListener("click", eventListener)
                                        };
                                        window.addEventListener("resize", eventListener), document.addEventListener("click", eventListener)
                                    }
                                },
                                onEmoticonClick(e) {
                                    rl.addRecentEmoticon(e.code), this.appendEmoticon(rl.getFormattedInput(e.code)), ++this.clicks >= 3 && this.hideEmoticonsPopup()
                                },
                                onEmoteClick(e) {
                                    !0 !== this.disabled && (this.sendMessage(e), this.hideEmoticonsPopup())
                                },
                                hideEmoticonsPopup() {
                                    this.isEmoticonsPopupOpen = !1, this.popupStyles = null
                                }
                            }
                        },
                        dl = {
                            component: "emoticons-popup-component",
                            light: "emoticons-popup-light",
                            dark: "emoticons-popup-dark",
                            button: "emoticons-popup-button",
                            "button-icon": "emoticons-popup-button-icon",
                            disabled: "emoticons-popup-disabled",
                            popup: "emoticons-popup-popup",
                            "align-right": "emoticons-popup-align-right",
                            close: "emoticons-popup-close",
                            "close-icon": "emoticons-popup-close-icon",
                            emotes: "emoticons-popup-emotes",
                            emote: "emoticons-popup-emote",
                            bubble: "emoticons-popup-bubble",
                            emoticons: "emoticons-popup-emoticons",
                            disabledIcons: "emoticons-popup-disabledIcons",
                            lock: "emoticons-popup-lock",
                            "with-margin": "emoticons-popup-with-margin",
                            upgrade: "emoticons-popup-upgrade",
                            "upgrade-icon": "emoticons-popup-upgrade-icon",
                            "upgrade-text": "emoticons-popup-upgrade-text"
                        };
                    var ul = (0, ns.Z)(cl, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.componentClasses
                            }, [s("button", {
                                class: e.$style.button,
                                attrs: {
                                    type: "button",
                                    "aria-label": e.$trans("Emojis")
                                },
                                on: {
                                    click: function(t) {
                                        return t.preventDefault(), t.stopPropagation(), e.toggleEmoticonsPopup.apply(null, arguments)
                                    }
                                }
                            }, [s("span", {
                                class: [e.$style["button-icon"], "icon-font-chess", e.icon]
                            })]), e._v(" "), e.isEmoticonsPopupOpen ? s("transpose", {
                                class: e.popupClasses,
                                style: e.popupStyles,
                                attrs: {
                                    target: "body"
                                },
                                on: {
                                    click: function(t) {
                                        return t.preventDefault(), t.stopPropagation(), e.hideEmoticonsPopup.apply(null, arguments)
                                    }
                                }
                            }, [s("button", {
                                class: e.$style.close,
                                attrs: {
                                    type: "button",
                                    "aria-label": e.$trans("Close")
                                },
                                on: {
                                    click: function(t) {
                                        return t.preventDefault(), t.stopPropagation(), e.hideEmoticonsPopup.apply(null, arguments)
                                    }
                                }
                            }, [s("span", {
                                staticClass: "icon-font-chess x",
                                class: e.$style["close-icon"]
                            })]), e._v(" "), s("div", {
                                class: e.$style.emotes
                            }, e._l(e.emotes, (function(t, a) {
                                return s("span", {
                                    key: a,
                                    class: e.$style.emote,
                                    on: {
                                        click: function(t) {
                                            return t.stopPropagation(), t.preventDefault(), e.onEmoteClick(a)
                                        }
                                    }
                                }, [e._v("\n        " + e._s(t) + "\n        "), s("bubble", {
                                    class: e.$style.bubble
                                })], 1)
                            })), 0), e._v(" "), s("div", {
                                class: e.$style.emoticons
                            }, [e.recentEmoticons.length ? s("div", {
                                class: e.$style.category
                            }, [s("h4", {
                                domProps: {
                                    textContent: e._s(e.$trans("Recent"))
                                }
                            }), e._v(" "), e._l(e.recentEmoticons, (function(t) {
                                return s("span", {
                                    key: t.code,
                                    staticClass: "emoticon-select",
                                    class: "emoticon-select-" + t.name,
                                    attrs: {
                                        title: t.code
                                    },
                                    on: {
                                        click: function(s) {
                                            return s.stopPropagation(), s.preventDefault(), e.onEmoticonClick(t)
                                        }
                                    }
                                })
                            }))], 2) : e._e(), e._v(" "), e.isPremium ? e._e() : s("div", {
                                class: e.$style.upgrade
                            }, [s("span", {
                                staticClass: "icon-font-chess membership-diamond",
                                class: e.$style["upgrade-icon"]
                            }), e._v(" "), s("span", {
                                class: e.$style["upgrade-text"],
                                domProps: {
                                    textContent: e._s(e.$trans("Upgrade for animated emoji!"))
                                }
                            })]), e._v(" "), e._l(e.emoticons, (function(t) {
                                return s("div", {
                                    key: t.name,
                                    class: e.getCategoryClasses(t)
                                }, [t.name ? s("h4", {
                                    domProps: {
                                        textContent: e._s(t.name)
                                    }
                                }) : e._e(), e._v(" "), e._l(t.enabledIcons, (function(t) {
                                    return s("span", {
                                        key: t.code,
                                        staticClass: "emoticon-select",
                                        class: "emoticon-select-" + t.name,
                                        attrs: {
                                            title: t.code
                                        },
                                        on: {
                                            click: function(s) {
                                                return s.stopPropagation(), s.preventDefault(), e.onEmoticonClick(t)
                                            }
                                        }
                                    })
                                })), e._v(" "), t.disabledIcons.length ? s("div", {
                                    class: e.$style.disabledIcons
                                }, [s("icon-font", {
                                    directives: [{
                                        name: "tooltip",
                                        rawName: "v-tooltip",
                                        value: e.$trans("Upgrade to get all emojis!"),
                                        expression: "$trans('Upgrade to get all emojis!')"
                                    }],
                                    class: e.$style.lock,
                                    attrs: {
                                        name: "lock"
                                    }
                                }), e._v(" "), e._l(t.disabledIcons, (function(t) {
                                    return s("span", {
                                        directives: [{
                                            name: "tooltip",
                                            rawName: "v-tooltip",
                                            value: e.$trans("Upgrade to get all emojis!"),
                                            expression: "$trans('Upgrade to get all emojis!')"
                                        }],
                                        key: t.code,
                                        staticClass: "emoticon-select emoticon-disabled",
                                        class: "emoticon-select-" + t.name,
                                        on: {
                                            click: function(e) {
                                                e.stopPropagation(), e.preventDefault()
                                            }
                                        }
                                    })
                                }))], 2) : e._e()], 2)
                            }))], 2)]) : e._e()], 1)
                        }), [], !1, (function emoticons_popup_injectStyles(e) {
                            this.$style = dl.locals || dl
                        }), null, null),
                        ml = ul.exports,
                        hl = (0, g.aZ)({
                            name: "ChatInput",
                            components: {
                                EmoticonsPopup: ml
                            },
                            props: {
                                isChatEnabled: {
                                    type: Boolean,
                                    required: !0
                                },
                                isPremium: {
                                    type: Boolean,
                                    required: !0
                                }
                            },
                            emits: ["send-chat-message"],
                            data: () => ({
                                text: ""
                            }),
                            computed: {
                                placeholder() {
                                    return this.isChatEnabled ? this.$trans("Message...") : this.$trans("Chat disabled")
                                }
                            },
                            methods: {
                                onEmoteSelect(e) {
                                    this.text = e, this.onEnter()
                                },
                                onEmoticonSelect(e) {
                                    this.text = `${this.text} ${e}`.trim(), this.$refs.input.focus()
                                },
                                onEnter() {
                                    var e;
                                    null == (e = this.$refs.emoticons) || e.hideEmoticonsPopup();
                                    const t = this.text.trim();
                                    t && (this.$emit("send-chat-message", {
                                        text: t
                                    }), this.text = "")
                                }
                            }
                        }),
                        pl = {
                            component: "chat-input-component",
                            input: "chat-input-input",
                            emoticons: "chat-input-emoticons"
                        };
                    var bl = (0, ns.Z)(hl, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.$style.component
                            }, [s("input", {
                                directives: [{
                                    name: "model",
                                    rawName: "v-model",
                                    value: e.text,
                                    expression: "text"
                                }],
                                ref: "input",
                                class: e.$style.input,
                                attrs: {
                                    type: "text",
                                    disabled: !e.isChatEnabled,
                                    placeholder: e.placeholder
                                },
                                domProps: {
                                    value: e.text
                                },
                                on: {
                                    keyup: function(t) {
                                        return !t.type.indexOf("key") && e._k(t.keyCode, "enter", 13, t.key, "Enter") ? null : e.onEnter.apply(null, arguments)
                                    },
                                    input: function(t) {
                                        t.target.composing || (e.text = t.target.value)
                                    }
                                }
                            }), e._v(" "), e.isChatEnabled ? s("emoticons-popup", {
                                ref: "emoticons",
                                class: e.$style.emoticons,
                                attrs: {
                                    "is-premium": e.isPremium,
                                    "append-emoticon": e.onEmoticonSelect,
                                    "send-message": e.onEmoteSelect
                                }
                            }) : e._e()], 1)
                        }), [], !1, (function chat_input_injectStyles(e) {
                            this.$style = pl.locals || pl
                        }), null, null),
                        gl = bl.exports,
                        vl = (0, g.aZ)({
                            name: "ChatMessage",
                            props: {
                                message: {
                                    type: ChatMessageModel,
                                    required: !0
                                },
                                room: {
                                    type: RoomModel,
                                    required: !0
                                },
                                isPremium: {
                                    type: Boolean,
                                    required: !0
                                }
                            },
                            computed: {
                                sender() {
                                    const e = this.room.chatSenders.find(this.message.authorId);
                                    return `${(null==e?void 0:e.username)||this.message.authorId}:`
                                },
                                content() {
                                    return rl.emoticonify({
                                        text: this.message.body.content,
                                        userHasPremium: this.isPremium,
                                        senderHasPremium: this.isPremium,
                                        showEmoji: !0
                                    })
                                }
                            }
                        }),
                        wl = {
                            message: "chat-message-message"
                        };
                    var fl = (0, ns.Z)(vl, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.$style.message
                            }, [s("span", {
                                domProps: {
                                    textContent: e._s(e.sender)
                                }
                            }), e._v(" "), s("span", {
                                domProps: {
                                    innerHTML: e._s(e.content)
                                }
                            })])
                        }), [], !1, (function chat_message_injectStyles(e) {
                            this.$style = wl.locals || wl
                        }), null, null).exports,
                        yl = (0, g.aZ)({
                            name: "ChatMessages",
                            props: {
                                room: {
                                    type: RoomModel,
                                    required: !0
                                },
                                isPremium: {
                                    type: Boolean,
                                    required: !0
                                }
                            },
                            computed: {
                                chatMessages() {
                                    return this.room.chatMessages
                                }
                            },
                            watch: {
                                "chatMessages.length": "scrollToLast"
                            },
                            mounted() {
                                this.scrollToLast()
                            },
                            methods: {
                                getComponent: e => e.body.component || fl,
                                getProps(e) {
                                    return e.body.component && e.body.props ? e.body.props : {
                                        message: e,
                                        room: this.room,
                                        isPremium: this.isPremium
                                    }
                                },
                                scrollToLast() {
                                    this.$nextTick((() => {
                                        var e;
                                        null == (e = this.$el.querySelector(`.${this.$style.component} [data-chat-message]:last-child`)) || e.scrollIntoView()
                                    }))
                                }
                            }
                        }),
                        _l = {
                            component: "chat-messages-component"
                        };
                    var kl = (0, ns.Z)(yl, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.$style.component
                            }, e._l(e.chatMessages, (function(t, a) {
                                return s(e.getComponent(t), e._b({
                                    key: a,
                                    tag: "component",
                                    attrs: {
                                        "data-chat-message": ""
                                    }
                                }, "component", e.getProps(t), !1))
                            })), 1)
                        }), [], !1, (function chat_messages_injectStyles(e) {
                            this.$style = _l.locals || _l
                        }), null, null).exports,
                        Cl = (0, g.aZ)({
                            name: "Chat",
                            components: {
                                ChatInput: gl,
                                ChatMessages: kl
                            },
                            props: {
                                isChatEnabled: {
                                    type: Boolean,
                                    required: !0
                                },
                                isPremium: {
                                    type: Boolean,
                                    required: !0
                                },
                                room: {
                                    type: RoomModel,
                                    required: !0
                                }
                            },
                            emits: ["send-chat-message"]
                        }),
                        Sl = {
                            component: "chat-component"
                        };
                    var xl = (0, ns.Z)(Cl, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.$style.component
                            }, [s("chat-messages", {
                                attrs: {
                                    "is-premium": e.isPremium,
                                    room: e.room
                                }
                            }), e._v(" "), s("chat-input", {
                                attrs: {
                                    "is-premium": e.isPremium,
                                    "is-chat-enabled": e.isChatEnabled
                                },
                                on: {
                                    "send-chat-message": function(t) {
                                        return e.$emit("send-chat-message", t)
                                    }
                                }
                            })], 1)
                        }), [], !1, (function chat_injectStyles(e) {
                            this.$style = Sl.locals || Sl
                        }), null, null).exports,
                        $l = {
                            name: "ResizableChatArea",
                            props: {
                                isResizable: Boolean,
                                minHeight: {
                                    type: Number,
                                    default: 200
                                },
                                maxHeight: {
                                    type: Function,
                                    default: () => window.innerHeight / 2
                                }
                            },
                            emits: ["resize-min-height"],
                            watch: {
                                minHeight() {
                                    this.resize()
                                },
                                maxHeight() {
                                    this.resize()
                                },
                                isResizable() {
                                    this.resize()
                                }
                            },
                            mounted() {
                                window.addEventListener("resize", this.onWindowResize), this.resize()
                            },
                            beforeDestroy() {
                                window.removeEventListener("resize", this.onWindowResize)
                            },
                            methods: {
                                onWindowResize() {
                                    const {
                                        height: e
                                    } = this.$el.getBoundingClientRect(), t = this.maxHeight();
                                    t < this.minHeight ? this.$emit("resize-min-height") : e > t && this.resize(t)
                                },
                                onMouseUp() {
                                    document.removeEventListener("mouseup", this.onMouseUp), document.removeEventListener("mousemove", this.onMouseMove)
                                },
                                onMouseMove(e) {
                                    const t = e.pageY - this.startTop;
                                    this.resize(this.startHeight - t)
                                },
                                onMouseDown(e) {
                                    e.preventDefault(), e.stopPropagation(), document.addEventListener("mouseup", this.onMouseUp), document.addEventListener("mousemove", this.onMouseMove), this.startTop = e.pageY, this.startHeight = this.$el.getBoundingClientRect().height
                                },
                                resize(e = this.minHeight) {
                                    const t = Math.max(this.minHeight, Math.min(this.maxHeight(), e));
                                    this.$el.style.height = `${t}px`, this.$el.style.minHeight = `${t}px`
                                }
                            }
                        },
                        Pl = {
                            component: "resizable-chat-area-component",
                            resizer: "resizable-chat-area-resizer"
                        };
                    var El = (0, ns.Z)($l, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.$style.component
                            }, [e.isResizable ? s("div", {
                                class: e.$style.resizer,
                                on: {
                                    mousedown: e.onMouseDown
                                }
                            }) : e._e(), e._v(" "), e._t("default")], 2)
                        }), [], !1, (function resizable_chat_area_injectStyles(e) {
                            this.$style = Pl.locals || Pl
                        }), null, null).exports,
                        Ol = (0, g.aZ)({
                            name: "ChatContainer",
                            components: {
                                Chat: xl,
                                ResizableChatArea: El
                            },
                            props: {
                                isChatEnabled: {
                                    type: Boolean,
                                    required: !0
                                },
                                isPremium: {
                                    type: Boolean,
                                    required: !0
                                },
                                isResizable: {
                                    type: Boolean,
                                    required: !0
                                },
                                maxHeight: {
                                    type: Function,
                                    required: !0
                                },
                                minHeight: {
                                    type: Number,
                                    required: !0
                                },
                                room: {
                                    type: RoomModel,
                                    required: !0
                                },
                                selectedTab: {
                                    type: String,
                                    required: !0
                                }
                            },
                            emits: ["collapse-chat", "send-chat-message"]
                        }),
                        Al = {
                            component: "chat-container-component",
                            resizable: "chat-container-resizable"
                        };
                    var Tl = (0, ns.Z)(Ol, (function() {
                        var e = this,
                            t = e.$createElement,
                            s = e._self._c || t;
                        return s("resizable-chat-area", {
                            class: e.$style.resizable,
                            attrs: {
                                "min-height": e.minHeight,
                                "max-height": e.maxHeight,
                                "is-resizable": e.isResizable
                            },
                            on: {
                                "resize-min-height": function(t) {
                                    return e.$emit("collapse-chat")
                                }
                            }
                        }, [s("chat", {
                            attrs: {
                                room: e.room,
                                "is-premium": e.isPremium,
                                "is-chat-enabled": e.isChatEnabled
                            },
                            on: {
                                "send-chat-message": function(t) {
                                    return e.$emit("send-chat-message", t)
                                }
                            }
                        })], 1)
                    }), [], !1, (function chat_container_injectStyles(e) {
                        this.$style = Al.locals || Al
                    }), null, null).exports;
                    const Ml = {
                        game: null
                    };

                    function clearChessboardPreview() {
                        const e = getActiveRoom(),
                            t = getActiveBoard();
                        if (!e || !t) return;
                        Object.assign(t.whitePlayer, new PlayerModel(q.White)), Object.assign(t.blackPlayer, new PlayerModel(q.Black)), loadChessboardMode(e, t);
                        const s = getActiveChessboard();
                        s.game.clearMarkings(), s.game.load({
                            moves: isLoadFromExplorerVisible() && getSelectedMove() ? getSelectedMove().tcn : "",
                            fen: (0, O.H)()
                        }), s.game.selectLineEnd(), fe.isGamePreviewActive = !1
                    }

                    function clearGamePreview() {
                        Ml.game && (Ml.game = null, clearChessboardPreview())
                    }

                    function clearUserSearch() {
                        _e.userSearch.isSearchingUser = !1, _e.userSearch.userSearchMessage = "", _e.userSearch.userSearchResults = []
                    }

                    function getArchiveCurrentPage() {
                        return Ke.currentPage
                    }

                    function getArchiveGames() {
                        return Ke.games
                    }

                    function getArchiveTotalPages() {
                        return Ke.totalPages
                    }

                    function getArchiveUsername() {
                        return Ke.username
                    }

                    function getGamePreviewId() {
                        var e, t;
                        return null != (t = null == (e = Ml.game) ? void 0 : e.id) ? t : null
                    }

                    function getOpenings() {
                        var e, t;
                        return (null == (t = null == (e = window.chesscom) ? void 0 : e.classroom) ? void 0 : t.openings) || []
                    }

                    function getSelectedArchiveGames() {
                        return Ke.selectedGames
                    }

                    function getUserSearch() {
                        return _e.userSearch
                    }

                    function isLoadingArchive() {
                        return Ke.isLoading
                    }

                    function isSearchingArchive() {
                        return !Object.keys(Ke.searchParams).every((e => "timeSort" === e || "all" === Ke.searchParams[e] || 0 === Ke.searchParams[e] || "" === Ke.searchParams[e]))
                    }

                    function loadChessboardPreview({
                        pgn: e,
                        whitePlayer: t,
                        blackPlayer: s
                    }) {
                        fe.isGamePreviewActive = !0;
                        const a = getActiveChessboard();
                        a.game.setMode(P);
                        let o = e;
                        try {
                            o = Ne().generatePgn({
                                moves: Ne().pgnToJson(e, 0).moves,
                                hideComments: !0
                            })
                        } catch (r) {}
                        a.game.load({
                            pgn: o
                        }), isLoadFromExplorerVisible() && getSelectedMove() ? a.game.selectNode(0, getSelectedMove().ply - 1) : a.game.selectLineStart();
                        const n = getActiveBoard();
                        n && (t && Object.assign(n.whitePlayer, t), s && Object.assign(n.blackPlayer, s))
                    }

                    function loadGamePreview(e) {
                        var t;
                        const s = null == (t = Ml.game) ? void 0 : t.id;
                        Ml.game = null, e.id !== s ? setTimeout((async () => {
                            loadChessboardPreview(e instanceof GameArchiveModel ? await fetchArchiveGame(e) : e), Ml.game = e
                        })) : clearChessboardPreview()
                    }
                    async function searchUser(e) {
                        if (e.length < 3) return _e.userSearch.userSearchResults = [], void(_e.userSearch.userSearchMessage = (0, V.dW)("Please enter %number% or more characters", {
                            "%number%": 3
                        }));
                        _e.userSearch.isSearchingUser = !0;
                        try {
                            const {
                                data: t
                            } = await Aa.Z.searchUsername(e);
                            _e.userSearch.userSearchResults = t, _e.userSearch.userSearchMessage = ""
                        } catch (t) {
                            _e.userSearch.userSearchMessage = (0, V.dW)("No results found.")
                        }
                        _e.userSearch.isSearchingUser = !1
                    }

                    function selectAllArchiveGames(e) {
                        const t = e ? Ke.games : [];
                        Ke.selectedGames.splice(0, Ke.selectedGames.length, ...t)
                    }

                    function selectArchiveGame(e) {
                        const t = Ke.games.find(e);
                        t && (Ke.selectedGames.includes(t) ? removeFromArray(Ke.selectedGames, t) : Ke.selectedGames.push(t))
                    }

                    function setArchiveSearchParams(e) {
                        Ke.searchParams = e
                    }

                    function setArchiveUsername(e) {
                        Ke.username = e
                    }

                    function toggleBoardsList(e = !Ie.isBoardsListVisible) {
                        Ie.isBoardsListVisible = e
                    }

                    function showAddingBoards() {
                        toggleBoardsList(!0), selectRoomTab(Me.Boards), selectSetupBoardTab(Re.None)
                    }
                    const Rl = 120,
                        Il = 550,
                        jl = 1440,
                        Bl = (0, g.iH)(!1),
                        Ll = /(M{1,2}|D{1,2}|Y{2,4}|.)/g,
                        Dl = {
                            DAY: "day",
                            MONTH: "month",
                            YEAR: "year"
                        },
                        Ul = {
                            YEAR_MONTH_DATE: Vt.Z.trans("Year + Month + Date"),
                            YEAR_MONTH: Vt.Z.trans("Year + Month Only"),
                            YEAR: Vt.Z.trans("Year Only")
                        },
                        zl = 0,
                        ql = 11,
                        Vl = [Vt.Z.trans("January"), Vt.Z.trans("February"), Vt.Z.trans("March"), Vt.Z.trans("April"), Vt.Z.trans("May"), Vt.Z.trans("June"), Vt.Z.trans("July"), Vt.Z.trans("August"), Vt.Z.trans("September"), Vt.Z.trans("October"), Vt.Z.trans("November"), Vt.Z.trans("December")],
                        Nl = "bottom",
                        Zl = [Vt.Z.trans("Sun"), Vt.Z.trans("Mon"), Vt.Z.trans("Tue"), Vt.Z.trans("Wed"), Vt.Z.trans("Thu"), Vt.Z.trans("Fri"), Vt.Z.trans("Sat")],
                        Fl = {
                            CALENDAR: "calendar",
                            FORMAT: "format",
                            MONTH: "month",
                            YEAR: "year"
                        },
                        Gl = {
                            [Ul.YEAR]: Fl.YEAR,
                            [Ul.YEAR_MONTH]: Fl.MONTH,
                            [Ul.YEAR_MONTH_DATE]: Fl.CALENDAR
                        };
                    const addZeros = (e, t) => {
                            const s = e.toString(),
                                a = t - s.length > 0 ? t - s.length : 0;
                            return `${"0".repeat(a)}${s}`
                        },
                        currentDatePieceIsSelected = ({
                            currentDate: e = {},
                            displayDate: t = {},
                            datePiece: s,
                            dateValue: a
                        }) => {
                            const o = null !== a && a === e[s],
                                n = e.year === t.year,
                                r = e.month === t.month;
                            switch (s) {
                                case Dl.YEAR:
                                    return o;
                                case Dl.MONTH:
                                    return o && n;
                                default:
                                    return o && r && n
                            }
                        },
                        valueWithinLimits = ({
                            value: e,
                            limitStart: t,
                            limitEnd: s
                        }) => (isNaN(Number(t)) || !t || Number(e) >= Number(t)) && (isNaN(Number(s)) || !s || Number(e) <= Number(s)),
                        currentDatePieceIsDisabled = ({
                            limits: e = {},
                            datePiece: t,
                            dateValue: s,
                            displayDate: a = {}
                        }) => {
                            const o = e.end || {},
                                n = e.start || {};
                            switch (t) {
                                case Dl.YEAR:
                                    return !valueWithinLimits({
                                        value: s,
                                        limitEnd: o.year,
                                        limitStart: n.year
                                    });
                                case Dl.MONTH:
                                    return !valueWithinLimits({
                                        value: new Date(a.year, s),
                                        limitEnd: new Date(o.year, o.month),
                                        limitStart: new Date(n.year, n.month)
                                    });
                                default:
                                    return !valueWithinLimits({
                                        value: new Date(a.year, a.month, s),
                                        limitEnd: new Date(o.year, o.month, o.day),
                                        limitStart: new Date(n.year, n.month, n.day)
                                    })
                            }
                        },
                        getDateRangeForYear = e => {
                            const t = (e => {
                                    const t = String(e),
                                        s = String(e / 100);
                                    return {
                                        century: Number(t.slice(0, t.indexOf(".") - 1)),
                                        year: Number(s.slice(s.indexOf(".")))
                                    }
                                })(e),
                                s = Math.ceil(100 * t.year / 20),
                                a = 100 * t.century + 20 * s,
                                o = [];
                            for (let n = a - 19; n <= a; n++) o.push(n);
                            return o
                        },
                        formatDate = (e, t) => {
                            const s = (e => {
                                const t = {};
                                return t.D = e.getDate(), t.DD = addZeros(t.D, 2), t.M = e.getMonth() + 1, t.MM = addZeros(t.M, 2), t.YYYY = e.getFullYear(), t.YY = `${t.YYYY}`.slice(-2), t
                            })(e);
                            return t.match(Ll).reduce(((e, t) => e + (s[t] || t)), "")
                        },
                        isValidDate = e => {
                            const t = new Date(e);
                            return !isNaN(t.getTime())
                        };
                    var Wl = {
                            name: "FormDatepickerViewWrapper",
                            components: {
                                IconFont: Vo.Z
                            },
                            props: {
                                headingTitle: {
                                    type: String,
                                    default: ""
                                }
                            },
                            emits: ["click-heading"],
                            methods: {
                                emitHeadingClick() {
                                    this.$emit("click-heading")
                                },
                                emitIconClick(e = "") {
                                    this.$emit(`click-${e}-icon`)
                                }
                            }
                        },
                        Hl = {
                            heading: "form-datepicker-section-wrapper-heading",
                            icon: "form-datepicker-section-wrapper-icon",
                            title: "form-datepicker-section-wrapper-title",
                            "icon-left": "form-datepicker-section-wrapper-icon-left",
                            "icon-right": "form-datepicker-section-wrapper-icon-right"
                        };
                    var Yl = (0, ns.Z)(Wl, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", [s("div", {
                                class: e.$style.heading
                            }, [s("icon-font", {
                                class: [e.$style.icon, e.$style["icon-left"]],
                                attrs: {
                                    name: "chevron-left"
                                },
                                on: {
                                    click: function(t) {
                                        return e.emitIconClick("left")
                                    }
                                }
                            }), e._v(" "), s("span", {
                                class: e.$style.title,
                                domProps: {
                                    textContent: e._s(e.headingTitle)
                                },
                                on: {
                                    click: e.emitHeadingClick
                                }
                            }), e._v(" "), s("icon-font", {
                                class: [e.$style.icon, e.$style["icon-right"]],
                                attrs: {
                                    name: "chevron-right"
                                },
                                on: {
                                    click: function(t) {
                                        return e.emitIconClick("right")
                                    }
                                }
                            })], 1), e._v(" "), s("div", [e._t("default")], 2)])
                        }), [], !1, (function form_datepicker_section_wrapper_injectStyles(e) {
                            this.$style = Hl.locals || Hl
                        }), null, null).exports,
                        Kl = xa.default.extend({
                            components: {
                                DatepickerWrapper: Yl
                            },
                            props: {
                                currentDate: {
                                    type: Object,
                                    required: !0
                                },
                                displayDate: {
                                    type: Object,
                                    required: !0
                                },
                                headingTitle: String,
                                formatType: String,
                                limits: {
                                    type: Object,
                                    default: () => ({})
                                }
                            },
                            data: () => ({
                                currentDatePieceIsDisabled: currentDatePieceIsDisabled,
                                currentDatePieceIsSelected: currentDatePieceIsSelected,
                                datePieceValues: Dl,
                                monthNames: Vl,
                                formatTypes: Ul
                            }),
                            methods: {
                                isDisabled(e, t, s) {
                                    return currentDatePieceIsDisabled({
                                        datePiece: t,
                                        dateValue: e,
                                        displayDate: s,
                                        limits: this.limits
                                    })
                                },
                                isSelected(e, t) {
                                    return currentDatePieceIsSelected({
                                        currentDate: this.currentDate,
                                        displayDate: this.displayDate,
                                        datePiece: t,
                                        dateValue: e
                                    })
                                }
                            }
                        }),
                        Ql = Object.defineProperty,
                        Jl = Object.defineProperties,
                        Xl = Object.getOwnPropertyDescriptors,
                        ec = Object.getOwnPropertySymbols,
                        tc = Object.prototype.hasOwnProperty,
                        sc = Object.prototype.propertyIsEnumerable,
                        form_datepicker_calendarvue_type_script_lang_js_defNormalProp = (e, t, s) => t in e ? Ql(e, t, {
                            enumerable: !0,
                            configurable: !0,
                            writable: !0,
                            value: s
                        }) : e[t] = s,
                        ac = Kl.extend({
                            name: "FormDatepickerCalendar",
                            data: () => ({
                                shortWeekdayLabels: Zl
                            }),
                            computed: {
                                daysInCurrentMonth() {
                                    return ((e, t, s = 36) => {
                                        const a = new Date(e, t),
                                            o = new Date(a.getFullYear(), a.getMonth(), 1).getDay(),
                                            n = new Date(a.getFullYear(), a.getMonth() + 1, 0).getDate();
                                        let r = o > 0 ? new Array(o).fill({
                                            date: null
                                        }) : [];
                                        return r = r.concat(new Array(n).fill({}).map(((e, t) => ({
                                            date: t + 1
                                        })))), s - r.length > 0 && (r = r.concat(new Array(s - r.length).fill({
                                            date: null
                                        }))), r
                                    })(this.displayDate.year, this.displayDate.month)
                                }
                            },
                            methods: {
                                handleDaySelect(e) {
                                    var t;
                                    this.isDisabled(e, this.datePieceValues.DAY, this.displayDate) || this.$emit("day-selected", (t = ((e, t) => {
                                        for (var s in t || (t = {})) tc.call(t, s) && form_datepicker_calendarvue_type_script_lang_js_defNormalProp(e, s, t[s]);
                                        if (ec)
                                            for (var s of ec(t)) sc.call(t, s) && form_datepicker_calendarvue_type_script_lang_js_defNormalProp(e, s, t[s]);
                                        return e
                                    })({}, this.displayDate), Jl(t, Xl({
                                        day: e
                                    }))))
                                }
                            }
                        }),
                        oc = {
                            "calendar-view": "form-datepicker-calendar-calendar-view",
                            grid: "form-datepicker-calendar-grid",
                            day: "form-datepicker-calendar-day",
                            selected: "form-datepicker-calendar-selected",
                            disabled: "form-datepicker-calendar-disabled",
                            empty: "form-datepicker-calendar-empty",
                            weekdays: "form-datepicker-calendar-weekdays"
                        };
                    var nc = (0, ns.Z)(ac, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("datepicker-wrapper", e._g({
                                attrs: {
                                    "heading-title": e.headingTitle
                                }
                            }, e.$listeners), [s("div", {
                                class: e.$style["calendar-view"]
                            }, [s("div", {
                                class: e.$style.weekdays
                            }, e._l(e.shortWeekdayLabels, (function(t) {
                                return s("span", {
                                    key: t,
                                    domProps: {
                                        textContent: e._s(t)
                                    }
                                })
                            })), 0), e._v(" "), s("div", {
                                class: e.$style.grid
                            }, e._l(e.daysInCurrentMonth, (function(t, a) {
                                var o, n, r;
                                return s("span", {
                                    key: a,
                                    class: [e.$style.day, (o = {}, o[e.$style.empty] = !t.date, o), (n = {}, n[e.$style.selected] = e.isSelected(t.date, e.datePieceValues.DAY), n), (r = {}, r[e.$style.disabled] = e.isDisabled(t.date, e.datePieceValues.DAY, e.displayDate), r)],
                                    domProps: {
                                        textContent: e._s(t.date)
                                    },
                                    on: {
                                        click: function(s) {
                                            return e.handleDaySelect(t.date)
                                        }
                                    }
                                })
                            })), 0)])])
                        }), [], !1, (function form_datepicker_calendar_injectStyles(e) {
                            this.$style = oc.locals || oc
                        }), null, null).exports,
                        rc = {
                            name: "FormDatepickerControls",
                            components: {
                                V5Button: ko.V5Button
                            },
                            props: {
                                formatType: String,
                                formatTypes: Object,
                                hideFormatButton: Boolean,
                                limits: {
                                    type: Object,
                                    default: () => ({})
                                }
                            },
                            computed: {
                                yearMonthDateFormat() {
                                    return this.formatType === this.formatTypes.YEAR_MONTH_DATE
                                },
                                isTodayEnabled() {
                                    const e = new Date;
                                    return !currentDatePieceIsDisabled({
                                        limits: this.limits,
                                        datePiece: Dl.DAY,
                                        dateValue: e.getDate(),
                                        displayDate: {
                                            month: e.getMonth(),
                                            year: e.getFullYear()
                                        }
                                    })
                                }
                            },
                            methods: {
                                emitButtonClick(e = "") {
                                    this.$emit(`click-${e}`)
                                }
                            }
                        },
                        ic = {
                            "datepicker-controls": "form-datepicker-controls-datepicker-controls",
                            buttons: "form-datepicker-controls-buttons",
                            button: "form-datepicker-controls-button"
                        };
                    var lc = (0, ns.Z)(rc, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.$style["datepicker-controls"]
                            }, [s("div", {
                                class: e.$style.buttons
                            }, [e.yearMonthDateFormat ? s("v5-button", {
                                class: e.$style.button,
                                attrs: {
                                    "data-cy": "form-datepicker-controls-today",
                                    disabled: !e.isTodayEnabled,
                                    size: "x-small",
                                    theme: "secondary"
                                },
                                domProps: {
                                    textContent: e._s(e.$trans("Today"))
                                },
                                on: {
                                    click: function(t) {
                                        return e.emitButtonClick("today")
                                    }
                                }
                            }) : e._e(), e._v(" "), s("v5-button", {
                                class: e.$style.button,
                                attrs: {
                                    size: "x-small",
                                    theme: "danger"
                                },
                                domProps: {
                                    textContent: e._s(e.$trans("Clear"))
                                },
                                on: {
                                    click: function(t) {
                                        return e.emitButtonClick("clear")
                                    }
                                }
                            }), e._v(" "), e.hideFormatButton ? e._e() : s("v5-button", {
                                class: e.$style.button,
                                attrs: {
                                    size: "x-small",
                                    theme: "basic-light"
                                },
                                domProps: {
                                    textContent: e._s(e.$trans("Format"))
                                },
                                on: {
                                    click: function(t) {
                                        return e.emitButtonClick("format")
                                    }
                                }
                            }), e._v(" "), s("v5-button", {
                                class: e.$style.button,
                                attrs: {
                                    size: "x-small",
                                    theme: "primary"
                                },
                                domProps: {
                                    textContent: e._s(e.$trans("Close"))
                                },
                                on: {
                                    click: function(t) {
                                        return e.emitButtonClick("close")
                                    }
                                }
                            })], 1)])
                        }), [], !1, (function form_datepicker_controls_injectStyles(e) {
                            this.$style = ic.locals || ic
                        }), null, null).exports,
                        cc = Kl.extend({
                            name: "FormDatepickerFormat",
                            methods: {
                                handleFormatSelect(e) {
                                    this.$emit("format-selected", e)
                                }
                            }
                        }),
                        dc = {
                            format: "form-datepicker-format-format",
                            selected: "form-datepicker-format-selected"
                        };
                    var uc = (0, ns.Z)(cc, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("datepicker-wrapper", e._g({
                                attrs: {
                                    "heading-title": e.$trans("Select Date Format")
                                }
                            }, e.$listeners), [s("div", {
                                class: e.$style["month-view"]
                            }, e._l(e.formatTypes, (function(t) {
                                var a;
                                return s("div", {
                                    key: t,
                                    class: [e.$style.format, (a = {}, a[e.$style.selected] = e.formatType === t, a)],
                                    domProps: {
                                        textContent: e._s(t)
                                    },
                                    on: {
                                        click: function(s) {
                                            return e.handleFormatSelect(t)
                                        }
                                    }
                                })
                            })), 0)])
                        }), [], !1, (function form_datepicker_format_injectStyles(e) {
                            this.$style = dc.locals || dc
                        }), null, null).exports,
                        mc = Object.defineProperty,
                        hc = Object.defineProperties,
                        pc = Object.getOwnPropertyDescriptors,
                        bc = Object.getOwnPropertySymbols,
                        gc = Object.prototype.hasOwnProperty,
                        vc = Object.prototype.propertyIsEnumerable,
                        form_datepicker_monthsvue_type_script_lang_js_defNormalProp = (e, t, s) => t in e ? mc(e, t, {
                            enumerable: !0,
                            configurable: !0,
                            writable: !0,
                            value: s
                        }) : e[t] = s,
                        wc = Kl.extend({
                            name: "FormDatepickerMonths",
                            methods: {
                                handleMonthSelect(e) {
                                    var t;
                                    this.isDisabled(e, this.datePieceValues.MONTH, this.displayDate) || this.$emit("month-selected", (t = ((e, t) => {
                                        for (var s in t || (t = {})) gc.call(t, s) && form_datepicker_monthsvue_type_script_lang_js_defNormalProp(e, s, t[s]);
                                        if (bc)
                                            for (var s of bc(t)) vc.call(t, s) && form_datepicker_monthsvue_type_script_lang_js_defNormalProp(e, s, t[s]);
                                        return e
                                    })({}, this.displayDate), hc(t, pc({
                                        month: e
                                    }))))
                                }
                            }
                        }),
                        fc = {
                            "month-view": "form-datepicker-months-month-view",
                            month: "form-datepicker-months-month",
                            selected: "form-datepicker-months-selected",
                            disabled: "form-datepicker-months-disabled",
                            empty: "form-datepicker-months-empty"
                        };
                    var yc = (0, ns.Z)(wc, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("datepicker-wrapper", e._g({
                                attrs: {
                                    "heading-title": e.headingTitle
                                }
                            }, e.$listeners), [s("div", {
                                class: e.$style["month-view"]
                            }, e._l(e.monthNames, (function(t, a) {
                                var o, n;
                                return s("div", {
                                    key: t,
                                    class: [e.$style.month, (o = {}, o[e.$style.selected] = e.isSelected(a, e.datePieceValues.MONTH), o), (n = {}, n[e.$style.disabled] = e.isDisabled(a, e.datePieceValues.MONTH, e.displayDate), n)],
                                    domProps: {
                                        textContent: e._s(t)
                                    },
                                    on: {
                                        click: function(t) {
                                            return e.handleMonthSelect(a)
                                        }
                                    }
                                })
                            })), 0)])
                        }), [], !1, (function form_datepicker_months_injectStyles(e) {
                            this.$style = fc.locals || fc
                        }), null, null).exports,
                        _c = Kl.extend({
                            name: "FormDatepickerYear",
                            computed: {
                                computedHeadingTitle() {
                                    const e = this.displayDateRange[this.displayDateRange.length - 1];
                                    return `${this.displayDateRange[0]} - ${e}`
                                },
                                displayDateRange() {
                                    return getDateRangeForYear(this.displayDate.year)
                                }
                            },
                            methods: {
                                handleYearSelect(e) {
                                    this.isDisabled(e, this.datePieceValues.YEAR, this.displayDate) || this.$emit("year-selected", e)
                                }
                            }
                        }),
                        kc = {
                            "year-view": "form-datepicker-years-year-view",
                            year: "form-datepicker-years-year",
                            selected: "form-datepicker-years-selected",
                            disabled: "form-datepicker-years-disabled",
                            empty: "form-datepicker-years-empty"
                        };
                    var Cc = {
                            name: "FormDatepicker",
                            components: {
                                FormDatepickerCalendar: nc,
                                FormDatepickerMonths: yc,
                                FormDatepickerYears: (0, ns.Z)(_c, (function() {
                                    var e = this,
                                        t = e.$createElement,
                                        s = e._self._c || t;
                                    return s("datepicker-wrapper", e._g({
                                        attrs: {
                                            "heading-title": e.computedHeadingTitle
                                        }
                                    }, e.$listeners), [s("div", {
                                        class: e.$style["year-view"]
                                    }, e._l(e.displayDateRange, (function(t) {
                                        var a, o;
                                        return s("div", {
                                            key: t,
                                            class: [e.$style.year, (a = {}, a[e.$style.selected] = e.isSelected(t, e.datePieceValues.YEAR), a), (o = {}, o[e.$style.disabled] = e.isDisabled(t, e.datePieceValues.YEAR, e.displayDate), o)],
                                            domProps: {
                                                textContent: e._s(t)
                                            },
                                            on: {
                                                click: function(s) {
                                                    return e.handleYearSelect(t)
                                                }
                                            }
                                        })
                                    })), 0)])
                                }), [], !1, (function form_datepicker_years_injectStyles(e) {
                                    this.$style = kc.locals || kc
                                }), null, null).exports,
                                FormDatepickerFormat: uc,
                                FormDatepickerControls: lc
                            },
                            props: {
                                options: {
                                    type: Object,
                                    default: () => ({})
                                },
                                initialValue: {
                                    type: String,
                                    require: !0
                                }
                            },
                            emits: ["input", "day-selected", "close"],
                            data: () => ({
                                currentDate: {
                                    day: null,
                                    month: null,
                                    year: null
                                },
                                currentView: Fl.CALENDAR,
                                displayDate: {
                                    month: null,
                                    year: null
                                },
                                formattedDate: "",
                                formatType: Ul.YEAR_MONTH_DATE,
                                formatTypes: Ul,
                                today: new Date,
                                views: Fl
                            }),
                            computed: {
                                currentMonthName() {
                                    return Vl[this.currentDate.month]
                                },
                                currentDateNativeObject() {
                                    const {
                                        year: e,
                                        month: t,
                                        day: s
                                    } = this.currentDate;
                                    return new Date(e, t, s)
                                },
                                dateStringFormat() {
                                    return this.options.format || "MM/DD/YYYY"
                                },
                                displayMonthName() {
                                    return Vl[this.displayDate.month]
                                }
                            },
                            watch: {
                                currentDate: {
                                    handler() {
                                        this.setFormattedDate()
                                    },
                                    deep: !0
                                }
                            },
                            mounted() {
                                this.readFormatTypeFromInitialValue(), this.setInitialDate()
                            },
                            methods: {
                                changeToNextMonth() {
                                    this.displayDate.month === ql ? (this.setDisplayMonth(zl), this.displayDate.year++) : this.setDisplayMonth(this.displayDate.month + 1)
                                },
                                changeToPreviousMonth() {
                                    this.displayDate.month === zl ? (this.setDisplayMonth(ql), this.displayDate.year--) : this.setDisplayMonth(this.displayDate.month - 1)
                                },
                                changeToNextYear() {
                                    this.displayDate.year++
                                },
                                changeToPreviousYear() {
                                    this.displayDate.year--
                                },
                                closeCalendar() {
                                    this.$emit("close")
                                },
                                clearCalendar() {
                                    this.clearFormattedDate(), this.closeCalendar()
                                },
                                clearFormattedDate() {
                                    this.formattedDate = "", this.$emit("input", this.formattedDate)
                                },
                                handleDaySelect(e) {
                                    this.setCurrentDay(e.day), this.setCurrentMonth(e.month), this.setCurrentYear(e.year), this.$emit("day-selected")
                                },
                                handleMonthSelect(e) {
                                    this.setDisplayMonth(e.month), this.setDisplayYear(e.year), this.formatType === Ul.YEAR_MONTH && (this.setCurrentMonth(e.month), this.setCurrentYear(e.year)), this.handleNextSelectAction(Ul.YEAR_MONTH, this.views.CALENDAR)
                                },
                                handleNextSelectAction(e, t) {
                                    this.formatType === e ? this.setFormattedDate() : this.setCurrentView(t)
                                },
                                handleYearSelect(e) {
                                    this.setDisplayYear(e), this.formatType === Ul.YEAR && this.setCurrentYear(e), this.handleNextSelectAction(Ul.YEAR, this.views.MONTH)
                                },
                                handleFormatSelect(e) {
                                    this.formatType = e, Object.prototype.hasOwnProperty.call(Gl, this.formatType) ? this.setCurrentView(Gl[this.formatType]) : this.setCurrentView(this.views.CALENDAR), this.setFormattedDate()
                                },
                                isCurrentView(e) {
                                    return e === this.currentView
                                },
                                readFormatTypeFromInitialValue() {
                                    this.initialValue && (this.formatType = ((e, t, s) => {
                                        t.match(Ll);
                                        const a = s && e.includes(s) ? ((e, t, s) => e.split("").reduce(((e, a, o) => a === s ? [...e, t[o]] : e), []))(e, t, s) : (e => {
                                                const t = e.split(/\D/),
                                                    s = t.find((e => 4 === e.length));
                                                switch (t.length) {
                                                    case 0:
                                                        return ["Y", "M", "D"];
                                                    case 1:
                                                        return ["M", "D"];
                                                    case 2:
                                                        return [s ? "" : "Y", "D"];
                                                    default:
                                                        return []
                                                }
                                            })(e),
                                            o = -1 === a.indexOf("Y"),
                                            n = -1 === a.indexOf("M"),
                                            r = -1 === a.indexOf("D"),
                                            i = isValidDate(e);
                                        return i && o && !n && !r ? Ul.YEAR : i && o && n && !r ? Ul.YEAR_MONTH : Ul.YEAR_MONTH_DATE
                                    })(this.initialValue, this.dateStringFormat, this.options.replaceWith), Object.prototype.hasOwnProperty.call(Gl, this.formatType) && this.setCurrentView(Gl[this.formatType]))
                                },
                                setCurrentDay(e) {
                                    e && (this.currentDate.day = e)
                                },
                                setCurrentMonth(e) {
                                    this.currentDate.month = e
                                },
                                setCurrentView(e) {
                                    this.currentView = e
                                },
                                setCurrentYear(e) {
                                    this.currentDate.year = e
                                },
                                setDisplayMonth(e) {
                                    this.displayDate.month = e
                                },
                                setDisplayYear(e) {
                                    this.displayDate.year = e
                                },
                                setDateToToday() {
                                    this.setCurrentMonth(this.today.getMonth()), this.setCurrentYear(this.today.getFullYear()), this.setCurrentDay(this.today.getDate()), this.setDisplayYear(this.today.getFullYear()), this.setDisplayMonth(this.today.getMonth()), this.setFormattedDate()
                                },
                                setFormattedDate() {
                                    const {
                                        dateStringFormat: e,
                                        formatType: t
                                    } = this, {
                                        replaceWith: s
                                    } = this.options, a = ((e, t, s = "") => {
                                        const {
                                            YEAR: a,
                                            YEAR_MONTH: o
                                        } = Ul;
                                        switch (t) {
                                            case a:
                                                return e.replace(s ? /[MD]/g : /[^Y]/g, s);
                                            case o:
                                                return e.replace(s ? /D/g : /(\W+D+)|(D+\W+)|(D+)/g, s);
                                            default:
                                                return e
                                        }
                                    })(e, t, s);
                                    this.formattedDate = formatDate(this.currentDateNativeObject, a), this.$emit("input", this.formattedDate), this.options.closeOnSelect && this.closeCalendar()
                                },
                                setInitialDate() {
                                    const e = new Date(this.initialValue);
                                    isValidDate(this.initialValue) ? (this.setCurrentDay(e.getDate()), this.setCurrentMonth(e.getMonth()), this.setCurrentYear(e.getFullYear()), this.setDisplayMonth(e.getMonth()), this.setDisplayYear(e.getFullYear()), this.setFormattedDate()) : this.setDateToToday()
                                }
                            }
                        },
                        Sc = Cc,
                        xc = {
                            calendar: "form-datepicker-calendar",
                            inner: "form-datepicker-inner"
                        };
                    var $c = {
                            components: {
                                FormDatepicker: (0, ns.Z)(Sc, (function() {
                                    var e = this,
                                        t = e.$createElement,
                                        s = e._self._c || t;
                                    return s("div", {
                                        class: e.$style.calendar
                                    }, [s("div", {
                                        class: e.$style.inner
                                    }, [s("form-datepicker-calendar", {
                                        directives: [{
                                            name: "show",
                                            rawName: "v-show",
                                            value: e.isCurrentView(e.views.CALENDAR),
                                            expression: "isCurrentView(views.CALENDAR)"
                                        }],
                                        ref: "calendar-view",
                                        attrs: {
                                            "current-date": e.currentDate,
                                            "display-date": e.displayDate,
                                            "heading-title": e.displayMonthName + " " + e.displayDate.year,
                                            limits: e.options.limits
                                        },
                                        on: {
                                            "click-heading": function(t) {
                                                return e.setCurrentView(e.views.MONTH)
                                            },
                                            "click-left-icon": e.changeToPreviousMonth,
                                            "click-right-icon": e.changeToNextMonth,
                                            "day-selected": e.handleDaySelect
                                        }
                                    }), e._v(" "), s("form-datepicker-format", {
                                        directives: [{
                                            name: "show",
                                            rawName: "v-show",
                                            value: e.isCurrentView(e.views.FORMAT),
                                            expression: "isCurrentView(views.FORMAT)"
                                        }],
                                        ref: "format-view",
                                        attrs: {
                                            "current-date": e.currentDate,
                                            "display-date": e.displayDate,
                                            "format-type": e.formatType
                                        },
                                        on: {
                                            "format-selected": e.handleFormatSelect
                                        }
                                    }), e._v(" "), s("form-datepicker-months", {
                                        directives: [{
                                            name: "show",
                                            rawName: "v-show",
                                            value: e.isCurrentView(e.views.MONTH),
                                            expression: "isCurrentView(views.MONTH)"
                                        }],
                                        ref: "month-view",
                                        attrs: {
                                            "current-date": e.currentDate,
                                            "display-date": e.displayDate,
                                            "heading-title": String(e.displayDate.year),
                                            "format-type": e.formatType,
                                            limits: e.options.limits
                                        },
                                        on: {
                                            "click-heading": function(t) {
                                                return e.setCurrentView(e.views.YEAR)
                                            },
                                            "click-left-icon": e.changeToPreviousYear,
                                            "click-right-icon": e.changeToNextYear,
                                            "month-selected": e.handleMonthSelect
                                        }
                                    }), e._v(" "), s("form-datepicker-years", {
                                        directives: [{
                                            name: "show",
                                            rawName: "v-show",
                                            value: e.isCurrentView(e.views.YEAR),
                                            expression: "isCurrentView(views.YEAR)"
                                        }],
                                        ref: "year-view",
                                        attrs: {
                                            "current-date": e.currentDate,
                                            "display-date": e.displayDate,
                                            "format-type": e.formatType,
                                            limits: e.options.limits
                                        },
                                        on: {
                                            "click-left-icon": function(t) {
                                                return e.setDisplayYear(e.displayDate.year - 20)
                                            },
                                            "click-right-icon": function(t) {
                                                return e.setDisplayYear(e.displayDate.year + 20)
                                            },
                                            "year-selected": e.handleYearSelect,
                                            "view-changed": e.setCurrentView
                                        }
                                    })], 1), e._v(" "), s("form-datepicker-controls", {
                                        attrs: {
                                            "format-type": e.formatType,
                                            "format-types": e.formatTypes,
                                            "hide-format-button": e.options.hideFormatButton,
                                            limits: e.options.limits
                                        },
                                        on: {
                                            "click-clear": e.clearCalendar,
                                            "click-close": e.closeCalendar,
                                            "click-format": function(t) {
                                                return e.setCurrentView(e.views.FORMAT)
                                            },
                                            "click-today": e.setDateToToday
                                        }
                                    })], 1)
                                }), [], !1, (function form_datepicker_injectStyles(e) {
                                    this.$style = xc.locals || xc
                                }), null, null).exports
                            },
                            data: () => ({
                                options: null,
                                initialValue: null,
                                isDatePickerOpen: Bl,
                                position: {
                                    placement: Nl,
                                    left: -4e3,
                                    top: -4e3
                                }
                            }),
                            computed: {
                                hasInitialValue() {
                                    return null !== this.initialValue
                                },
                                style() {
                                    let e = this.position.left;
                                    return window.innerWidth < Il ? {
                                        transform: `translate(-50%, ${this.position.top}px)`
                                    } : (window.innerWidth < jl && (e -= Rl), {
                                        transform: `translate(${e}px, ${this.position.top}px)`
                                    })
                                }
                            },
                            methods: {
                                handleWindowClick(e) {
                                    this.$directiveEl.contains(e.target) || this.$el.contains(e.target) || (this.close(), this.removeClickEventListener())
                                },
                                close() {
                                    this.position = {
                                        placement: Nl,
                                        left: -4e3,
                                        top: -4e3
                                    }, setTimeout((() => {
                                        Bl.value = !1
                                    }))
                                },
                                open(e, t = Nl) {
                                    Bl.value ? this.close() : (Bl.value = !0, this.addClickEventListener(), this.$nextTick((() => {
                                        this.position = (0, go.bt)(e, this.$el, t, 10)
                                    })))
                                },
                                onDateSelect: e => e,
                                handleDaySelect() {
                                    this.close()
                                },
                                handleCloseDatepicker() {
                                    this.removeClickEventListener(), this.close()
                                },
                                addClickEventListener() {
                                    window.addEventListener("click", this.handleWindowClick)
                                },
                                removeClickEventListener() {
                                    window.removeEventListener("click", this.handleWindowClick)
                                }
                            }
                        },
                        Pc = {
                            component: "datepicker-component"
                        };
                    const Ec = lazy_vue({
                            formDatepicker: {
                                component: (0, ns.Z)($c, (function() {
                                    var e = this,
                                        t = e.$createElement,
                                        s = e._self._c || t;
                                    return s("div", {
                                        ref: "datepicker",
                                        class: e.$style.component,
                                        style: e.style,
                                        on: {
                                            click: function(e) {
                                                e.stopPropagation()
                                            }
                                        }
                                    }, [e.hasInitialValue ? s("form-datepicker", {
                                        attrs: {
                                            options: e.options,
                                            "initial-value": e.initialValue
                                        },
                                        on: {
                                            close: e.handleCloseDatepicker,
                                            input: e.onDateSelect
                                        }
                                    }) : e._e()], 1)
                                }), [], !1, (function datepicker_injectStyles(e) {
                                    this.$style = Pc.locals || Pc
                                }), null, null).exports,
                                el: "#form-datepicker"
                            }
                        }),
                        getDirectiveElement = (e, t) => {
                            let s;
                            return Object.prototype.hasOwnProperty.call(t.value, "selector") ? s = t.value.selector : "focus" === t.arg && e.hasChildNodes() && (s = "input"), s ? e.querySelector(s) : e
                        },
                        Oc = [],
                        Ac = [];
                    var Tc = {
                            bind(e, t, s) {
                                Ac.push(t);
                                const a = getDirectiveElement(e, t),
                                    directiveClickListener = () => {
                                        const t = Ac[a.dataset.listenerIndex],
                                            o = Ec.createInstance("formDatepicker");
                                        o.$children[0].$directiveEl = a, o.$children[0].options = t.value, o.$children[0].initialValue = ((e, t, s) => t.value.initialValue ? t.value.initialValue : s.componentInstance ? s.componentInstance.value : e.value ? e.value : "")(e, t, s), o.$children[0].onDateSelect = t.value.onDateSelect, o.$children[0].open(a, t.value.placement)
                                    };
                                a.addEventListener(t.arg, directiveClickListener), a.dataset.listenerIndex = Oc.length, Oc.push(directiveClickListener)
                            },
                            componentUpdated(e, t) {
                                const s = getDirectiveElement(e, t);
                                Ac[s.dataset.listenerIndex].value = t.value
                            },
                            unbind(e, t) {
                                getDirectiveElement(e, t).removeEventListener(t.arg, Oc[e.dataset.listenerIndex])
                            }
                        },
                        Mc = (0, g.aZ)({
                            name: "ArchiveFilter",
                            components: {
                                V5Input: ko.V5Input,
                                V5InputGroup: ko.V5InputGroup,
                                V5Select: ko.V5Select
                            },
                            directives: {
                                datepicker: Tc
                            },
                            props: {
                                openings: {
                                    type: Array,
                                    required: !0
                                },
                                isAdvancedVisible: {
                                    type: Boolean,
                                    default: !1
                                },
                                isOpponentVisible: {
                                    type: Boolean,
                                    default: !0
                                }
                            },
                            emits: [],
                            data() {
                                return {
                                    gameResultOptions: [{
                                        label: this.$trans("Any Result"),
                                        value: ""
                                    }, {
                                        label: this.$trans("Won"),
                                        value: "won"
                                    }, {
                                        label: this.$trans("- Won By timeout"),
                                        value: "win_timeout"
                                    }, {
                                        label: this.$trans("- Won By checkmate"),
                                        value: "win_checkmated"
                                    }, {
                                        label: this.$trans("- Won By resignation"),
                                        value: "win_resigned"
                                    }, {
                                        label: this.$trans("- Won By abandonment"),
                                        value: "win_abandoned"
                                    }, {
                                        label: this.$trans("Lost"),
                                        value: "lost"
                                    }, {
                                        label: this.$trans("- Lost By timeout"),
                                        value: "timeout"
                                    }, {
                                        label: this.$trans("- Lost By checkmate"),
                                        value: "checkmated"
                                    }, {
                                        label: this.$trans("- Lost By resignation"),
                                        value: "resigned"
                                    }, {
                                        label: this.$trans("- Lost By abandonment"),
                                        value: "abandoned"
                                    }, {
                                        label: this.$trans("Draw"),
                                        value: "draw"
                                    }, {
                                        label: this.$trans("- Draw By Agreement"),
                                        value: "agreed"
                                    }, {
                                        label: this.$trans("- Draw By Repetition"),
                                        value: "repetition"
                                    }, {
                                        label: this.$trans("- Draw By Stalemate"),
                                        value: "stalemate"
                                    }, {
                                        label: this.$trans("- Draw By Insufficient Material"),
                                        value: "insufficient"
                                    }, {
                                        label: this.$trans("- Draw By Timeout vs Insufficient Material"),
                                        value: "timevsinsufficient"
                                    }, {
                                        label: this.$trans("- Draw By 50 Move Rule"),
                                        value: "50move"
                                    }],
                                    gameSourceOptions: [{
                                        label: this.$trans("All Recent Games"),
                                        value: "all"
                                    }, {
                                        label: this.$trans("Daily Games"),
                                        value: "daily"
                                    }, {
                                        label: this.$trans("Live Games"),
                                        value: "live"
                                    }],
                                    timeSortOptions: [{
                                        label: this.$trans("Newest"),
                                        value: "desc"
                                    }, {
                                        label: this.$trans("Oldest"),
                                        value: "asc"
                                    }],
                                    opponentTitleOptions: [{
                                        label: this.$trans("Opponent Title"),
                                        value: ""
                                    }, {
                                        label: this.$trans("GM"),
                                        value: "GM"
                                    }, {
                                        label: this.$trans("WGM"),
                                        value: "WGM"
                                    }, {
                                        label: this.$trans("IM"),
                                        value: "IM"
                                    }, {
                                        label: this.$trans("WIM"),
                                        value: "WIM"
                                    }, {
                                        label: this.$trans("FM"),
                                        value: "FM"
                                    }, {
                                        label: this.$trans("WFM"),
                                        value: "WFM"
                                    }, {
                                        label: this.$trans("NM"),
                                        value: "NM"
                                    }, {
                                        label: this.$trans("WNM"),
                                        value: "WNM"
                                    }, {
                                        label: this.$trans("CM"),
                                        value: "CM"
                                    }, {
                                        label: this.$trans("WCM"),
                                        value: "WCM"
                                    }],
                                    ratedOptions: [{
                                        label: this.$trans("Rated + Unrated"),
                                        value: ""
                                    }, {
                                        label: this.$trans("Rated"),
                                        value: "rated"
                                    }, {
                                        label: this.$trans("Unrated"),
                                        value: "unrated"
                                    }],
                                    colorOptions: [{
                                        label: this.$trans("Color"),
                                        value: ""
                                    }, {
                                        label: this.$trans("White"),
                                        value: "white"
                                    }, {
                                        label: this.$trans("Black"),
                                        value: "black"
                                    }],
                                    matchTypeOptions: [{
                                        label: this.$trans("Match Type"),
                                        value: ""
                                    }, {
                                        label: this.$trans("Tournament"),
                                        value: "tournament"
                                    }, {
                                        label: this.$trans("Team Match"),
                                        value: "teammatch"
                                    }],
                                    gameResult: "",
                                    gameSource: "",
                                    opponent: "",
                                    timeSort: "",
                                    opponentTitle: "",
                                    opening: "",
                                    rated: "",
                                    color: "",
                                    matchType: "",
                                    startDate: "",
                                    endDate: "",
                                    ratingMin: "",
                                    ratingMax: ""
                                }
                            },
                            computed: {
                                openingOptions() {
                                    const e = this.openings.map((e => ({
                                        label: e.replace("_", "-"),
                                        value: e
                                    })));
                                    return [{
                                        label: this.$trans("Opening"),
                                        value: ""
                                    }, ...e]
                                }
                            },
                            created() {
                                this.reset()
                            },
                            methods: {
                                getParams() {
                                    return {
                                        color: this.color,
                                        endDate: this.endDate,
                                        location: this.gameSource,
                                        opening: this.opening,
                                        opponent: this.opponent,
                                        opponentTitle: this.opponentTitle,
                                        rated: this.rated,
                                        ratingFrom: Number(this.ratingMin),
                                        ratingTo: Number(this.ratingMax),
                                        result: this.gameResult,
                                        timeSort: this.timeSort,
                                        startDate: this.startDate,
                                        tournamentOrTeam: this.matchType
                                    }
                                },
                                reset() {
                                    this.gameResult = "", this.gameSource = "all", this.opponent = "", this.timeSort = "desc", this.opponentTitle = "", this.opening = "", this.rated = "", this.color = "", this.matchType = "", this.startDate = "", this.endDate = "", this.ratingMin = "", this.ratingMax = ""
                                },
                                getDatepickerOptions: e => ({
                                    onDateSelect: e,
                                    format: "YYYY-MM-DD",
                                    placement: "left"
                                }),
                                onSelectStartDate(e) {
                                    this.startDate = e
                                },
                                onSelectEndDate(e) {
                                    this.endDate = e
                                }
                            }
                        }),
                        Rc = {
                            component: "archive-filter-component",
                            rating: "archive-filter-rating"
                        };
                    var Ic = (0, ns.Z)(Mc, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.$style.component
                            }, [s("v5-select", {
                                attrs: {
                                    options: e.gameResultOptions
                                },
                                model: {
                                    value: e.gameResult,
                                    callback: function(t) {
                                        e.gameResult = t
                                    },
                                    expression: "gameResult"
                                }
                            }), e._v(" "), s("v5-select", {
                                attrs: {
                                    options: e.gameSourceOptions
                                },
                                model: {
                                    value: e.gameSource,
                                    callback: function(t) {
                                        e.gameSource = t
                                    },
                                    expression: "gameSource"
                                }
                            }), e._v(" "), e.isOpponentVisible ? s("v5-input", {
                                attrs: {
                                    placeholder: e.$trans("Opponent")
                                },
                                model: {
                                    value: e.opponent,
                                    callback: function(t) {
                                        e.opponent = t
                                    },
                                    expression: "opponent"
                                }
                            }) : e._e(), e._v(" "), e.isOpponentVisible ? s("v5-select", {
                                attrs: {
                                    options: e.opponentTitleOptions,
                                    "placeholder-text": e.$trans("Opponent Title")
                                },
                                model: {
                                    value: e.opponentTitle,
                                    callback: function(t) {
                                        e.opponentTitle = t
                                    },
                                    expression: "opponentTitle"
                                }
                            }) : e._e(), e._v(" "), e.isAdvancedVisible ? s("v5-select", {
                                attrs: {
                                    options: e.timeSortOptions
                                },
                                model: {
                                    value: e.timeSort,
                                    callback: function(t) {
                                        e.timeSort = t
                                    },
                                    expression: "timeSort"
                                }
                            }) : e._e(), e._v(" "), e.isAdvancedVisible ? s("v5-select", {
                                attrs: {
                                    options: e.openingOptions
                                },
                                model: {
                                    value: e.opening,
                                    callback: function(t) {
                                        e.opening = t
                                    },
                                    expression: "opening"
                                }
                            }) : e._e(), e._v(" "), e.isAdvancedVisible ? s("v5-select", {
                                attrs: {
                                    options: e.ratedOptions
                                },
                                model: {
                                    value: e.rated,
                                    callback: function(t) {
                                        e.rated = t
                                    },
                                    expression: "rated"
                                }
                            }) : e._e(), e._v(" "), e.isAdvancedVisible ? s("v5-select", {
                                attrs: {
                                    options: e.colorOptions
                                },
                                model: {
                                    value: e.color,
                                    callback: function(t) {
                                        e.color = t
                                    },
                                    expression: "color"
                                }
                            }) : e._e(), e._v(" "), e.isAdvancedVisible ? s("v5-input-group", {
                                directives: [{
                                    name: "datepicker",
                                    rawName: "v-datepicker:click",
                                    value: e.getDatepickerOptions(e.onSelectStartDate),
                                    expression: "getDatepickerOptions(onSelectStartDate)",
                                    arg: "click"
                                }],
                                attrs: {
                                    placeholder: e.$trans("Start Date"),
                                    readonly: "",
                                    "icon-right": "calendar"
                                },
                                model: {
                                    value: e.startDate,
                                    callback: function(t) {
                                        e.startDate = t
                                    },
                                    expression: "startDate"
                                }
                            }) : e._e(), e._v(" "), e.isAdvancedVisible ? s("v5-input-group", {
                                directives: [{
                                    name: "datepicker",
                                    rawName: "v-datepicker:click",
                                    value: e.getDatepickerOptions(e.onSelectEndDate),
                                    expression: "getDatepickerOptions(onSelectEndDate)",
                                    arg: "click"
                                }],
                                attrs: {
                                    placeholder: e.$trans("End Date"),
                                    readonly: "",
                                    "icon-right": "calendar"
                                },
                                model: {
                                    value: e.endDate,
                                    callback: function(t) {
                                        e.endDate = t
                                    },
                                    expression: "endDate"
                                }
                            }) : e._e(), e._v(" "), e.isAdvancedVisible ? s("v5-select", {
                                attrs: {
                                    options: e.matchTypeOptions
                                },
                                model: {
                                    value: e.matchType,
                                    callback: function(t) {
                                        e.matchType = t
                                    },
                                    expression: "matchType"
                                }
                            }) : e._e(), e._v(" "), e.isAdvancedVisible ? s("div", {
                                class: e.$style.rating
                            }, [s("v5-input", {
                                attrs: {
                                    type: "number",
                                    placeholder: e.$trans("Rating Min")
                                },
                                model: {
                                    value: e.ratingMin,
                                    callback: function(t) {
                                        e.ratingMin = t
                                    },
                                    expression: "ratingMin"
                                }
                            }), e._v(" "), s("v5-input", {
                                attrs: {
                                    type: "number",
                                    placeholder: e.$trans("Rating Max")
                                },
                                model: {
                                    value: e.ratingMax,
                                    callback: function(t) {
                                        e.ratingMax = t
                                    },
                                    expression: "ratingMax"
                                }
                            })], 1) : e._e()], 1)
                        }), [], !1, (function archive_filter_injectStyles(e) {
                            this.$style = Rc.locals || Rc
                        }), null, null).exports,
                        jc = (0, g.aZ)({
                            name: "ToggleFilterLink",
                            components: {},
                            props: {
                                isVisible: {
                                    type: Boolean,
                                    required: !0
                                },
                                hideLabel: {
                                    type: String,
                                    required: !0
                                },
                                showLabel: {
                                    type: String,
                                    required: !0
                                }
                            },
                            emits: ["click"]
                        }),
                        Bc = {
                            component: "toggle-filter-link-component"
                        };
                    var Lc = (0, ns.Z)(jc, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.$style.component,
                                on: {
                                    click: function(t) {
                                        return e.$emit("click", t)
                                    }
                                }
                            }, [e._v("\n  " + e._s(e.isVisible ? e.hideLabel : e.showLabel) + "\n  "), s("span", {
                                staticClass: "icon-font-chess",
                                class: e.isVisible ? "chevron-up" : "chevron-bottom"
                            })])
                        }), [], !1, (function toggle_filter_link_injectStyles(e) {
                            this.$style = Bc.locals || Bc
                        }), null, null).exports,
                        Dc = s(468),
                        Uc = {
                            name: "LoaderCircle"
                        },
                        zc = {
                            component: "loader-circle-component",
                            dot: "loader-circle-dot",
                            animate: "loader-circle-animate",
                            circle2: "loader-circle-circle2",
                            circle3: "loader-circle-circle3",
                            circle4: "loader-circle-circle4",
                            circle5: "loader-circle-circle5",
                            circle6: "loader-circle-circle6",
                            circle7: "loader-circle-circle7",
                            circle8: "loader-circle-circle8",
                            circle9: "loader-circle-circle9",
                            circle10: "loader-circle-circle10",
                            circle11: "loader-circle-circle11",
                            circle12: "loader-circle-circle12"
                        };
                    var qc = (0, ns.Z)(Uc, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.$style.component
                            }, [s("div", {
                                class: [e.$style.dot, e.$style.circle1]
                            }), e._v(" "), s("div", {
                                class: [e.$style.dot, e.$style.circle2]
                            }), e._v(" "), s("div", {
                                class: [e.$style.dot, e.$style.circle3]
                            }), e._v(" "), s("div", {
                                class: [e.$style.dot, e.$style.circle4]
                            }), e._v(" "), s("div", {
                                class: [e.$style.dot, e.$style.circle5]
                            }), e._v(" "), s("div", {
                                class: [e.$style.dot, e.$style.circle6]
                            }), e._v(" "), s("div", {
                                class: [e.$style.dot, e.$style.circle7]
                            }), e._v(" "), s("div", {
                                class: [e.$style.dot, e.$style.circle8]
                            }), e._v(" "), s("div", {
                                class: [e.$style.dot, e.$style.circle9]
                            }), e._v(" "), s("div", {
                                class: [e.$style.dot, e.$style.circle10]
                            }), e._v(" "), s("div", {
                                class: [e.$style.dot, e.$style.circle11]
                            }), e._v(" "), s("div", {
                                class: [e.$style.dot, e.$style.circle12]
                            })])
                        }), [], !1, (function loader_circle_injectStyles(e) {
                            this.$style = zc.locals || zc
                        }), null, null).exports,
                        Vc = {
                            name: "FormAutocomplete",
                            components: {
                                FormInput: Dc.Z,
                                LoaderCircle: qc
                            },
                            props: {
                                additionalOptions: {
                                    type: Array,
                                    required: !1
                                },
                                ariaLabel: {
                                    type: String,
                                    required: !1
                                },
                                autofocus: {
                                    type: Boolean,
                                    default: !1
                                },
                                disabled: {
                                    type: Boolean
                                },
                                dropdownOptions: {
                                    type: Array,
                                    required: !0
                                },
                                dontClearInput: {
                                    type: Boolean,
                                    default: !1
                                },
                                debounceWait: {
                                    type: Number,
                                    default: 250
                                },
                                exceptionMessage: {
                                    type: String,
                                    required: !1
                                },
                                inputAutocomplete: {
                                    type: String
                                },
                                inputId: {
                                    type: String
                                },
                                inputName: {
                                    type: String
                                },
                                initialInputValue: {
                                    type: String
                                },
                                inputPlaceholder: {
                                    type: String
                                },
                                isDarkMode: {
                                    type: Boolean,
                                    required: !1,
                                    default: !1
                                },
                                lightMode: {
                                    type: Boolean
                                },
                                isSearching: {
                                    type: Boolean,
                                    required: !0,
                                    default: !1
                                },
                                labelKey: {
                                    type: String
                                },
                                leftIcon: {
                                    type: String,
                                    default: "magnifying-glass"
                                },
                                popover: {
                                    type: Boolean,
                                    default: !0
                                },
                                popoverClass: {
                                    type: String
                                },
                                rightIcon: {
                                    type: String,
                                    default: "x"
                                },
                                size: {
                                    type: String
                                },
                                showInitialOptions: {
                                    type: Boolean,
                                    default: !1
                                }
                            },
                            emits: ["clear-input", "selected", "blur", "keyup", "enter"],
                            data() {
                                return {
                                    debounceFunc: w(this.handleInput, this.debounceWait, {
                                        maxWait: 1e3
                                    }),
                                    searchCriteria: "",
                                    selectedOption: {},
                                    isFocused: !1
                                }
                            },
                            computed: {
                                clearIcon() {
                                    return this.disabled || "" === (this.searchCriteria && this.rightIcon) ? "" : this.rightIcon
                                },
                                hasInitialValue() {
                                    return void 0 !== this.initialInputValue && null !== this.initialInputValue
                                },
                                isOpen() {
                                    var e;
                                    return !!(this.showInitialOptions && this.dropdownOptions.length && this.isFocused && this.searchCriteria === (null != (e = this.initialInputValue) ? e : "")) || (this.dontClearInput ? this.searchCriteria !== this.initialInputValue && this.selectedOption[this.labelKey] !== this.searchCriteria && (!this.showInitialOptions || this.isFocused) && this.dropdownOptions.length > 0 || this.exceptionMessage || this.isSearching : this.hasInitialValue ? this.searchCriteria !== this.initialInputValue && this.selectedOption[this.labelKey] !== this.searchCriteria : "" !== this.searchCriteria && this.selectedOption[this.labelKey] !== this.searchCriteria)
                                }
                            },
                            mounted() {
                                this.handleBlur(), this.autofocus && this.focus()
                            },
                            created() {
                                Ha.Z.on(vo.U3.AUTOCOMPLETE_CLEAR_SELECTED, (() => {
                                    this.clearInput()
                                }))
                            },
                            methods: {
                                focus() {
                                    const e = this.$el.querySelector("input");
                                    e && e.focus()
                                },
                                handleInput() {
                                    this.$emit("keyup", this.searchCriteria)
                                },
                                handleBlur() {
                                    if (this.isFocused = !1, this.hasInitialValue && Object.keys(this.selectedOption).length) this.searchCriteria = this.selectedOption[this.labelKey] !== this.initialInputValue ? this.selectedOption[this.labelKey] : this.initialInputValue;
                                    else if (Object.keys(this.selectedOption).length) this.searchCriteria = this.selectedOption[this.labelKey];
                                    else if (this.initialInputValue) this.searchCriteria = this.initialInputValue;
                                    else {
                                        if (this.dontClearInput) return !1;
                                        this.searchCriteria = ""
                                    }
                                    this.$emit("blur")
                                },
                                handleFocus() {
                                    this.isFocused = !0
                                },
                                setSelectedOption(e) {
                                    this.debounceFunc.cancel(), this.selectedOption = e, this.searchCriteria = e[this.labelKey] || "", this.$nextTick((() => {
                                        this.$emit("selected", e)
                                    }))
                                },
                                clearInput() {
                                    this.searchCriteria = "", this.handleInput(), this.setSelectedOption({}), this.$emit("clear-input")
                                },
                                setToInitialValue() {
                                    this.searchCriteria = this.initialInputValue
                                }
                            }
                        },
                        Nc = {
                            component: "form-autocomplete-component",
                            input: "form-autocomplete-input",
                            loader: "form-autocomplete-loader",
                            dropdown: "form-autocomplete-dropdown",
                            popover: "form-autocomplete-popover",
                            "popover-x-large": "form-autocomplete-popover-x-large",
                            item: "form-autocomplete-item",
                            "exception-message": "form-autocomplete-exception-message",
                            icon: "form-autocomplete-icon"
                        };
                    var Zc = (0, ns.Z)(Vc, (function() {
                            var e, t = this,
                                s = t.$createElement,
                                a = t._self._c || s;
                            return a("div", {
                                class: t.$style.component
                            }, [a("form-input", {
                                class: t.$style.input,
                                attrs: {
                                    id: t.inputId,
                                    autocomplete: t.inputAutocomplete,
                                    "aria-label": t.ariaLabel,
                                    disabled: t.disabled,
                                    "icon-left": "none" == t.leftIcon ? "" : t.leftIcon,
                                    "icon-right": t.clearIcon,
                                    "light-mode": t.lightMode,
                                    name: t.inputName,
                                    "is-dark-mode": t.isDarkMode,
                                    placeholder: t.inputPlaceholder,
                                    size: t.size
                                },
                                on: {
                                    enter: function(e) {
                                        return t.$emit("enter", e)
                                    },
                                    focus: t.handleFocus,
                                    blur: t.handleBlur,
                                    input: function(e) {
                                        return t.debounceFunc()
                                    },
                                    "icon-click-right": t.clearInput
                                },
                                model: {
                                    value: t.searchCriteria,
                                    callback: function(e) {
                                        t.searchCriteria = e
                                    },
                                    expression: "searchCriteria"
                                }
                            }), t._v(" "), a("ul", {
                                directives: [{
                                    name: "show",
                                    rawName: "v-show",
                                    value: t.isOpen,
                                    expression: "isOpen"
                                }],
                                class: [t.$style.dropdown, (e = {}, e[t.$style.popover] = t.popover, e[t.$style["popover-x-large"]] = "x-large" === t.size, e[t.popoverClass] = t.popoverClass, e)]
                            }, [t.isSearching ? a("loader-circle", {
                                class: t.$style.loader
                            }) : t._l(t.dropdownOptions, (function(e, s) {
                                return a("li", {
                                    key: s
                                }, [a("div", {
                                    class: t.$style.item,
                                    on: {
                                        mousedown: function(s) {
                                            return t.setSelectedOption(e)
                                        }
                                    }
                                }, [t._t("default", (function() {
                                    return [t._v("\n          " + t._s(e[t.labelKey]) + "\n        ")]
                                }), {
                                    option: e
                                })], 2)])
                            })), t._v(" "), t._l(t.additionalOptions, (function(e, s) {
                                return a("li", {
                                    key: "additionalOption_" + s
                                }, [a("div", {
                                    class: t.$style.item
                                }, [t._t("additionalOption", null, {
                                    additionalOption: e,
                                    searchCriteria: t.searchCriteria,
                                    action: t.setSelectedOption
                                })], 2)])
                            })), t._v(" "), t.exceptionMessage ? a("li", [a("div", {
                                class: t.$style.item
                            }, [a("div", {
                                class: t.$style["exception-message"]
                            }, [t._v("\n          " + t._s(t.exceptionMessage) + "\n        ")])])]) : t._e()], 2)], 1)
                        }), [], !1, (function form_autocomplete_injectStyles(e) {
                            this.$style = Nc.locals || Nc
                        }), null, null).exports,
                        Fc = (0, g.aZ)({
                            name: "UsernameSearchAutocomplete",
                            components: {
                                FormAutocomplete: Zc,
                                UserFlairIcon: Bn
                            },
                            props: {
                                allowEmail: {
                                    type: Boolean,
                                    default: !1
                                },
                                ariaLabel: String,
                                autofocus: {
                                    type: Boolean,
                                    default: !1
                                },
                                disableIcons: {
                                    type: Boolean,
                                    default: !1
                                },
                                dontClearInput: {
                                    type: Boolean,
                                    default: !1
                                },
                                initialInputValue: String,
                                inputAutocomplete: String,
                                inputId: String,
                                inputName: String,
                                lightMode: {
                                    type: Boolean,
                                    default: !1
                                },
                                placeholder: String,
                                popover: {
                                    type: Boolean,
                                    default: !0
                                },
                                popoverClass: String,
                                size: String,
                                isSearching: {
                                    type: Boolean,
                                    default: !1
                                },
                                searchExceptionMessage: {
                                    type: String,
                                    default: ""
                                },
                                showInitialOptions: {
                                    type: Boolean,
                                    default: !1
                                },
                                userSearchResults: {
                                    type: Array,
                                    required: !0
                                },
                                showAvatar: {
                                    type: Boolean,
                                    default: !0
                                }
                            },
                            emits: ["blur", "clear-user", "enter", "search-user", "select-user"],
                            computed: {
                                searchPlaceholder() {
                                    return this.placeholder || this.$trans("Search Members")
                                }
                            },
                            methods: {
                                onSelected(e) {
                                    this.$emit("select-user", {
                                        user: e
                                    })
                                },
                                onKeyUp(e) {
                                    this.$emit("search-user", {
                                        query: e
                                    })
                                }
                            }
                        }),
                        Gc = Fc,
                        Wc = {
                            field: "username-search-autocomplete-field",
                            "invite-option": "username-search-autocomplete-invite-option",
                            avatar: "username-search-autocomplete-avatar",
                            username: "username-search-autocomplete-username"
                        };
                    var Hc = (0, ns.Z)(Gc, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("form-autocomplete", {
                                ref: "input",
                                attrs: {
                                    "label-key": "username",
                                    "aria-label": e.ariaLabel,
                                    autofocus: e.autofocus,
                                    "dropdown-options": e.userSearchResults,
                                    "dont-clear-input": e.dontClearInput,
                                    "exception-message": e.searchExceptionMessage,
                                    "initial-input-value": e.initialInputValue,
                                    "input-autocomplete": e.inputAutocomplete,
                                    "input-id": e.inputId,
                                    "input-name": e.inputName,
                                    "input-placeholder": e.searchPlaceholder,
                                    "is-searching": e.isSearching,
                                    "left-icon": e.disableIcons ? "none" : "magnifying-glass",
                                    "light-mode": e.lightMode,
                                    "popover-class": e.popoverClass,
                                    popover: e.popover,
                                    "show-initial-options": e.showInitialOptions,
                                    size: e.size
                                },
                                on: {
                                    enter: function(t) {
                                        return e.$emit("enter", t)
                                    },
                                    "clear-input": function(t) {
                                        return e.$emit("clear-user", t)
                                    },
                                    blur: function(t) {
                                        return e.$emit("blur", t)
                                    },
                                    keyup: e.onKeyUp,
                                    selected: e.onSelected
                                },
                                scopedSlots: e._u([{
                                    key: "default",
                                    fn: function(t) {
                                        return [s("div", {
                                            class: e.$style.field
                                        }, [e.showAvatar ? s("img", {
                                            class: e.$style.avatar,
                                            attrs: {
                                                alt: t.option.username,
                                                src: t.option.avatar_url,
                                                width: "30",
                                                height: "30"
                                            }
                                        }) : e._e(), e._v(" "), s("span", {
                                            class: e.$style.username,
                                            domProps: {
                                                textContent: e._s(t.option.username)
                                            }
                                        }), e._v(" "), t.option.flair_code ? s("user-flair-icon", {
                                            attrs: {
                                                code: t.option.flair_code,
                                                membership: t.option.membership_level
                                            }
                                        }) : e._e()], 1)]
                                    }
                                }])
                            })
                        }), [], !1, (function username_search_autocomplete_injectStyles(e) {
                            this.$style = Wc.locals || Wc
                        }), null, null).exports,
                        Yc = (0, g.aZ)({
                            name: "UsernameSearchInput",
                            components: {
                                UsernameSearchAutocomplete: Hc
                            },
                            props: {
                                showAvatar: {
                                    type: Boolean,
                                    default: !0
                                },
                                placeholder: {
                                    type: String,
                                    required: !0
                                },
                                userSearch: {
                                    type: Object,
                                    required: !0
                                },
                                username: {
                                    type: String,
                                    required: !1
                                }
                            },
                            emits: ["blur", "search-user", "clear-user", "enter-user", "select-user"]
                        }),
                        Kc = {
                            input: "username-search-input-input"
                        };
                    var Qc = (0, ns.Z)(Yc, (function() {
                            var e = this,
                                t = e.$createElement;
                            return (e._self._c || t)("username-search-autocomplete", {
                                class: e.$style.input,
                                attrs: {
                                    "input-id": "username-search-input",
                                    "input-name": "username-search-input",
                                    "input-autocomplete": "off",
                                    "show-initial-options": "",
                                    "dont-clear-input": "",
                                    placeholder: e.placeholder,
                                    "is-searching": e.userSearch.isSearchingUser,
                                    "user-search-results": e.userSearch.userSearchResults,
                                    "search-exception-message": e.userSearch.userSearchMessage,
                                    autofocus: !1,
                                    "initial-input-value": e.username,
                                    "show-avatar": e.showAvatar
                                },
                                on: {
                                    blur: function(t) {
                                        return e.$emit("blur", t)
                                    },
                                    enter: function(t) {
                                        return e.$emit("enter-user", t)
                                    },
                                    "clear-user": function(t) {
                                        return e.$emit("clear-user", t)
                                    },
                                    "search-user": function(t) {
                                        return e.$emit("search-user", t)
                                    },
                                    "select-user": function(t) {
                                        return e.$emit("select-user", t)
                                    }
                                }
                            })
                        }), [], !1, (function username_search_input_injectStyles(e) {
                            this.$style = Kc.locals || Kc
                        }), null, null).exports,
                        Jc = (0, g.aZ)({
                            name: "ArchiveSearchForm",
                            components: {
                                UsernameSearchInput: Qc,
                                V5Button: ko.V5Button,
                                ArchiveFilter: Ic,
                                ToggleFilterLink: Lc
                            },
                            props: {
                                openings: {
                                    type: Array,
                                    required: !0
                                },
                                userSearch: {
                                    type: Object,
                                    required: !0
                                }
                            },
                            emits: ["load-archive-games", "search-user", "clear-user", "enter-user", "select-user"],
                            data: () => ({
                                isAdvancedVisible: !1
                            }),
                            mounted() {
                                this.onClickReset()
                            },
                            methods: {
                                onClickSearch() {
                                    this.$emit("load-archive-games", {
                                        params: this.$refs.archiveFilter.getParams()
                                    })
                                },
                                onClickReset() {
                                    this.$refs.archiveFilter.reset()
                                },
                                toggleAdvancedOptions() {
                                    this.isAdvancedVisible = !this.isAdvancedVisible
                                }
                            }
                        }),
                        Xc = {
                            component: "archive-search-form-component",
                            username: "archive-search-form-username",
                            buttons: "archive-search-form-buttons",
                            button: "archive-search-form-button"
                        };
                    var ed = (0, ns.Z)(Jc, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.$style.component
                            }, [s("username-search-input", {
                                class: e.$style.username,
                                attrs: {
                                    placeholder: e.$trans("Search Username"),
                                    "user-search": e.userSearch
                                },
                                on: {
                                    enter: function(t) {
                                        return e.$emit("enter-user", t)
                                    },
                                    "clear-user": function(t) {
                                        return e.$emit("clear-user", t)
                                    },
                                    "search-user": function(t) {
                                        return e.$emit("search-user", t)
                                    },
                                    "select-user": function(t) {
                                        return e.$emit("select-user", t)
                                    }
                                }
                            }), e._v(" "), s("archive-filter", {
                                ref: "archiveFilter",
                                attrs: {
                                    openings: e.openings,
                                    "is-advanced-visible": e.isAdvancedVisible
                                }
                            }), e._v(" "), s("div", {
                                class: e.$style.buttons
                            }, [s("toggle-filter-link", {
                                attrs: {
                                    "is-visible": e.isAdvancedVisible,
                                    "hide-label": e.$trans("Hide"),
                                    "show-label": e.$trans("Advanced")
                                },
                                on: {
                                    click: e.toggleAdvancedOptions
                                }
                            }), e._v(" "), s("v5-button", {
                                class: e.$style.button,
                                attrs: {
                                    size: "x-small",
                                    theme: "primary"
                                },
                                domProps: {
                                    textContent: e._s(e.$trans("Search"))
                                },
                                on: {
                                    click: e.onClickSearch
                                }
                            }), e._v(" "), s("v5-button", {
                                class: e.$style.button,
                                attrs: {
                                    size: "x-small"
                                },
                                domProps: {
                                    textContent: e._s(e.$trans("Reset"))
                                },
                                on: {
                                    click: e.onClickReset
                                }
                            })], 1)], 1)
                        }), [], !1, (function archive_search_form_injectStyles(e) {
                            this.$style = Xc.locals || Xc
                        }), null, null).exports,
                        td = (0, g.aZ)({
                            name: "Checkbox",
                            props: {
                                id: {
                                    type: String,
                                    required: !0
                                },
                                value: {
                                    type: Boolean,
                                    default: !1
                                },
                                disabled: {
                                    type: Boolean,
                                    default: !1
                                }
                            },
                            emits: ["input"],
                            methods: {
                                onChange(e) {
                                    this.$emit("input", e)
                                }
                            }
                        }),
                        sd = {
                            component: "checkbox-component",
                            input: "checkbox-input",
                            label: "checkbox-label"
                        };
                    var ad = (0, ns.Z)(td, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.$style.component,
                                on: {
                                    click: function(e) {
                                        e.stopPropagation()
                                    }
                                }
                            }, [s("input", {
                                class: e.$style.input,
                                attrs: {
                                    id: e.id,
                                    type: "checkbox",
                                    disabled: e.disabled,
                                    name: e.id
                                },
                                domProps: {
                                    checked: e.value
                                },
                                on: {
                                    change: function(t) {
                                        return e.onChange(t.target.checked)
                                    }
                                }
                            }), e._v(" "), s("label", {
                                class: e.$style.label,
                                attrs: {
                                    for: e.id
                                }
                            })])
                        }), [], !1, (function checkbox_injectStyles(e) {
                            this.$style = sd.locals || sd
                        }), null, null).exports,
                        od = (0, g.aZ)({
                            name: "CaretIcon",
                            props: {
                                flip: {
                                    type: Boolean,
                                    default: !1
                                },
                                small: {
                                    type: Boolean,
                                    default: !1
                                }
                            },
                            emits: ["click"],
                            computed: {
                                componentClasses() {
                                    const e = [this.$style.component, this.flip ? "caret-up" : "caret-down"];
                                    return this.small && e.push(this.$style.small), e
                                }
                            }
                        }),
                        nd = od,
                        rd = {
                            component: "caret-icon-component",
                            small: "caret-icon-small"
                        };
                    var id = (0, ns.Z)(nd, (function() {
                            var e = this,
                                t = e.$createElement;
                            return (e._self._c || t)("span", {
                                staticClass: "icon-font-chess",
                                class: e.componentClasses,
                                on: {
                                    click: function(t) {
                                        return e.$emit("click", t)
                                    }
                                }
                            })
                        }), [], !1, (function caret_icon_injectStyles(e) {
                            this.$style = rd.locals || rd
                        }), null, null).exports,
                        ld = (0, g.aZ)({
                            name: "GameItem",
                            components: {
                                UserTagline: zn,
                                Checkbox: ad,
                                CaretIcon: id
                            },
                            props: {
                                blackName: {
                                    type: String,
                                    required: !0
                                },
                                blackRating: {
                                    type: Number,
                                    required: !1
                                },
                                blackTitle: {
                                    type: String,
                                    required: !1
                                },
                                gameId: {
                                    type: [String, Number],
                                    required: !0
                                },
                                hasLost: {
                                    type: Boolean,
                                    default: !1
                                },
                                hasWon: {
                                    type: Boolean,
                                    default: !1
                                },
                                icon: {
                                    type: String,
                                    required: !1
                                },
                                isExpanded: {
                                    type: Boolean,
                                    default: !1
                                },
                                isSelected: {
                                    type: Boolean,
                                    required: !0
                                },
                                result: {
                                    type: String,
                                    required: !0
                                },
                                time: {
                                    type: [String, Number],
                                    required: !0
                                },
                                whiteName: {
                                    type: String,
                                    required: !0
                                },
                                whiteRating: {
                                    type: Number,
                                    required: !1
                                },
                                whiteTitle: {
                                    type: String,
                                    required: !1
                                }
                            },
                            emits: ["expand-game", "select-game"],
                            computed: {
                                componentClasses() {
                                    return {
                                        [this.$style.component]: !0,
                                        [this.$style.won]: this.hasWon,
                                        [this.$style.lost]: this.hasLost
                                    }
                                }
                            },
                            methods: {
                                onSelectGame() {
                                    this.$emit("select-game", {
                                        gameId: this.gameId
                                    })
                                },
                                onClickExpand() {
                                    this.$emit("expand-game", {
                                        gameId: this.gameId
                                    })
                                }
                            }
                        }),
                        cd = {
                            component: "game-item-component",
                            player: "game-item-player",
                            rating: "game-item-rating",
                            type: "game-item-type",
                            result: "game-item-result",
                            time: "game-item-time",
                            expand: "game-item-expand",
                            won: "game-item-won",
                            lost: "game-item-lost"
                        };
                    var dd = (0, ns.Z)(ld, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.componentClasses,
                                on: {
                                    click: e.onClickExpand
                                }
                            }, [e.icon ? s("div", {
                                staticClass: "icon-font-chess icon-colored",
                                class: [e.$style.type, e.icon]
                            }) : e._e(), e._v(" "), s("user-tagline", {
                                class: e.$style.player,
                                attrs: {
                                    "username-theme": "blue-with-dark-mode",
                                    title: e.whiteTitle,
                                    username: e.whiteName
                                }
                            }), e._v(" "), s("span", {
                                class: e.$style.rating,
                                domProps: {
                                    textContent: e._s(e.whiteRating ? "(" + e.whiteRating + ")" : "--")
                                }
                            }), e._v(" "), s("user-tagline", {
                                class: e.$style.player,
                                attrs: {
                                    "username-theme": "blue-with-dark-mode",
                                    title: e.blackTitle,
                                    username: e.blackName
                                }
                            }), e._v(" "), s("span", {
                                class: e.$style.rating,
                                domProps: {
                                    textContent: e._s(e.blackRating ? "(" + e.blackRating + ")" : "--")
                                }
                            }), e._v(" "), s("div", {
                                class: e.$style.expand
                            }, [s("caret-icon", {
                                attrs: {
                                    small: "",
                                    flip: e.isExpanded
                                }
                            })], 1), e._v(" "), s("div", {
                                class: e.$style.result,
                                domProps: {
                                    textContent: e._s(e.result)
                                }
                            }), e._v(" "), s("div", {
                                class: e.$style.time,
                                domProps: {
                                    textContent: e._s(e.time)
                                }
                            }), e._v(" "), s("checkbox", {
                                attrs: {
                                    id: "toggle-game-" + e.gameId,
                                    value: e.isSelected
                                },
                                on: {
                                    input: e.onSelectGame
                                }
                            })], 1)
                        }), [], !1, (function game_item_injectStyles(e) {
                            this.$style = cd.locals || cd
                        }), null, null).exports,
                        ud = (0, g.aZ)({
                            name: "GamePreview",
                            props: {
                                boardId: {
                                    type: String,
                                    required: !0
                                }
                            }
                        }),
                        md = {
                            preview: "game-preview-preview"
                        };
                    var hd = (0, ns.Z)(ud, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.$style.preview
                            }, [s("horizontal-move-list", {
                                attrs: {
                                    "board-id": e.boardId
                                }
                            })], 1)
                        }), [], !1, (function setup_game_preview_injectStyles(e) {
                            this.$style = md.locals || md
                        }), null, null).exports,
                        pd = {
                            name: "Spinner",
                            props: {
                                forceTheme: {
                                    type: String,
                                    default: ""
                                },
                                size: {
                                    default: "",
                                    type: String
                                }
                            }
                        },
                        bd = {
                            component: "spinner-ring-component",
                            spin: "spinner-ring-spin",
                            light: "spinner-ring-light",
                            dark: "spinner-ring-dark",
                            small: "spinner-ring-small",
                            large: "spinner-ring-large"
                        };
                    var gd = (0, ns.Z)(pd, (function() {
                            var e, t = this,
                                s = t.$createElement;
                            return (t._self._c || s)("div", {
                                class: [t.$style.component, t.$style[t.size], (e = {}, e[t.$style.dark] = "dark" == t.forceTheme, e[t.$style.light] = "light" == t.forceTheme, e)]
                            })
                        }), [], !1, (function spinner_ring_injectStyles(e) {
                            this.$style = bd.locals || bd
                        }), null, null).exports,
                        vd = (0, g.aZ)({
                            name: "ListWithHeader",
                            components: {
                                CaretIcon: id,
                                Checkbox: ad,
                                SpinnerRing: gd
                            },
                            props: {
                                currentSort: {
                                    type: String,
                                    required: !1
                                },
                                emptyText: {
                                    type: String,
                                    required: !1
                                },
                                headerColumns: {
                                    type: Array,
                                    required: !0
                                },
                                isLoading: {
                                    type: Boolean,
                                    required: !0
                                },
                                scrollAnchorId: {
                                    type: String,
                                    required: !0
                                }
                            },
                            emits: ["select-all", "sort-list"],
                            methods: {
                                onSelectAll(e) {
                                    this.$emit("select-all", {
                                        isSelected: e
                                    })
                                },
                                onClickSort(e) {
                                    this.$emit("sort-list", {
                                        column: e
                                    })
                                }
                            }
                        }),
                        wd = {
                            component: "list-with-header-component",
                            scroll: "list-with-header-scroll",
                            header: "list-with-header-header",
                            column: "list-with-header-column",
                            sort: "list-with-header-sort",
                            checkbox: "list-with-header-checkbox",
                            loading: "list-with-header-loading",
                            spinner: "list-with-header-spinner",
                            empty: "list-with-header-empty"
                        };
                    var fd = (0, ns.Z)(vd, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.$style.component
                            }, [s("div", {
                                class: e.$style.header
                            }, [e._l(e.headerColumns, (function(t, a) {
                                return s("div", {
                                    key: a,
                                    class: [e.$style.column, t.className]
                                }, [e._v("\n      " + e._s(t.label) + "\n      "), t.sort ? s("caret-icon", {
                                    class: e.$style.sort,
                                    attrs: {
                                        small: "",
                                        flip: t.sort === e.currentSort
                                    },
                                    on: {
                                        click: function(s) {
                                            return e.onClickSort(t.sort)
                                        }
                                    }
                                }) : e._e()], 1)
                            })), e._v(" "), s("checkbox", {
                                class: e.$style.checkbox,
                                attrs: {
                                    id: "toggle-all",
                                    value: !1
                                },
                                on: {
                                    input: e.onSelectAll
                                }
                            })], 2), e._v(" "), s("div", {
                                class: e.$style.scroll
                            }, [s("div", {
                                attrs: {
                                    id: e.scrollAnchorId
                                }
                            }), e._v(" "), e.isLoading ? s("div", {
                                class: e.$style.loading
                            }, [s("spinner-ring", {
                                class: e.$style.spinner,
                                attrs: {
                                    "force-theme": "light"
                                }
                            })], 1) : e.emptyText ? s("div", {
                                class: e.$style.empty,
                                domProps: {
                                    textContent: e._s(e.emptyText)
                                }
                            }) : [e._t("default")]], 2)])
                        }), [], !1, (function list_with_header_injectStyles(e) {
                            this.$style = wd.locals || wd
                        }), null, null).exports,
                        yd = (0, g.aZ)({
                            name: "ArchiveGames",
                            components: {
                                GameItem: dd,
                                GamePreview: hd,
                                ListWithHeader: fd
                            },
                            props: {
                                boardId: {
                                    type: String,
                                    required: !0
                                },
                                currentUsername: {
                                    type: String,
                                    required: !0
                                },
                                games: {
                                    type: Array,
                                    required: !0
                                },
                                isLoading: {
                                    type: Boolean,
                                    required: !0
                                },
                                isSearching: {
                                    type: Boolean,
                                    required: !0
                                },
                                previewGameId: {
                                    type: Number,
                                    required: !1
                                },
                                selectedGames: {
                                    type: Array,
                                    required: !0
                                },
                                username: {
                                    type: String,
                                    required: !1
                                }
                            },
                            emits: ["select-game", "expand-game", "select-all-games"],
                            computed: {
                                emptyText() {
                                    return this.games.length ? "" : this.isSearching ? this.$trans("No Games found.") : this.$trans("You have not created any Games yet.")
                                },
                                headerColumns() {
                                    return [{
                                        label: "",
                                        className: this.$style["header-type"]
                                    }, {
                                        label: this.$trans("Player"),
                                        className: this.$style["header-player"]
                                    }, {
                                        label: this.$trans("Rating"),
                                        className: this.$style["header-rating"]
                                    }, {
                                        label: this.$trans("Player"),
                                        className: this.$style["header-player"]
                                    }, {
                                        label: this.$trans("Rating"),
                                        className: this.$style["header-rating"]
                                    }, {
                                        label: "",
                                        className: this.$style["header-expand"]
                                    }, {
                                        label: this.$trans("Result"),
                                        className: this.$style["header-result"]
                                    }, {
                                        label: this.$trans("Time"),
                                        className: this.$style["header-time"]
                                    }]
                                }
                            },
                            methods: {
                                isSelected(e) {
                                    return this.selectedGames.some((t => t.id === e))
                                }
                            }
                        }),
                        _d = {
                            "header-type": "archive-games-header-type",
                            "header-player": "archive-games-header-player",
                            "header-rating": "archive-games-header-rating",
                            "header-expand": "archive-games-header-expand",
                            "header-result": "archive-games-header-result",
                            "header-time": "archive-games-header-time"
                        };
                    var kd = (0, ns.Z)(yd, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("list-with-header", {
                                attrs: {
                                    "scroll-anchor-id": "archive-scroll-anchor",
                                    "is-loading": e.isLoading,
                                    "empty-text": e.emptyText,
                                    "header-columns": e.headerColumns
                                },
                                on: {
                                    "select-all": function(t) {
                                        return e.$emit("select-all-games", t)
                                    }
                                }
                            }, [e._l(e.games, (function(t) {
                                return [s("game-item", {
                                    key: t.id,
                                    attrs: {
                                        "black-name": t.user2.username,
                                        "black-rating": t.user2Rating,
                                        "black-title": t.user2.title,
                                        "game-id": t.id,
                                        "has-lost": t.hasLost(e.username || e.currentUsername),
                                        "has-won": t.hasWon(e.username || e.currentUsername),
                                        icon: t.getTimeControlIcon(),
                                        "is-expanded": t.id === e.previewGameId,
                                        "is-selected": e.isSelected(t.id),
                                        result: t.getResultLabel(),
                                        time: t.getTimeControlLabel(),
                                        "white-name": t.user1.username,
                                        "white-rating": t.user1Rating,
                                        "white-title": t.user1.title
                                    },
                                    on: {
                                        "expand-game": function(t) {
                                            return e.$emit("expand-game", t)
                                        },
                                        "select-game": function(t) {
                                            return e.$emit("select-game", t)
                                        }
                                    }
                                }), e._v(" "), t.id === e.previewGameId ? s("game-preview", {
                                    key: "preview-" + t.id,
                                    attrs: {
                                        "board-id": e.boardId
                                    }
                                }) : e._e()]
                            }))], 2)
                        }), [], !1, (function archive_games_injectStyles(e) {
                            this.$style = _d.locals || _d
                        }), null, null).exports,
                        Cd = (0, g.aZ)({
                            name: "AddGamesButton",
                            components: {
                                V5Button: ko.V5Button
                            },
                            props: {
                                selectedGamesCount: {
                                    type: Number,
                                    required: !0
                                }
                            },
                            emits: ["click"],
                            computed: {
                                addGamesButtonText() {
                                    return this.$transChoice("{0} Add 0 Games| {1} Add 1 Game|]1,Inf] Add %games% Games", this.selectedGamesCount, {
                                        "%games%": this.selectedGamesCount
                                    })
                                }
                            }
                        }),
                        Sd = {
                            button: "add-games-button-button"
                        };
                    var xd = (0, ns.Z)(Cd, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return e.selectedGamesCount > 0 ? s("v5-button", {
                                class: e.$style.button,
                                attrs: {
                                    theme: "primary",
                                    disabled: e.selectedGamesCount > 100
                                },
                                domProps: {
                                    textContent: e._s(e.addGamesButtonText)
                                },
                                on: {
                                    click: function(t) {
                                        return e.$emit("click", t)
                                    }
                                }
                            }) : e._e()
                        }), [], !1, (function add_games_button_injectStyles(e) {
                            this.$style = Sd.locals || Sd
                        }), null, null).exports,
                        $d = s(8848),
                        Pd = (0, g.aZ)({
                            name: "LoadFromArchive",
                            components: {
                                Pagination: $d.Z,
                                AddGamesButton: xd
                            },
                            props: {
                                scrollTo: {
                                    type: String,
                                    required: !0
                                },
                                currentPage: {
                                    type: Number,
                                    required: !0
                                },
                                totalPages: {
                                    type: Number,
                                    required: !0
                                },
                                selectedGamesCount: {
                                    type: Number,
                                    required: !0
                                }
                            },
                            emits: ["change-page", "load-selected-games"],
                            methods: {
                                onChangePage(e) {
                                    this.$emit("change-page", {
                                        page: e
                                    })
                                }
                            }
                        }),
                        Ed = {
                            pagination: "add-games-footer-pagination",
                            footer: "add-games-footer-footer"
                        };
                    var Od = (0, ns.Z)(Pd, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.$style.footer
                            }, [e.totalPages > 1 ? s("pagination", {
                                class: e.$style.pagination,
                                attrs: {
                                    "change-page": e.onChangePage,
                                    "current-page": e.currentPage,
                                    "show-first-last-buttons": !1,
                                    "show-top-button": !0,
                                    "total-pages": e.totalPages,
                                    "scroll-to": e.scrollTo
                                }
                            }) : e._e(), e._v(" "), e.selectedGamesCount > 0 ? s("add-games-button", {
                                attrs: {
                                    "selected-games-count": e.selectedGamesCount
                                },
                                on: {
                                    click: function(t) {
                                        return e.$emit("load-selected-games", t)
                                    }
                                }
                            }) : e._e()], 1)
                        }), [], !1, (function add_games_footer_injectStyles(e) {
                            this.$style = Ed.locals || Ed
                        }), null, null).exports,
                        Ad = (0, g.aZ)({
                            name: "LoadFromArchive",
                            components: {
                                AddGamesFooter: Od,
                                ArchiveSearchForm: ed,
                                ArchiveGames: kd
                            },
                            props: {
                                boardId: {
                                    type: String,
                                    required: !0
                                },
                                currentPage: {
                                    type: Number,
                                    required: !0
                                },
                                currentUsername: {
                                    type: String,
                                    required: !0
                                },
                                games: {
                                    type: Array,
                                    required: !0
                                },
                                isLoading: {
                                    type: Boolean,
                                    required: !0
                                },
                                isSearching: {
                                    type: Boolean,
                                    required: !0
                                },
                                members: {
                                    type: Array,
                                    required: !0
                                },
                                openings: {
                                    type: Array,
                                    required: !0
                                },
                                previewGameId: {
                                    type: Number,
                                    required: !1
                                },
                                selectedGames: {
                                    type: Array,
                                    required: !0
                                },
                                totalPages: {
                                    type: Number,
                                    required: !0
                                },
                                username: {
                                    type: String,
                                    required: !0
                                },
                                userSearch: {
                                    type: Object,
                                    required: !0
                                }
                            },
                            emits: ["change-page", "clear-user", "enter-user", "load-archive-games", "load-selected-games", "search-user", "select-game", "expand-game", "select-user", "select-all-games"],
                            methods: {
                                loadArchiveGames() {
                                    this.$emit("load-archive-games")
                                }
                            }
                        }),
                        Td = {
                            component: "load-from-archive-component"
                        };
                    var Md = (0, ns.Z)(Ad, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.$style.component
                            }, [s("archive-search-form", {
                                attrs: {
                                    "user-search": e.userSearch,
                                    openings: e.openings
                                },
                                on: {
                                    enter: function(t) {
                                        return e.$emit("enter-user", t)
                                    },
                                    "clear-user": function(t) {
                                        return e.$emit("clear-user", t)
                                    },
                                    "search-user": function(t) {
                                        return e.$emit("search-user", t)
                                    },
                                    "select-user": function(t) {
                                        return e.$emit("select-user", t)
                                    },
                                    "load-archive-games": function(t) {
                                        return e.$emit("load-archive-games", t)
                                    }
                                }
                            }), e._v(" "), s("archive-games", {
                                attrs: {
                                    "board-id": e.boardId,
                                    "current-username": e.currentUsername,
                                    games: e.games,
                                    "is-loading": e.isLoading,
                                    "is-searching": e.isSearching,
                                    "preview-game-id": e.previewGameId,
                                    "selected-games": e.selectedGames,
                                    username: e.username
                                },
                                on: {
                                    "expand-game": function(t) {
                                        return e.$emit("expand-game", t)
                                    },
                                    "select-all-games": function(t) {
                                        return e.$emit("select-all-games", t)
                                    },
                                    "select-game": function(t) {
                                        return e.$emit("select-game", t)
                                    }
                                }
                            }), e._v(" "), s("add-games-footer", {
                                attrs: {
                                    "scroll-to": "archive-scroll-anchor",
                                    "total-pages": e.totalPages,
                                    "current-page": e.currentPage,
                                    "selected-games-count": e.selectedGames.length
                                },
                                on: {
                                    "change-page": function(t) {
                                        return e.$emit("change-page", t)
                                    },
                                    "load-selected-games": function(t) {
                                        return e.$emit("load-selected-games", t)
                                    }
                                }
                            })], 1)
                        }), [], !1, (function load_from_archive_injectStyles(e) {
                            this.$style = Td.locals || Td
                        }), null, null).exports,
                        Rd = Object.defineProperty,
                        Id = Object.defineProperties,
                        jd = Object.getOwnPropertyDescriptors,
                        Bd = Object.getOwnPropertySymbols,
                        Ld = Object.prototype.hasOwnProperty,
                        Dd = Object.prototype.propertyIsEnumerable,
                        load_from_archivevue_type_script_lang_ts_defNormalProp = (e, t, s) => t in e ? Rd(e, t, {
                            enumerable: !0,
                            configurable: !0,
                            writable: !0,
                            value: s
                        }) : e[t] = s,
                        Ud = (0, g.aZ)({
                            name: "LoadFromArchiveController",
                            components: {
                                LoadFromArchive: Md
                            },
                            computed: {
                                boardId: () => getActiveChessboardElementId(),
                                previewGameId: () => getGamePreviewId(),
                                activeRoom: () => getActiveRoom(),
                                archiveGames: () => getArchiveGames(),
                                archiveUsername: () => getArchiveUsername(),
                                currentUsername: () => getCurrentUser().username,
                                isLoadingArchive: () => isLoadingArchive(),
                                isSearchingArchive: () => isSearchingArchive(),
                                archiveCurrentPage: () => getArchiveCurrentPage(),
                                archiveTotalPages: () => getArchiveTotalPages(),
                                openings: () => getOpenings(),
                                selectedGames: () => getSelectedArchiveGames(),
                                userSearch() {
                                    const e = getUserSearch();
                                    return this.archiveUsername ? e : (t = ((e, t) => {
                                        for (var s in t || (t = {})) Ld.call(t, s) && load_from_archivevue_type_script_lang_ts_defNormalProp(e, s, t[s]);
                                        if (Bd)
                                            for (var s of Bd(t)) Dd.call(t, s) && load_from_archivevue_type_script_lang_ts_defNormalProp(e, s, t[s]);
                                        return e
                                    })({}, e), s = {
                                        userSearchResults: this.activeRoom.members.map((e => ({
                                            username: e.username,
                                            avatar_url: e.avatarUrl || "",
                                            membership_level: e.membership || "",
                                            flair_code: e.flairCode || ""
                                        })))
                                    }, Id(t, jd(s)));
                                    var t, s
                                }
                            },
                            created() {
                                this.onLoadArchiveGames()
                            },
                            beforeDestroy() {
                                clearGamePreview(), selectSetupBoardTab(Re.None),
                                    function clearArchiveGameSelection() {
                                        Ke.selectedGames.splice(0, Ke.selectedGames.length)
                                    }(), clearUserSearch()
                            },
                            methods: {
                                onLoadArchiveGames({
                                    params: e
                                } = {}) {
                                    setArchiveSearchParams(e || {}), loadGameArchive()
                                },
                                onSelectAllGames({
                                    isSelected: e
                                }) {
                                    selectAllArchiveGames(e)
                                },
                                onSelectGame({
                                    gameId: e
                                }) {
                                    selectArchiveGame(e)
                                },
                                onExpandGame({
                                    gameId: e
                                }) {
                                    loadGamePreview(this.archiveGames.find(e))
                                },
                                onLoadSelectedGames() {
                                    addBoardsFromArchiveGames(this.selectedGames), showAddingBoards()
                                },
                                onSearchUser({
                                    query: e
                                }) {
                                    searchUser(e), setArchiveUsername(e)
                                },
                                onClearUser() {
                                    clearUserSearch()
                                },
                                onEnterUser() {
                                    loadGameArchive()
                                },
                                onSelectUser({
                                    user: e
                                }) {
                                    setArchiveUsername(e.username || ""), loadGameArchive()
                                },
                                onChangeArchivePage({
                                    page: e
                                }) {
                                    clearGamePreview(), loadGameArchive(e)
                                }
                            }
                        }),
                        zd = Ud,
                        qd = (0, ns.Z)(zd, (function() {
                            var e = this,
                                t = e.$createElement;
                            return (e._self._c || t)("load-from-archive", {
                                attrs: {
                                    "board-id": e.boardId,
                                    "current-page": e.archiveCurrentPage,
                                    "current-username": e.currentUsername,
                                    games: e.archiveGames,
                                    "is-loading": e.isLoadingArchive,
                                    "is-searching": e.isSearchingArchive,
                                    members: e.activeRoom.members,
                                    openings: e.openings,
                                    "preview-game-id": e.previewGameId,
                                    "selected-games": e.selectedGames,
                                    "total-pages": e.archiveTotalPages,
                                    "user-search": e.userSearch,
                                    username: e.archiveUsername
                                },
                                on: {
                                    "change-page": e.onChangeArchivePage,
                                    "clear-user": e.onClearUser,
                                    "enter-user": e.onEnterUser,
                                    "load-archive-games": e.onLoadArchiveGames,
                                    "load-selected-games": e.onLoadSelectedGames,
                                    "search-user": e.onSearchUser,
                                    "select-all-games": e.onSelectAllGames,
                                    "select-game": e.onSelectGame,
                                    "expand-game": e.onExpandGame,
                                    "select-user": e.onSelectUser
                                }
                            })
                        }), [], !1, null, null, null).exports;

                    function clearPlayerSearch() {
                        qe.playerSearch.isSearchingUser = !1, qe.playerSearch.userSearchMessage = "", qe.playerSearch.userSearchResults = []
                    }
                    var Vd = Object.defineProperty,
                        Nd = Object.defineProperties,
                        Zd = Object.getOwnPropertyDescriptors,
                        Fd = Object.getOwnPropertySymbols,
                        Gd = Object.prototype.hasOwnProperty,
                        Wd = Object.prototype.propertyIsEnumerable,
                        set_explorer_search_defNormalProp = (e, t, s) => t in e ? Vd(e, t, {
                            enumerable: !0,
                            configurable: !0,
                            writable: !0,
                            value: s
                        }) : e[t] = s;

                    function setExplorerSearch(e, t = {}) {
                        if (Object.assign(qe.search, e), qe.search.source === je.Master) return setArchiveUsername(""), void setArchiveSearchParams({});
                        var s, a;
                        setArchiveUsername(qe.search.source === je.Own ? getCurrentUser().username : qe.search.username), setArchiveSearchParams((s = ((e, t) => {
                            for (var s in t || (t = {})) Gd.call(t, s) && set_explorer_search_defNormalProp(e, s, t[s]);
                            if (Fd)
                                for (var s of Fd(t)) Wd.call(t, s) && set_explorer_search_defNormalProp(e, s, t[s]);
                            return e
                        })({}, t), a = {
                            opponent: qe.search.source === je.Own ? qe.search.username : t.opponent
                        }, Nd(s, Zd(a))))
                    }
                    async function searchPlayer(e) {
                        if (e.length < 3) return qe.playerSearch.userSearchResults = [], void(qe.playerSearch.userSearchMessage = (0, V.dW)("Please enter %number% or more characters", {
                            "%number%": 3
                        }));
                        let t;
                        qe.playerSearch.isSearchingUser = !0;
                        try {
                            t = await async function fetchMasterPlayers(e) {
                                const {
                                    data: t
                                } = await r.Z.get(i.Z.generate("web_master_games_callback_player"), {
                                    params: {
                                        criteria: e
                                    }
                                });
                                return t
                            }(e)
                        } catch (s) {
                            t = []
                        }
                        t.length ? (qe.playerSearch.userSearchResults = t.map((e => ({
                            username: e,
                            avatar_url: "",
                            membership_level: "",
                            flair_code: ""
                        }))), qe.playerSearch.userSearchMessage = "") : qe.playerSearch.userSearchMessage = (0, V.dW)("No results found."), qe.playerSearch.isSearchingUser = !1
                    }
                    var Hd = (0, g.aZ)({
                            name: "WinLossDraw",
                            props: {
                                percentBlackWon: {
                                    type: Number,
                                    required: !0
                                },
                                percentWhiteWon: {
                                    type: Number,
                                    required: !0
                                },
                                percentDrawn: {
                                    type: Number,
                                    required: !0
                                }
                            },
                            setup: e => ({
                                values: (0, g.Fl)((() => ({
                                    white: e.percentWhiteWon,
                                    draw: e.percentDrawn,
                                    black: e.percentBlackWon
                                })))
                            })
                        }),
                        Yd = {
                            "suggested-moves-list": "win-loss-draw-suggested-moves-list",
                            "game-info": "win-loss-draw-game-info",
                            player: "win-loss-draw-player",
                            result: "win-loss-draw-result",
                            "percent-label": "win-loss-draw-percent-label",
                            "suggested-white": "win-loss-draw-suggested-white",
                            "suggested-draw": "win-loss-draw-suggested-draw",
                            "suggested-black": "win-loss-draw-suggested-black"
                        };
                    var Kd = (0, ns.Z)(Hd, (function() {
                        var e = this,
                            t = e.$createElement,
                            s = e._self._c || t;
                        return s("div", {
                            class: e.$style["suggested-moves-list"]
                        }, [e._l(e.values, (function(t, a) {
                            return [t > 0 ? s("div", {
                                key: a,
                                class: [e.$style["suggested-moves-percentages"], e.$style["suggested-" + a]],
                                style: {
                                    width: t + "%"
                                }
                            }, [t > 9 ? s("span", {
                                class: e.$style["percent-label"],
                                domProps: {
                                    textContent: e._s(Math.round(t) + "%")
                                }
                            }) : e._e()]) : e._e()]
                        }))], 2)
                    }), [], !1, (function win_loss_draw_injectStyles(e) {
                        this.$style = Yd.locals || Yd
                    }), null, null).exports;
                    const Qd = 1,
                        Jd = "black",
                        Xd = "white",
                        eu = {
                            B: "bishop",
                            K: "king",
                            N: "knight",
                            R: "rook",
                            Q: "queen"
                        };
                    let tu;
                    const moveNotationTranslations = () => (tu || (tu = {
                        B: V.$H.trans("move_list.algebraic.B", null, "moves") || "B",
                        K: V.$H.trans("move_list.algebraic.K", null, "moves") || "K",
                        N: V.$H.trans("move_list.algebraic.N", null, "moves") || "N",
                        R: V.$H.trans("move_list.algebraic.R", null, "moves") || "R",
                        Q: V.$H.trans("move_list.algebraic.Q", null, "moves") || "Q"
                    }), tu);

                    function getTranslation(e) {
                        return moveNotationTranslations()[e]
                    }

                    function translateMoveText(e) {
                        return e.includes("O-O") ? e : e.replace(/[BKNRQ]/g, getTranslation)
                    }

                    function getFigurineIndex(e) {
                        return e.san.search(/[BKNRQ]/)
                    }

                    function getIconName(e) {
                        const t = e.color === Qd ? Xd : Jd,
                            s = e.san[getFigurineIndex(e)];
                        return `${eu[s]}-${t}`
                    }
                    var su = {
                            name: "MoveSan",
                            props: {
                                color: {
                                    type: [String, Number],
                                    default: n.lA.ColorsAsNumbers.White
                                },
                                figurineSize: {
                                    type: Number
                                },
                                highlighted: {
                                    type: Boolean
                                },
                                premoveText: {
                                    type: String,
                                    default: ""
                                },
                                postmoveText: {
                                    type: String,
                                    default: ""
                                },
                                reverseFigurineColor: {
                                    type: Boolean
                                },
                                san: {
                                    type: String,
                                    required: !0
                                },
                                showFigurine: {
                                    type: Boolean,
                                    default: !1
                                }
                            },
                            computed: {
                                colorAsNumber() {
                                    let e = this.color;
                                    return "number" != typeof this.color && (e = this.color === n.lA.ColorsAsWords.White ? n.lA.ColorsAsNumbers.White : n.lA.ColorsAsNumbers.Black), e
                                },
                                figurine() {
                                    if (this.showFigurine && this.san) {
                                        return {
                                            icon: getIconName({
                                                color: this.reverseFigurineColor ? (0, n.SH)(this.colorAsNumber) : this.colorAsNumber,
                                                san: this.san
                                            }),
                                            index: getFigurineIndex({
                                                san: this.san
                                            })
                                        }
                                    }
                                    return null
                                },
                                isTrailing() {
                                    var e;
                                    return (null == (e = this.figurine) ? void 0 : e.index) > 0
                                },
                                figurineSan() {
                                    return !this.figurine || this.figurine.index < 0 ? null : {
                                        beforeFigurine: this.translatedSan.slice(0, this.figurine.index),
                                        afterFigurine: this.translatedSan.slice(this.figurine.index)
                                    }
                                },
                                translatedSan() {
                                    var e;
                                    const t = this.showFigurine ? null == (e = this.san) ? void 0 : e.replace(/[BKNRQ]/g, "") : this.san;
                                    return t ? translateMoveText(t) : t
                                }
                            }
                        },
                        au = {
                            component: "move-san-component",
                            highlighted: "move-san-highlighted",
                            highlight: "move-san-highlight",
                            premove: "move-san-premove",
                            postmove: "move-san-postmove",
                            figurine: "move-san-figurine",
                            trailing: "move-san-trailing",
                            san: "move-san-san",
                            afterfigurine: "move-san-afterfigurine"
                        };
                    var ou = (0, ns.Z)(su, (function() {
                            var e, t, s = this,
                                a = s.$createElement,
                                o = s._self._c || a;
                            return o("span", s._g({
                                class: [s.$style.component, (e = {}, e[s.$style.highlighted] = s.highlighted, e)]
                            }, s.$listeners), [s.premoveText ? o("span", {
                                class: s.$style.premove,
                                domProps: {
                                    textContent: s._s(s.premoveText)
                                }
                            }) : s._e(), s._v(" "), o("span", {
                                class: s.$style.highlight
                            }, [s.figurineSan ? [o("span", {
                                class: s.$style.san,
                                domProps: {
                                    textContent: s._s(s.figurineSan.beforeFigurine)
                                }
                            }), s._v(" "), o("span", {
                                ref: "figurine",
                                class: [s.$style.figurine, "icon-font-chess", s.figurine.icon, (t = {}, t[s.$style.trailing] = s.isTrailing, t)]
                            }), o("span", {
                                class: s.$style.afterfigurine,
                                domProps: {
                                    textContent: s._s(s.figurineSan.afterFigurine)
                                }
                            })] : o("span", {
                                class: s.$style.san,
                                domProps: {
                                    textContent: s._s(s.translatedSan)
                                }
                            })], 2), s._v(" "), s.postmoveText ? o("span", {
                                class: s.$style.postmove,
                                domProps: {
                                    textContent: s._s(s.postmoveText)
                                }
                            }) : s._e()])
                        }), [], !1, (function move_san_injectStyles(e) {
                            this.$style = au.locals || au
                        }), null, null).exports,
                        nu = (0, g.aZ)({
                            name: "ExplorerMoveStats",
                            components: {
                                MoveSan: ou,
                                WinLossDraw: Kd
                            },
                            props: {
                                move: {
                                    type: Object,
                                    required: !0
                                }
                            },
                            emits: ["click-move"],
                            computed: {
                                percentBlack() {
                                    return this.move.stats.blackWon
                                },
                                percentWhite() {
                                    return this.move.stats.whiteWon
                                },
                                percentDraw() {
                                    return this.move.stats.draw
                                },
                                moveNumber() {
                                    return this.move.ply <= 0 ? "1." : (this.move.ply + 1) % 2 == 0 ? (this.move.ply + 1) / 2 + "." : this.move.ply / 2 + "..."
                                }
                            },
                            methods: {
                                onClickMove() {
                                    this.$emit("click-move", {
                                        move: this.move
                                    })
                                }
                            }
                        }),
                        ru = {
                            component: "explorer-move-stats-component",
                            button: "explorer-move-stats-button",
                            games: "explorer-move-stats-games",
                            move: "explorer-move-stats-move"
                        };
                    var iu = (0, ns.Z)(nu, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.$style.component
                            }, [s("button", {
                                class: e.$style.button,
                                attrs: {
                                    type: "button"
                                },
                                on: {
                                    click: e.onClickMove
                                }
                            }, [s("move-san", {
                                class: e.$style.move,
                                attrs: {
                                    "premove-text": e.moveNumber,
                                    san: e.move.san
                                }
                            })], 1), e._v(" "), s("div", {
                                class: e.$style.games,
                                domProps: {
                                    textContent: e._s(e.move.stats.totalGames)
                                }
                            }), e._v(" "), s("win-loss-draw", {
                                attrs: {
                                    "percent-black-won": e.percentBlack,
                                    "percent-white-won": e.percentWhite,
                                    "percent-drawn": e.percentDraw
                                }
                            })], 1)
                        }), [], !1, (function explorer_move_stats_injectStyles(e) {
                            this.$style = ru.locals || ru
                        }), null, null).exports,
                        lu = (0, g.aZ)({
                            name: "ExplorerMoves",
                            components: {
                                ExplorerMoveStats: iu
                            },
                            props: {
                                boardId: {
                                    type: String,
                                    required: !0
                                },
                                isPremium: {
                                    type: Boolean,
                                    required: !0
                                },
                                suggestedMoves: {
                                    type: Array,
                                    required: !0
                                },
                                selectedMove: {
                                    type: Object,
                                    required: !1
                                }
                            },
                            emits: ["click-move"],
                            data: () => ({
                                showAllMoves: !1
                            }),
                            computed: {
                                showMoreButton() {
                                    return this.suggestedMoves.length > 10
                                },
                                visibleSuggestedMoves() {
                                    return this.showAllMoves ? this.suggestedMoves : this.suggestedMoves.slice(0, 10)
                                }
                            },
                            methods: {
                                onClickMore() {
                                    this.showAllMoves = !this.showAllMoves
                                }
                            }
                        }),
                        cu = {
                            stats: "explorer-moves-stats",
                            hml: "explorer-moves-hml",
                            text: "explorer-moves-text",
                            more: "explorer-moves-more"
                        };
                    var du = (0, ns.Z)(lu, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.$style.component
                            }, [e.selectedMove && e.selectedMove.san ? s("horizontal-move-list", {
                                class: e.$style.hml,
                                attrs: {
                                    "board-id": e.boardId
                                }
                            }) : e._e(), e._v(" "), s("div", {
                                class: e.$style.stats
                            }, [e.selectedMove && e.selectedMove.san ? s("explorer-move-stats", {
                                attrs: {
                                    move: e.selectedMove
                                }
                            }) : e._e(), e._v(" "), s("div", {
                                class: e.$style.text,
                                domProps: {
                                    textContent: e._s(e.$trans("Select a move below to explore..."))
                                }
                            }), e._v(" "), e._l(e.visibleSuggestedMoves, (function(t, a) {
                                return s("explorer-move-stats", {
                                    key: a,
                                    attrs: {
                                        move: t
                                    },
                                    on: {
                                        "click-move": function(t) {
                                            return e.$emit("click-move", t)
                                        }
                                    }
                                })
                            })), e._v(" "), e.showMoreButton ? s("button", {
                                class: e.$style.more,
                                on: {
                                    click: e.onClickMore
                                }
                            }, [e._v("\n      " + e._s(e.showAllMoves ? e.$trans("Less") : e.$trans("More")) + "\n      "), s("span", {
                                staticClass: "icon-font-chess ",
                                class: e.showAllMoves ? "chevron-up" : "chevron-bottom"
                            })]) : e._e()], 2)], 1)
                        }), [], !1, (function explorer_moves_injectStyles(e) {
                            this.$style = cu.locals || cu
                        }), null, null).exports,
                        uu = (0, g.aZ)({
                            name: "ExplorerOpeningHeader",
                            components: {},
                            props: {
                                opening: {
                                    type: Object,
                                    required: !0
                                },
                                isMoveListVisible: {
                                    type: Boolean,
                                    required: !0
                                }
                            },
                            emits: ["reset-position", "toggle-moves"]
                        }),
                        mu = {
                            component: "explorer-opening-header-component",
                            text: "explorer-opening-header-text",
                            icon: "explorer-opening-header-icon"
                        };
                    var hu = (0, ns.Z)(uu, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.$style.component
                            }, [s("span", {
                                staticClass: "icon-font-chess circle-compass",
                                class: e.$style.icon
                            }), e._v(" "), s("span", {
                                class: e.$style.text,
                                domProps: {
                                    textContent: e._s(e.opening.name)
                                }
                            }), e._v(" "), s("span", {
                                staticClass: "icon-font-chess undo",
                                class: e.$style.icon,
                                on: {
                                    click: function(t) {
                                        return e.$emit("reset-position", t)
                                    }
                                }
                            }), e._v(" "), s("span", {
                                staticClass: "icon-font-chess",
                                class: [e.$style.icon, e.isMoveListVisible ? "caret-up" : "caret-down"],
                                on: {
                                    click: function(t) {
                                        return e.$emit("toggle-moves", t)
                                    }
                                }
                            })])
                        }), [], !1, (function explorer_opening_header_injectStyles(e) {
                            this.$style = mu.locals || mu
                        }), null, null).exports,
                        pu = (0, g.aZ)({
                            name: "ExplorerSearchForm",
                            components: {
                                V5Button: ko.V5Button,
                                V5Select: ko.V5Select,
                                UsernameSearchInput: Qc,
                                ToggleFilterLink: Lc,
                                ArchiveFilter: Ic
                            },
                            props: {
                                openings: {
                                    type: Array,
                                    required: !0
                                },
                                userSearch: {
                                    type: Object,
                                    required: !0
                                },
                                playerSearch: {
                                    type: Object,
                                    required: !0
                                },
                                explorerSearch: {
                                    type: Object,
                                    required: !0
                                }
                            },
                            emits: ["search-user", "clear-user", "search-explorer"],
                            data() {
                                return {
                                    source: this.explorerSearch.source,
                                    username: this.explorerSearch.username,
                                    isArchiveFilterVisible: !1
                                }
                            },
                            computed: {
                                sourceOptions() {
                                    return [{
                                        label: this.$trans("Master Games"),
                                        value: je.Master
                                    }, {
                                        label: this.$trans("My Games"),
                                        value: je.Own
                                    }, {
                                        label: this.$trans("Other players"),
                                        value: je.Other
                                    }]
                                },
                                usernamePlaceholder() {
                                    switch (this.source) {
                                        case je.Master:
                                            return this.$trans("Player's name");
                                        case je.Other:
                                            return this.$trans("Username");
                                        case je.Own:
                                            return this.$trans("Opponent");
                                        default:
                                            return ""
                                    }
                                },
                                showAvatar() {
                                    return this.source !== je.Master
                                },
                                nameSearch() {
                                    return this.source === je.Master ? this.playerSearch : this.userSearch
                                },
                                isOpponentVisible() {
                                    return this.source === je.Own
                                },
                                isMasterGames() {
                                    return this.source === je.Master
                                }
                            },
                            methods: {
                                onToggleArchiveFilter() {
                                    this.isArchiveFilterVisible = !this.isArchiveFilterVisible
                                },
                                onClickReset() {
                                    this.source = je.Master, this.username = "", this.isArchiveFilterVisible = !1, this.onSubmit()
                                },
                                onClickResetFilter() {
                                    this.$refs.archiveFilter.reset()
                                },
                                onSubmit() {
                                    var e, t;
                                    this.$emit("search-explorer", {
                                        search: {
                                            source: this.source,
                                            username: this.username
                                        },
                                        archiveSearch: null != (t = null == (e = this.$refs.archiveFilter) ? void 0 : e.getParams()) ? t : {}
                                    })
                                },
                                onChangeSource(e) {
                                    var t;
                                    this.source = e, e !== je.Other || this.username ? this.onSubmit() : null == (t = document.getElementById("username-search-input")) || t.focus()
                                },
                                onEnterUser(e) {
                                    this.username = e.target.value, this.onSubmit()
                                },
                                onSelectUser({
                                    user: {
                                        username: e
                                    }
                                }) {
                                    this.username = e, this.onSubmit()
                                },
                                onSearchUser({
                                    query: e
                                }) {
                                    this.$emit("search-user", {
                                        source: this.source,
                                        query: e
                                    })
                                },
                                onClearUser() {
                                    this.username = "", this.$emit("clear-user")
                                }
                            }
                        }),
                        bu = {
                            component: "explorer-search-form-component",
                            explorer: "explorer-search-form-explorer",
                            archive: "explorer-search-form-archive",
                            reset: "explorer-search-form-reset",
                            buttons: "explorer-search-form-buttons",
                            button: "explorer-search-form-button"
                        };
                    var gu = (0, ns.Z)(pu, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.$style.component
                            }, [s("div", {
                                class: e.$style.explorer
                            }, [s("v5-select", {
                                attrs: {
                                    options: e.sourceOptions
                                },
                                on: {
                                    input: e.onChangeSource
                                },
                                model: {
                                    value: e.source,
                                    callback: function(t) {
                                        e.source = t
                                    },
                                    expression: "source"
                                }
                            }), e._v(" "), s("username-search-input", {
                                attrs: {
                                    placeholder: e.usernamePlaceholder,
                                    "user-search": e.nameSearch,
                                    username: e.username,
                                    "show-avatar": e.showAvatar
                                },
                                on: {
                                    "enter-user": e.onEnterUser,
                                    "clear-user": e.onClearUser,
                                    "search-user": e.onSearchUser,
                                    "select-user": e.onSelectUser
                                }
                            }), e._v(" "), s("button", {
                                class: e.$style.reset,
                                domProps: {
                                    textContent: e._s(e.$trans("Reset"))
                                },
                                on: {
                                    click: function(t) {
                                        return t.preventDefault(), e.onClickReset.apply(null, arguments)
                                    }
                                }
                            })], 1), e._v(" "), e.isMasterGames ? e._e() : [e.isArchiveFilterVisible ? s("archive-filter", {
                                ref: "archiveFilter",
                                class: e.$style.archive,
                                attrs: {
                                    openings: e.openings,
                                    "is-opponent-visible": e.isOpponentVisible,
                                    "is-advanced-visible": ""
                                }
                            }) : e._e(), e._v(" "), s("div", {
                                class: e.$style.buttons
                            }, [s("toggle-filter-link", {
                                attrs: {
                                    "is-visible": e.isArchiveFilterVisible,
                                    "hide-label": e.$trans("Hide Filters"),
                                    "show-label": e.$trans("Show Filters")
                                },
                                on: {
                                    click: e.onToggleArchiveFilter
                                }
                            }), e._v(" "), e.isArchiveFilterVisible ? s("v5-button", {
                                class: e.$style.button,
                                attrs: {
                                    size: "x-small",
                                    theme: "primary"
                                },
                                domProps: {
                                    textContent: e._s(e.$trans("Search"))
                                },
                                on: {
                                    click: e.onSubmit
                                }
                            }) : e._e(), e._v(" "), e.isArchiveFilterVisible ? s("v5-button", {
                                class: e.$style.button,
                                attrs: {
                                    size: "x-small"
                                },
                                domProps: {
                                    textContent: e._s(e.$trans("Reset"))
                                },
                                on: {
                                    click: e.onClickResetFilter
                                }
                            }) : e._e()], 1)]], 2)
                        }), [], !1, (function explorer_search_form_injectStyles(e) {
                            this.$style = bu.locals || bu
                        }), null, null),
                        vu = gu.exports,
                        wu = (e => (e.WhiteElo = "whiteElo", e.BlackElo = "blackElo", e.Year = "year", e))(wu || {}),
                        fu = (0, g.aZ)({
                            name: "MasterGames",
                            components: {
                                GameItem: dd,
                                GamePreview: hd,
                                ListWithHeader: fd
                            },
                            props: {
                                boardId: {
                                    type: String,
                                    required: !0
                                },
                                currentSort: {
                                    type: String,
                                    required: !1
                                },
                                isLoadingMasterGames: {
                                    type: Boolean,
                                    required: !0
                                },
                                masterGames: {
                                    type: Array,
                                    required: !0
                                },
                                previewGameId: {
                                    type: Number,
                                    required: !1
                                },
                                selectedMasterGames: {
                                    type: Array,
                                    required: !0
                                }
                            },
                            emits: ["expand-master-game", "select-master-game", "select-all-master-games", "sort-master-games"],
                            computed: {
                                headerColumns() {
                                    return [{
                                        label: this.$trans("Player"),
                                        className: this.$style["header-player"]
                                    }, {
                                        label: this.$trans("Rating"),
                                        className: this.$style["header-rating"],
                                        sort: wu.WhiteElo
                                    }, {
                                        label: this.$trans("Player"),
                                        className: this.$style["header-player"]
                                    }, {
                                        label: this.$trans("Rating"),
                                        className: this.$style["header-rating"],
                                        sort: wu.BlackElo
                                    }, {
                                        label: "",
                                        className: this.$style["header-expand"]
                                    }, {
                                        label: this.$trans("Result"),
                                        className: this.$style["header-result"]
                                    }, {
                                        label: this.$trans("Year"),
                                        className: this.$style["header-year"],
                                        sort: wu.Year
                                    }]
                                },
                                emptyText() {
                                    return this.masterGames.length ? "" : this.$trans("No Master Games found.")
                                }
                            },
                            methods: {
                                isSelected(e) {
                                    return Boolean(this.selectedMasterGames.find((t => t.id === e)))
                                }
                            }
                        }),
                        yu = {
                            "header-player": "master-games-header-player",
                            "header-rating": "master-games-header-rating",
                            "header-expand": "master-games-header-expand",
                            "header-result": "master-games-header-result",
                            "header-year": "master-games-header-year"
                        };
                    var _u = (0, ns.Z)(fu, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("list-with-header", {
                                attrs: {
                                    "scroll-anchor-id": "master-scroll-anchor",
                                    "is-loading": e.isLoadingMasterGames,
                                    "empty-text": e.emptyText,
                                    "header-columns": e.headerColumns,
                                    "current-sort": e.currentSort
                                },
                                on: {
                                    "sort-list": function(t) {
                                        return e.$emit("sort-master-games", t)
                                    },
                                    "select-all": function(t) {
                                        return e.$emit("select-all-master-games", t)
                                    }
                                }
                            }, [e._l(e.masterGames, (function(t) {
                                return [s("game-item", {
                                    key: t.id,
                                    attrs: {
                                        "black-name": t.blackPlayer.name,
                                        "black-rating": t.blackPlayer.rating,
                                        "game-id": t.id,
                                        "is-expanded": t.id === e.previewGameId,
                                        "is-selected": e.isSelected(t.id),
                                        result: t.getResultLabel(),
                                        time: t.year,
                                        "white-name": t.whitePlayer.name,
                                        "white-rating": t.whitePlayer.rating
                                    },
                                    on: {
                                        "expand-game": function(t) {
                                            return e.$emit("expand-master-game", t)
                                        },
                                        "select-game": function(t) {
                                            return e.$emit("select-master-game", t)
                                        }
                                    }
                                }), e._v(" "), t.id === e.previewGameId ? s("game-preview", {
                                    key: "preview-" + t.id,
                                    attrs: {
                                        "board-id": e.boardId
                                    }
                                }) : e._e()]
                            }))], 2)
                        }), [], !1, (function master_games_injectStyles(e) {
                            this.$style = yu.locals || yu
                        }), null, null).exports,
                        ku = (0, g.aZ)({
                            name: "LoadFromExplorer",
                            components: {
                                ExplorerSearchForm: vu,
                                ExplorerOpeningHeader: hu,
                                ExplorerMoves: du,
                                MasterGames: _u,
                                ArchiveGames: kd,
                                AddGamesFooter: Od
                            },
                            props: {
                                boardId: {
                                    type: String,
                                    required: !0
                                },
                                isPremium: {
                                    type: Boolean,
                                    required: !0
                                },
                                opening: {
                                    type: Object,
                                    required: !0
                                },
                                suggestedMoves: {
                                    type: Array,
                                    required: !0
                                },
                                selectedMove: {
                                    type: Object,
                                    required: !1
                                },
                                userSearch: {
                                    type: Object,
                                    required: !0
                                },
                                playerSearch: {
                                    type: Object,
                                    required: !0
                                },
                                explorerSearch: {
                                    type: Object,
                                    required: !0
                                },
                                isMoveListVisible: {
                                    type: Boolean,
                                    required: !0
                                },
                                previewGameId: {
                                    type: Number,
                                    required: !1
                                },
                                currentUsername: {
                                    type: String,
                                    required: !0
                                },
                                games: {
                                    type: Array,
                                    required: !0
                                },
                                isLoading: {
                                    type: Boolean,
                                    required: !0
                                },
                                isSearching: {
                                    type: Boolean,
                                    required: !0
                                },
                                selectedGames: {
                                    type: Array,
                                    required: !0
                                },
                                totalPages: {
                                    type: Number,
                                    required: !0
                                },
                                currentPage: {
                                    type: Number,
                                    required: !0
                                },
                                openings: {
                                    type: Array,
                                    required: !0
                                },
                                isLoadingMasterGames: {
                                    type: Boolean,
                                    required: !0
                                },
                                masterGames: {
                                    type: Array,
                                    required: !0
                                },
                                selectedMasterGames: {
                                    type: Array,
                                    required: !0
                                },
                                masterGamesTotalPages: {
                                    type: Number,
                                    required: !0
                                },
                                masterGamesCurrentPage: {
                                    type: Number,
                                    required: !0
                                },
                                masterGamesCurrentSort: {
                                    type: String,
                                    required: !1
                                }
                            },
                            emits: ["change-master-games-page", "change-page", "clear-user", "click-move", "expand-archive-game", "expand-master-game", "load-selected-games", "load-selected-master-games", "reset-position", "search-explorer", "search-user", "select-all-games", "select-all-master-games", "select-game", "select-master-game", "toggle-moves", "sort-master-games"],
                            data: () => ({}),
                            computed: {
                                isMasterGames() {
                                    return this.explorerSearch.source === je.Master
                                }
                            },
                            methods: {}
                        }),
                        Cu = {
                            component: "load-from-explorer-component",
                            moves: "load-from-explorer-moves",
                            games: "load-from-explorer-games",
                            text: "load-from-explorer-text",
                            icon: "load-from-explorer-icon"
                        };
                    var Su = (0, ns.Z)(ku, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.$style.component
                            }, [s("explorer-search-form", {
                                attrs: {
                                    "user-search": e.userSearch,
                                    "player-search": e.playerSearch,
                                    "explorer-search": e.explorerSearch,
                                    openings: e.openings
                                },
                                on: {
                                    "search-explorer": function(t) {
                                        return e.$emit("search-explorer", t)
                                    },
                                    "clear-user": function(t) {
                                        return e.$emit("clear-user", t)
                                    },
                                    "search-user": function(t) {
                                        return e.$emit("search-user", t)
                                    }
                                }
                            }), e._v(" "), s("explorer-opening-header", {
                                attrs: {
                                    opening: e.opening,
                                    "is-move-list-visible": e.isMoveListVisible
                                },
                                on: {
                                    "reset-position": function(t) {
                                        return e.$emit("reset-position", t)
                                    },
                                    "toggle-moves": function(t) {
                                        return e.$emit("toggle-moves", t)
                                    }
                                }
                            }), e._v(" "), e.isMoveListVisible ? s("explorer-moves", {
                                attrs: {
                                    "board-id": e.boardId,
                                    "is-premium": e.isPremium,
                                    "selected-move": e.selectedMove,
                                    "suggested-moves": e.suggestedMoves
                                },
                                on: {
                                    "click-move": function(t) {
                                        return e.$emit("click-move", t)
                                    }
                                }
                            }) : e._e(), e._v(" "), s("div", {
                                class: e.$style.games
                            }, [s("div", {
                                class: e.$style.text
                            }, [e._v("\n      " + e._s(e.$trans("Check the boxes below to add several games...")) + "\n      "), s("span", {
                                staticClass: "icon-font-chess download",
                                class: e.$style.icon
                            })]), e._v(" "), e.isMasterGames ? [s("master-games", {
                                attrs: {
                                    "is-loading-master-games": e.isLoadingMasterGames,
                                    "board-id": e.boardId,
                                    "preview-game-id": e.previewGameId,
                                    "master-games": e.masterGames,
                                    "selected-master-games": e.selectedMasterGames,
                                    "current-sort": e.masterGamesCurrentSort
                                },
                                on: {
                                    "sort-master-games": function(t) {
                                        return e.$emit("sort-master-games", t)
                                    },
                                    "expand-master-game": function(t) {
                                        return e.$emit("expand-master-game", t)
                                    },
                                    "select-all-master-games": function(t) {
                                        return e.$emit("select-all-master-games", t)
                                    },
                                    "select-master-game": function(t) {
                                        return e.$emit("select-master-game", t)
                                    }
                                }
                            }), e._v(" "), s("add-games-footer", {
                                attrs: {
                                    "scroll-to": "master-scroll-anchor",
                                    "total-pages": e.masterGamesTotalPages,
                                    "current-page": e.masterGamesCurrentPage,
                                    "selected-games-count": e.selectedMasterGames.length
                                },
                                on: {
                                    "change-page": function(t) {
                                        return e.$emit("change-master-games-page", t)
                                    },
                                    "load-selected-games": function(t) {
                                        return e.$emit("load-selected-master-games", t)
                                    }
                                }
                            })] : [s("archive-games", {
                                attrs: {
                                    "board-id": e.boardId,
                                    "current-username": e.currentUsername,
                                    games: e.games,
                                    "is-loading": e.isLoading,
                                    "is-searching": e.isSearching,
                                    "preview-game-id": e.previewGameId,
                                    "selected-games": e.selectedGames,
                                    username: e.explorerSearch.username
                                },
                                on: {
                                    "expand-game": function(t) {
                                        return e.$emit("expand-archive-game", t)
                                    },
                                    "select-all-games": function(t) {
                                        return e.$emit("select-all-games", t)
                                    },
                                    "select-game": function(t) {
                                        return e.$emit("select-game", t)
                                    }
                                }
                            }), e._v(" "), s("add-games-footer", {
                                attrs: {
                                    "scroll-to": "archive-scroll-anchor",
                                    "total-pages": e.totalPages,
                                    "current-page": e.currentPage,
                                    "selected-games-count": e.selectedGames.length
                                },
                                on: {
                                    "change-page": function(t) {
                                        return e.$emit("change-page", t)
                                    },
                                    "load-selected-games": function(t) {
                                        return e.$emit("load-selected-games", t)
                                    }
                                }
                            })]], 2)], 1)
                        }), [], !1, (function load_from_explorer_injectStyles(e) {
                            this.$style = Cu.locals || Cu
                        }), null, null).exports,
                        xu = (0, g.aZ)({
                            name: "LoadFromExplorerController",
                            components: {
                                LoadFromExplorer: Su
                            },
                            data: () => ({
                                isMoveListVisible: !0
                            }),
                            computed: {
                                boardId: () => getActiveChessboardElementId(),
                                previewGameId: () => getGamePreviewId(),
                                isPremium: () => getCurrentUser().isPremium(),
                                userSearch: () => getUserSearch(),
                                playerSearch: () => function getPlayerSearch() {
                                    return qe.playerSearch
                                }(),
                                explorerSearch: () => function getExplorerSearch() {
                                    return qe.search
                                }(),
                                opening: () => function getExplorerOpening() {
                                    return qe.opening
                                }(),
                                suggestedMoves: () => function getSuggestedMoves() {
                                    return qe.suggestedMoves
                                }(),
                                selectedMove: () => getSelectedMove(),
                                openings: () => getOpenings(),
                                archiveGames: () => getArchiveGames(),
                                archiveUsername: () => getArchiveUsername(),
                                currentUsername: () => getCurrentUser().username,
                                isLoadingArchive: () => isLoadingArchive(),
                                isSearchingArchive: () => isSearchingArchive(),
                                archiveCurrentPage: () => getArchiveCurrentPage(),
                                archiveTotalPages: () => getArchiveTotalPages(),
                                selectedGames: () => getSelectedArchiveGames(),
                                masterGames: () => function getMasterGames() {
                                    return qe.masterGames
                                }(),
                                isLoadingMasterGames: () => function isLoadingMasterGames() {
                                    return qe.isLoadingMasterGames
                                }(),
                                selectedMasterGames: () => function getSelectedMasterGames() {
                                    return qe.selectedMasterGames
                                }(),
                                masterGamesTotalPages: () => function getMasterGamesTotalPages() {
                                    return qe.masterGamesTotalPages
                                }(),
                                masterGamesCurrentPage: () => function getMasterGamesCurrentPage() {
                                    return qe.masterGamesCurrentPage
                                }(),
                                masterGamesCurrentSort: () => function getMasterGamesCurrentSort() {
                                    return qe.masterGamesCurrentSort
                                }()
                            },
                            mounted() {
                                this.loadPosition()
                            },
                            beforeDestroy() {
                                ! function clearExplorer() {
                                    setExplorerSearch(Be), clearUserSearch(), clearGameArchive(), clearPlayerSearch()
                                }(), clearGamePreview()
                            },
                            methods: {
                                loadPosition() {
                                    clearGamePreview(), loadExplorerPosition(getActiveChessboard())
                                },
                                onSearchExplorer({
                                    search: e,
                                    archiveSearch: t
                                }) {
                                    setExplorerSearch(e, t), this.loadPosition()
                                },
                                onSearchUser({
                                    query: e,
                                    source: t
                                }) {
                                    t === je.Master ? searchPlayer(e) : searchUser(e)
                                },
                                onClearUser() {
                                    clearUserSearch(), clearPlayerSearch()
                                },
                                onToggleMoves() {
                                    this.isMoveListVisible = !this.isMoveListVisible
                                },
                                onResetPosition() {
                                    clearGamePreview(), async function resetExplorerPosition(e) {
                                        e.game.load({
                                            moves: "",
                                            fen: (0, O.H)()
                                        }), e.game.selectLineStart(), loadExplorerPosition(e)
                                    }(getActiveChessboard())
                                },
                                onClickMove({
                                    move: e
                                }) {
                                    clearGamePreview(), getActiveChessboard().game.move(e.san)
                                },
                                onSelectAllGames({
                                    isSelected: e
                                }) {
                                    selectAllArchiveGames(e)
                                },
                                onSelectGame({
                                    gameId: e
                                }) {
                                    selectArchiveGame(e)
                                },
                                onChangeArchivePage({
                                    page: e
                                }) {
                                    loadGameArchive(e)
                                },
                                onLoadSelectedGames() {
                                    addBoardsFromArchiveGames(this.selectedGames), showAddingBoards()
                                },
                                onSelectMasterGame({
                                    gameId: e
                                }) {
                                    ! function selectMasterGame(e) {
                                        qe.selectedMasterGames.includes(e) ? qe.selectedMasterGames.remove(e) : qe.masterGames.includes(e) && qe.selectedMasterGames.add(qe.masterGames.find(e))
                                    }(e)
                                },
                                onSelectAllMasterGames({
                                    isSelected: e
                                }) {
                                    ! function selectAllMasterGames(e) {
                                        qe.masterGames.forEach((t => {
                                            e ? qe.selectedMasterGames.includes(t) || qe.selectedMasterGames.add(t) : qe.selectedMasterGames.remove(t)
                                        }))
                                    }(e)
                                },
                                onLoadSelectedMasterGames() {
                                    !async function addBoardsFromMasterGames(e) {
                                        const t = getActiveRoom();
                                        t && (Q.addingBoards.push(t.id), await forEachAsync(e, (async e => {
                                            await addBoardFromPgn(t.id, e), logGameLoaded(t.id, bs.Explorer)
                                        })), removeFromArray(Q.addingBoards, t.id))
                                    }(this.selectedMasterGames), showAddingBoards()
                                },
                                onChangeMasterGamesPage({
                                    page: e
                                }) {
                                    loadMasterGames({
                                        page: e
                                    })
                                },
                                onSortMasterGames({
                                    column: e
                                }) {
                                    loadMasterGames({
                                        sort: e
                                    })
                                },
                                onExpandMasterGame({
                                    gameId: e
                                }) {
                                    loadGamePreview(this.masterGames.find(e))
                                },
                                onExpandArchiveGame({
                                    gameId: e
                                }) {
                                    loadGamePreview(this.archiveGames.find(e))
                                }
                            }
                        }),
                        $u = xu,
                        Pu = (0, ns.Z)($u, (function() {
                            var e = this,
                                t = e.$createElement;
                            return (e._self._c || t)("load-from-explorer", {
                                attrs: {
                                    "board-id": e.boardId,
                                    "is-premium": e.isPremium,
                                    "user-search": e.userSearch,
                                    "player-search": e.playerSearch,
                                    "explorer-search": e.explorerSearch,
                                    opening: e.opening,
                                    "suggested-moves": e.suggestedMoves,
                                    "selected-move": e.selectedMove,
                                    "is-move-list-visible": e.isMoveListVisible,
                                    openings: e.openings,
                                    "current-page": e.archiveCurrentPage,
                                    "current-username": e.currentUsername,
                                    games: e.archiveGames,
                                    "is-loading": e.isLoadingArchive,
                                    "is-searching": e.isSearchingArchive,
                                    "preview-game-id": e.previewGameId,
                                    "selected-games": e.selectedGames,
                                    "total-pages": e.archiveTotalPages,
                                    "is-loading-master-games": e.isLoadingMasterGames,
                                    "master-games": e.masterGames,
                                    "selected-master-games": e.selectedMasterGames,
                                    "master-games-total-pages": e.masterGamesTotalPages,
                                    "master-games-current-page": e.masterGamesCurrentPage
                                },
                                on: {
                                    "select-master-game": e.onSelectMasterGame,
                                    "select-all-master-games": e.onSelectAllMasterGames,
                                    "load-selected-master-games": e.onLoadSelectedMasterGames,
                                    "change-master-games-page": e.onChangeMasterGamesPage,
                                    "expand-master-game": e.onExpandMasterGame,
                                    "sort-master-games": e.onSortMasterGames,
                                    "load-selected-games": e.onLoadSelectedGames,
                                    "select-all-games": e.onSelectAllGames,
                                    "select-game": e.onSelectGame,
                                    "change-page": e.onChangeArchivePage,
                                    "expand-archive-game": e.onExpandArchiveGame,
                                    "search-explorer": e.onSearchExplorer,
                                    "clear-user": e.onClearUser,
                                    "search-user": e.onSearchUser,
                                    "click-move": e.onClickMove,
                                    "reset-position": e.onResetPosition,
                                    "toggle-moves": e.onToggleMoves
                                }
                            })
                        }), [], !1, null, null, null).exports;
                    async function updateAutoSave(e, t) {
                        const s = getRoom(e);
                        s && isRoomOwner(e) && (await z.publish({
                            method: "put",
                            service: j.Classroom,
                            path: [D.Sessions, s.id, D.AutoSave],
                            data: {
                                autoSave: t
                            }
                        }), (0, a.Uc)(s, {
                            autoSave: t
                        }))
                    }
                    async function updateCollectionIds(e, t) {
                        const s = getRoom(e);
                        s && isRoomOwner(e) && (await z.publish({
                            method: "put",
                            service: j.Classroom,
                            path: [D.Sessions, s.id, D.CollectionIds],
                            data: {
                                collectionIds: t
                            }
                        }), (0, a.Uc)(s, {
                            collectionIds: t
                        }))
                    }
                    async function updateSelectedCollectionId(e, t) {
                        const s = getRoom(e);
                        s && isRoomOwner(e) && (s.collectionIds.includes(t) || await updateCollectionIds(s.id, s.collectionIds.concat(t)), await z.publish({
                            method: "put",
                            service: j.Classroom,
                            path: [D.Sessions, s.id, D.SelectedCollectionId],
                            data: {
                                collectionId: t
                            }
                        }), (0, a.Uc)(s, {
                            selectedCollectionId: t
                        }))
                    }
                    async function addBoards(e, t, s) {
                        e.collectionIds.includes(t) || await updateCollectionIds(e.id, e.collectionIds.concat(t)), e.selectedCollectionId || (await updateSelectedCollectionId(e.id, t), await updateAutoSave(e.id, !0)), await forEachAsync(s, (async t => {
                            await addBoardFromPgn(e.id, {
                                pgn: t.pgn,
                                gameId: t.id
                            })
                        }))
                    }
                    async function addCollectionPageGames(e, t, s) {
                        const a = s.data.map((e => ({
                            id: e.lucgId,
                            pgn: e.typeSpecificData.pgn
                        })));
                        await addBoards(e, t, a)
                    }
                    async function addBoardsFromCollections(e) {
                        const t = getActiveRoom();
                        t && (Q.addingBoards.push(t.id), await forEachAsync(e, (async e => {
                            e.allGames ? await async function addAllGamesFromCollection(e, t) {
                                const {
                                    data: s
                                } = await getCollectionGames(t);
                                if (await addCollectionPageGames(e, t, s), s.meta.totalPages > 1)
                                    for (let a = 2; a <= s.meta.totalPages; a++) {
                                        const {
                                            data: s
                                        } = await getCollectionGames(t, {
                                            page: a
                                        });
                                        await addCollectionPageGames(e, t, s)
                                    }
                            }(t, e.id): e.games.length && await addBoards(t, e.id, e.games)
                        })), removeFromArray(Q.addingBoards, t.id), logGameLoaded(t.id, bs.Library))
                    }
                    var Eu = (e => (e.MyCollections = "web_library_collections", e.MyBookmarks = "web_library_bookmarks", e.SharedCollections = "web_library_shared_collections", e.CommunityCollections = "web_library_community_collections", e))(Eu || {});

                    function getTypeFromVariant(e) {
                        switch (e) {
                            case "3-check":
                                return "threecheck";
                            case "King of the Hill":
                                return "kingofthehill";
                            default:
                                return e ? e.toLowerCase() : "chess"
                        }
                    }

                    function getPGNHeaders(e) {
                        try {
                            return Ne().pgnToJson(e, 0).headers
                        } catch (t) {
                            return {}
                        }
                    }
                    async function loadCollectionGames(e, t) {
                        var s, o;
                        const {
                            data: {
                                data: n,
                                meta: r
                            }
                        } = await getCollectionGames(e.id, {
                            page: null != t ? t : Number(null != (o = null == (s = e.gamesMeta) ? void 0 : s.currentPage) ? o : 0) + 1
                        });
                        t && e.games.reset(), n.forEach((t => {
                            const s = t.typeSpecificData.pgn,
                                o = getPGNHeaders(s),
                                n = e.games.add({
                                    id: t.lucgId,
                                    pgn: s,
                                    result: o.Result || "*",
                                    gameType: getTypeFromVariant(o.Variant || "chess"),
                                    timeControl: o.TimeControl ? getTimeControl(o.TimeControl) : null
                                });
                            (0, a.Uc)(n.whitePlayer, {
                                name: o.White || "",
                                rating: parseInt(o.WhiteElo || "", 10)
                            }), (0, a.Uc)(n.blackPlayer, {
                                name: o.Black || "",
                                rating: parseInt(o.BlackElo || "", 10)
                            })
                        })), e.gamesMeta || (e.gamesMeta = new LibraryCollectionMetaModel), Object.assign(e.gamesMeta, r)
                    }
                    var Ou = (e => (e.Name = "name", e.Games = "numberOfItems", e.Date = "createTime", e))(Ou || {});
                    async function loadCollections(e) {
                        var t;
                        Yr.isLoadingCollections = !0, Yr.isSearchingCollections = Boolean(null == e ? void 0 : e.search);
                        const s = Yr.sort;
                        Yr.sort === (null == e ? void 0 : e.sort) ? Yr.sort = null : (null == e ? void 0 : e.sort) && (Yr.sort = null == e ? void 0 : e.sort), (null == e ? void 0 : e.sort) && (Yr.sortParam = {
                            [Ou.Name]: s === Ou.Name ? 7 : 8,
                            [Ou.Date]: s === Ou.Date ? 9 : 10,
                            [Ou.Games]: s === Ou.Games ? 5 : 6
                        } [e.sort]);
                        const a = i.Z.generate(null != (t = null == e ? void 0 : e.source) ? t : Eu.MyCollections),
                            {
                                data: o
                            } = await r.Z.get(a, {
                                params: {
                                    tab: Gt.YOUR_COLLECTIONS,
                                    page: (null == e ? void 0 : e.page) || Yr.meta.currentPage,
                                    name: (null == e ? void 0 : e.search) || "",
                                    sort: Yr.sortParam
                                }
                            });
                        Object.assign(Yr.meta, o.meta), Yr.collections.reset(o.data), Yr.isLoadingCollections = !1
                    }

                    function toggleCollectionSelection(e, t, s) {
                        const a = Yr.selectedCollections.find(e.id),
                            o = (null == a ? void 0 : a.allGames) || Boolean(null == a ? void 0 : a.games.find((e => e.id === (null == t ? void 0 : t.id))));
                        if (isBoolean(s) ? s : !o) Yr.selectedCollections.update({
                            id: e.id,
                            allGames: !t,
                            games: t ? ((null == a ? void 0 : a.games) || []).concat({
                                id: t.id,
                                pgn: t.pgn
                            }) : [],
                            totalGamesCount: e.numberOfItems
                        });
                        else if (t) {
                            const s = (null == a ? void 0 : a.allGames) ? e.games.map((e => ({
                                id: e.id,
                                pgn: e.pgn
                            }))) : (null == a ? void 0 : a.games) || [];
                            Yr.selectedCollections.update({
                                id: e.id,
                                allGames: !1,
                                games: s.filter((e => e.id !== t.id)),
                                totalGamesCount: a.games.length
                            })
                        } else Yr.selectedCollections.remove(e.id)
                    }
                    var Au = (0, g.aZ)({
                            name: "CollectionItem",
                            components: {
                                Checkbox: ad,
                                CaretIcon: id
                            },
                            props: {
                                collection: {
                                    type: LibraryCollectionModel,
                                    required: !0
                                },
                                isSelected: {
                                    type: Boolean,
                                    required: !0
                                }
                            },
                            emits: ["expand-collection", "toggle-select-collection"],
                            computed: {
                                componentClasses() {
                                    return {
                                        [this.$style.component]: !0,
                                        [this.$style.empty]: this.isEmpty
                                    }
                                },
                                isEmpty() {
                                    return 0 === this.collection.numberOfItems
                                },
                                thumbnail() {
                                    return this.collection.customThumbnailUrl ? this.collection.customThumbnailUrl : this.collection.thumbnail ? function initThumbnailPath(e, t = 1) {
                                        if (!Yt.includes(e.replace(".png", ""))) return e;
                                        const s = `/bundles/web/images/library/collection-images/${e}`;
                                        return t > 1 ? (0, ua.q)(s, t) : s
                                    }(this.collection.thumbnail) : Gt.PLACEHOLDER_IMG
                                }
                            },
                            methods: {
                                onClickCollection() {
                                    this.isEmpty || this.$emit("expand-collection", {
                                        collection: this.collection
                                    })
                                },
                                onToggleSelectCollection() {
                                    this.$emit("toggle-select-collection", {
                                        collection: this.collection
                                    })
                                },
                                formatDate: e => _o.p6.long(new Date(e))
                            }
                        }),
                        Tu = {
                            component: "collection-item-component",
                            empty: "collection-item-empty",
                            thumbnail: "collection-item-thumbnail",
                            name: "collection-item-name",
                            expand: "collection-item-expand",
                            games: "collection-item-games",
                            date: "collection-item-date",
                            checkbox: "collection-item-checkbox"
                        };
                    var Mu = (0, ns.Z)(Au, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.componentClasses,
                                attrs: {
                                    "aria-label": e.$trans("Load Collection")
                                },
                                on: {
                                    click: e.onClickCollection
                                }
                            }, [s("img", {
                                class: e.$style.thumbnail,
                                attrs: {
                                    height: "24",
                                    width: "24",
                                    alt: e.collection.name,
                                    src: e.thumbnail
                                }
                            }), e._v(" "), s("span", {
                                class: e.$style.name,
                                domProps: {
                                    textContent: e._s(e.collection.name)
                                }
                            }), e._v(" "), s("div", {
                                class: e.$style.expand
                            }, [s("caret-icon", {
                                attrs: {
                                    small: "",
                                    flip: e.collection.isExpanded()
                                }
                            })], 1), e._v(" "), s("span", {
                                class: e.$style.games,
                                domProps: {
                                    textContent: e._s(e.collection.numberOfItems)
                                }
                            }), e._v(" "), s("span", {
                                class: e.$style.date,
                                domProps: {
                                    textContent: e._s(e.formatDate(e.collection.createTime))
                                }
                            }), e._v(" "), s("checkbox", {
                                class: e.$style.checkbox,
                                attrs: {
                                    id: "toggle-collection-" + e.collection.id,
                                    value: e.isSelected,
                                    disabled: e.isEmpty
                                },
                                on: {
                                    input: e.onToggleSelectCollection
                                }
                            })], 1)
                        }), [], !1, (function collection_item_injectStyles(e) {
                            this.$style = Tu.locals || Tu
                        }), null, null).exports,
                        Ru = s(3559),
                        Iu = (0, g.aZ)({
                            name: "LibrarySearchForm",
                            components: {
                                V5Select: ko.V5Select,
                                FormError: Ru.Z,
                                V5InputGroup: ko.V5InputGroup
                            },
                            props: {
                                search: {
                                    type: String,
                                    required: !0
                                },
                                source: {
                                    type: String,
                                    required: !0
                                }
                            },
                            emits: ["search-collection"],
                            data: () => ({
                                errorMessage: ""
                            }),
                            computed: {
                                sourceOptions() {
                                    return [{
                                        label: this.$trans("Your Collections"),
                                        value: Eu.MyCollections
                                    }, {
                                        label: this.$trans("Shared Collections"),
                                        value: Eu.SharedCollections
                                    }, {
                                        label: this.$trans("Bookmarked Collections"),
                                        value: Eu.MyBookmarks
                                    }, {
                                        label: this.$trans("Community Collections"),
                                        value: Eu.CommunityCollections
                                    }]
                                }
                            },
                            methods: {
                                onInputSearch(e) {
                                    this.isSearchInputValid(e) ? (this.errorMessage = "", this.$emit("search-collection", {
                                        search: e,
                                        source: this.source
                                    })) : this.errorMessage = Ft.SEARCH_EXCEPTION_MESSAGE
                                },
                                onInputSource(e) {
                                    this.$emit("search-collection", {
                                        search: this.search,
                                        source: e
                                    })
                                },
                                onClickReset() {
                                    this.$emit("search-collection", {
                                        search: "",
                                        source: Eu.MyCollections
                                    })
                                },
                                isSearchInputValid: e => 0 === e.length || e.length >= 3
                            }
                        }),
                        ju = {
                            component: "library-search-form-component",
                            reset: "library-search-form-reset",
                            error: "library-search-form-error"
                        };
                    var Bu = (0, ns.Z)(Iu, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.$style.component
                            }, [s("v5-select", {
                                class: e.$style.select,
                                attrs: {
                                    options: e.sourceOptions,
                                    value: e.source
                                },
                                on: {
                                    input: e.onInputSource
                                }
                            }), e._v(" "), s("v5-input-group", {
                                class: e.$style.input,
                                attrs: {
                                    required: "",
                                    type: "text",
                                    placeholder: e.$trans("Search for a Collection"),
                                    "icon-left": "magnifying-glass",
                                    value: e.search
                                },
                                on: {
                                    input: e.onInputSearch
                                }
                            }), e._v(" "), s("button", {
                                class: e.$style.reset,
                                domProps: {
                                    textContent: e._s(e.$trans("Reset"))
                                },
                                on: {
                                    click: function(t) {
                                        return t.preventDefault(), e.onClickReset.apply(null, arguments)
                                    }
                                }
                            }), e._v(" "), s("div", {
                                class: e.$style.error
                            }, [e.errorMessage.length > 0 ? s("form-error", {
                                domProps: {
                                    textContent: e._s(e.errorMessage)
                                }
                            }) : e._e()], 1)], 1)
                        }), [], !1, (function library_search_form_injectStyles(e) {
                            this.$style = ju.locals || ju
                        }), null, null),
                        Lu = Bu.exports,
                        Du = (0, g.aZ)({
                            name: "LoadFromLibrary",
                            components: {
                                AddGamesFooter: Od,
                                CollectionItem: Mu,
                                GameItem: dd,
                                GamePreview: hd,
                                LibrarySearchForm: Lu,
                                ListWithHeader: fd,
                                Pagination: $d.Z
                            },
                            props: {
                                boardId: {
                                    type: String,
                                    required: !0
                                },
                                collections: {
                                    type: Array,
                                    required: !0
                                },
                                currentSort: {
                                    type: String,
                                    required: !1
                                },
                                isLoading: {
                                    type: Boolean,
                                    required: !0
                                },
                                isSearching: {
                                    type: Boolean,
                                    required: !0
                                },
                                meta: {
                                    type: LibraryCollectionMetaModel,
                                    required: !0
                                },
                                previewGameId: {
                                    type: String,
                                    required: !1
                                },
                                search: {
                                    type: String,
                                    required: !0
                                },
                                selectedCollections: {
                                    type: Array,
                                    required: !0
                                },
                                selectedGamesCount: {
                                    type: Number,
                                    required: !0
                                },
                                source: {
                                    type: String,
                                    required: !0
                                }
                            },
                            emits: ["add-games", "change-page", "change-games-page", "expand-collection", "expand-game", "search-collection", "select-game", "sort-collections", "toggle-select-all-collections", "toggle-select-collection"],
                            data: () => ({
                                errorMessage: ""
                            }),
                            computed: {
                                emptyText() {
                                    if (this.collections.length) return "";
                                    if (this.isSearching) return this.$trans("No Collections found.");
                                    switch (this.source) {
                                        case Eu.MyCollections:
                                            return this.$trans("You have not created any Collections yet.");
                                        case Eu.MyBookmarks:
                                            return this.$trans("You have not bookmarked any Collections yet.");
                                        case Eu.SharedCollections:
                                            return this.$trans("You don't have any shared Collections yet.");
                                        case Eu.CommunityCollections:
                                            return this.$trans("No public Collections found.");
                                        default:
                                            return this.$trans("No Collections found.")
                                    }
                                },
                                headerColumns() {
                                    return [{
                                        label: "",
                                        className: this.$style["header-icon"]
                                    }, {
                                        label: this.$trans("Collection Name"),
                                        className: this.$style["header-name"],
                                        sort: Ou.Name
                                    }, {
                                        label: "",
                                        className: this.$style["header-expand"]
                                    }, {
                                        label: this.$trans("Games"),
                                        className: this.$style["header-games"],
                                        sort: Ou.Games
                                    }, {
                                        label: this.$trans("Created"),
                                        className: this.$style["header-date"],
                                        sort: Ou.Date
                                    }]
                                }
                            },
                            methods: {
                                isCollectionSelected(e) {
                                    const t = this.selectedCollections.find((t => t.id === e));
                                    return Boolean(null == t ? void 0 : t.allGames)
                                },
                                isCollectionGameSelected(e, t) {
                                    const s = this.selectedCollections.find((t => t.id === e));
                                    return Boolean((null == s ? void 0 : s.allGames) || (null == s ? void 0 : s.games.find((e => e.id === t))))
                                },
                                onClickAddGames(e) {
                                    this.$emit("add-games", e)
                                },
                                onToggleAllCollections(e) {
                                    this.$emit("toggle-select-all-collections", {
                                        isSelected: e
                                    })
                                },
                                onSelectGame(e, t) {
                                    this.$emit("select-game", {
                                        collection: e,
                                        game: t
                                    })
                                },
                                onExpandGame(e, t) {
                                    this.$emit("expand-game", {
                                        collection: e,
                                        game: t
                                    })
                                },
                                onChangeGamesPage(e) {
                                    return t => this.$emit("change-games-page", {
                                        collection: e,
                                        page: t
                                    })
                                }
                            }
                        }),
                        Uu = {
                            component: "load-from-library-component",
                            game: "load-from-library-game",
                            preview: "load-from-library-preview",
                            "header-icon": "load-from-library-header-icon",
                            "header-name": "load-from-library-header-name",
                            "header-expand": "load-from-library-header-expand",
                            "header-games": "load-from-library-header-games",
                            "header-date": "load-from-library-header-date",
                            "games-footer": "load-from-library-games-footer",
                            range: "load-from-library-range",
                            pagination: "load-from-library-pagination"
                        };
                    var zu = (0, ns.Z)(Du, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.$style.component
                            }, [s("library-search-form", {
                                attrs: {
                                    search: e.search,
                                    source: e.source
                                },
                                on: {
                                    "search-collection": function(t) {
                                        return e.$emit("search-collection", t)
                                    }
                                }
                            }), e._v(" "), s("list-with-header", {
                                attrs: {
                                    "scroll-anchor-id": "collection-scroll-anchor",
                                    "is-loading": e.isLoading,
                                    "empty-text": e.emptyText,
                                    "header-columns": e.headerColumns,
                                    "current-sort": e.currentSort
                                },
                                on: {
                                    "sort-list": function(t) {
                                        return e.$emit("sort-collections", t)
                                    },
                                    "select-all": e.onToggleAllCollections
                                }
                            }, [e._l(e.collections, (function(t) {
                                return [s("collection-item", {
                                    key: t.id,
                                    attrs: {
                                        collection: t,
                                        "is-selected": e.isCollectionSelected(t.id)
                                    },
                                    on: {
                                        "expand-collection": function(t) {
                                            return e.$emit("expand-collection", t)
                                        },
                                        "toggle-select-collection": function(t) {
                                            return e.$emit("toggle-select-collection", t)
                                        }
                                    }
                                }), e._v(" "), t.isExpanded() ? [e._l(t.games, (function(a) {
                                    return [s("game-item", {
                                        key: a.id,
                                        class: e.$style.game,
                                        attrs: {
                                            "black-name": a.blackPlayer.getName(),
                                            "black-rating": a.blackPlayer.rating,
                                            "black-title": a.blackPlayer.title,
                                            "game-id": a.id,
                                            icon: a.getTimeControlIcon(),
                                            "is-expanded": a.id === e.previewGameId,
                                            "is-selected": e.isCollectionGameSelected(t.id, a.id),
                                            result: a.getResult(),
                                            time: a.getTimeControlLabel(),
                                            "white-name": a.whitePlayer.getName(),
                                            "white-rating": a.whitePlayer.rating,
                                            "white-title": a.whitePlayer.title
                                        },
                                        on: {
                                            "expand-game": function(s) {
                                                return e.onExpandGame(t, a)
                                            },
                                            "select-game": function(s) {
                                                return e.onSelectGame(t, a)
                                            }
                                        }
                                    }), e._v(" "), a.id === e.previewGameId ? s("game-preview", {
                                        key: "preview-" + a.id,
                                        class: e.$style.preview,
                                        attrs: {
                                            "board-id": e.boardId
                                        }
                                    }) : e._e()]
                                })), e._v(" "), t.gamesMeta.getTotalPages() > 1 ? s("div", {
                                    key: "more-" + t.id,
                                    class: e.$style["games-footer"]
                                }, [s("div", {
                                    class: e.$style.range,
                                    domProps: {
                                        textContent: e._s(t.gamesMeta.getRange())
                                    }
                                }), e._v(" "), s("pagination", {
                                    class: e.$style.pagination,
                                    attrs: {
                                        "change-page": e.onChangeGamesPage(t),
                                        "current-page": t.gamesMeta.getCurrentPage(),
                                        "show-first-last-buttons": !1,
                                        "show-top-button": !1,
                                        "total-pages": t.gamesMeta.getTotalPages()
                                    }
                                })], 1) : e._e()] : e._e()]
                            }))], 2), e._v(" "), s("add-games-footer", {
                                attrs: {
                                    "scroll-to": "collection-scroll-anchor",
                                    "total-pages": e.meta.getTotalPages(),
                                    "current-page": e.meta.getCurrentPage(),
                                    "selected-games-count": e.selectedGamesCount
                                },
                                on: {
                                    "change-page": function(t) {
                                        return e.$emit("change-page", t)
                                    },
                                    "load-selected-games": e.onClickAddGames
                                }
                            })], 1)
                        }), [], !1, (function load_from_library_injectStyles(e) {
                            this.$style = Uu.locals || Uu
                        }), null, null).exports,
                        qu = (0, g.aZ)({
                            name: "LoadFromLibraryController",
                            components: {
                                LoadFromLibrary: zu
                            },
                            data: () => ({
                                search: "",
                                source: Eu.MyCollections
                            }),
                            computed: {
                                boardId: () => getActiveChessboardElementId(),
                                previewGameId: () => getGamePreviewId(),
                                meta: () => function getCollectionsMeta() {
                                    return Yr.meta
                                }(),
                                collections: () => function getCollections() {
                                    return Yr.collections
                                }(),
                                isSearching: () => function isSearchingCollections() {
                                    return Yr.isSearchingCollections
                                }(),
                                isLoading: () => function isLoadingCollections() {
                                    return Yr.isLoadingCollections
                                }(),
                                selectedCollections: () => function getCollectionSelections() {
                                    return Yr.selectedCollections
                                }(),
                                selectedGamesCount: () => function getSelectedGamesCount() {
                                    return Yr.selectedCollections.reduce(((e, t) => t.allGames ? e + t.totalGamesCount : e + t.games.length), 0)
                                }(),
                                currentSort: () => function getCollectionsSort() {
                                    return Yr.sort
                                }()
                            },
                            created() {
                                loadCollections()
                            },
                            beforeDestroy() {
                                clearGamePreview(), selectSetupBoardTab(Re.None),
                                    function clearCollectionSelection() {
                                        Yr.collections.reset(), Yr.selectedCollections.reset()
                                    }()
                            },
                            methods: {
                                onChangePage({
                                    page: e
                                }) {
                                    loadCollections({
                                        page: e,
                                        search: this.search,
                                        source: this.source
                                    })
                                },
                                onChangeGamesPage({
                                    collection: e,
                                    page: t
                                }) {
                                    loadCollectionGames(e, t)
                                },
                                collapseCollection(e) {
                                    e.isExpanded() && (this.previewGameId && e.games.includes(this.previewGameId) && clearGamePreview(), async function clearCollectionGames(e) {
                                        e.gamesMeta = null, e.games.reset()
                                    }(e))
                                },
                                onExpandCollection({
                                    collection: e
                                }) {
                                    e.isExpanded() ? this.collapseCollection(e) : (this.collections.forEach(this.collapseCollection), loadCollectionGames(e))
                                },
                                onExpandGame({
                                    game: e
                                }) {
                                    loadGamePreview(e)
                                },
                                onSelectGame({
                                    collection: e,
                                    game: t
                                }) {
                                    toggleCollectionSelection(e, t)
                                },
                                onToggleSelectCollection({
                                    collection: e
                                }) {
                                    toggleCollectionSelection(e)
                                },
                                onToggleSelectAllCollections({
                                    isSelected: e
                                }) {
                                    this.collections.forEach((t => {
                                        toggleCollectionSelection(t, null, e)
                                    }))
                                },
                                onSearchCollections({
                                    search: e,
                                    source: t
                                }) {
                                    this.search = e, this.source = t, loadCollections({
                                        search: this.search,
                                        source: this.source
                                    })
                                },
                                onAddGames() {
                                    addBoardsFromCollections(this.selectedCollections), showAddingBoards()
                                },
                                onSortCollections({
                                    column: e
                                }) {
                                    loadCollections({
                                        sort: e,
                                        search: this.search,
                                        source: this.source
                                    })
                                }
                            }
                        }),
                        Vu = (0, ns.Z)(qu, (function() {
                            var e = this,
                                t = e.$createElement;
                            return (e._self._c || t)("load-from-library", {
                                attrs: {
                                    "board-id": e.boardId,
                                    collections: e.collections,
                                    "is-loading": e.isLoading,
                                    "is-searching": e.isSearching,
                                    meta: e.meta,
                                    "preview-game-id": e.previewGameId,
                                    search: e.search,
                                    "selected-collections": e.selectedCollections,
                                    "selected-games-count": e.selectedGamesCount,
                                    "current-sort": e.currentSort,
                                    source: e.source
                                },
                                on: {
                                    "add-games": e.onAddGames,
                                    "change-page": e.onChangePage,
                                    "change-games-page": e.onChangeGamesPage,
                                    "expand-collection": e.onExpandCollection,
                                    "expand-game": e.onExpandGame,
                                    "search-collection": e.onSearchCollections,
                                    "select-game": e.onSelectGame,
                                    "sort-collections": e.onSortCollections,
                                    "toggle-select-all-collections": e.onToggleSelectAllCollections,
                                    "toggle-select-collection": e.onToggleSelectCollection
                                }
                            })
                        }), [], !1, null, null, null).exports;

                    function randomPreview() {
                        const e = Math.floor(Math.random() * Yt.length);
                        return `${Yt[e]}.png`
                    }
                    async function loadCollectionOptions() {
                        const e = getActiveRoom();
                        if (!e) return;
                        const t = [];
                        await forEachAsync(e.collectionIds, (async e => {
                            let s = Yr.collectionOptions.find(e);
                            if (!s) try {
                                s = await async function fetchSingleCollection(e) {
                                    const t = i.Z.generate("web_library_callback_single_collection", {
                                            uuid: e
                                        }),
                                        {
                                            data: {
                                                data: s
                                            }
                                        } = await r.Z.get(t);
                                    return s
                                }(e)
                            } catch (a) {}
                            s && t.push(s)
                        })), Yr.collectionOptions.reset(t)
                    }
                    async function create_collection_createCollection(e, t) {
                        if (! function isValidName(e) {
                                const t = e.trim().length;
                                return t >= Gt.TITLE_MINLENGTH && t <= Gt.TITLE_MAXLENGTH
                            }(t)) return void showError((0, V.dW)("Invalid collection name."));
                        Yr.isCreatingCollection = !0;
                        const {
                            data: s
                        } = await
                        function createCollection(e) {
                            return r.Z.post(Wt(), e)
                        }({
                            name: t,
                            thumbnail: randomPreview()
                        });
                        await updateSelectedCollectionId(e, s.id), await loadCollectionOptions(), Yr.isCreatingCollection = !1
                    }
                    async function loadExplorer(e) {
                        var t;
                        const s = getActiveRoom();
                        if (!s) return;
                        const a = getActiveChessboard(),
                            o = a.game.getSelectedNode(),
                            n = o ? o.moveNumber : -1,
                            r = a.game.getCurrentFullLine().slice(0, n + 1),
                            i = (null != (t = Ne().encodeTCN(r).match(/.{1,2}/g)) ? t : []).join("");
                        addBoard(s.id).then((() => {
                            a.game.load({
                                moves: i
                            }), a.game.selectLineEnd()
                        })), e && setExplorerSearch({
                            source: je.Other,
                            username: e.username
                        }), selectSetupBoardTab(Re.LoadFromExplorer), selectRoomTab(Me.Boards)
                    }

                    function getShareModalChessboard() {
                        return getChessboard(E)
                    }
                    var Nu = s(632);
                    const Zu = {
                            initialTab: Nu.z.Image,
                            shareUrl: window.location.href
                        },
                        Fu = {
                            options: Zu,
                            isVisible: !1
                        };
                    var Gu = Object.defineProperty,
                        Wu = Object.getOwnPropertySymbols,
                        Hu = Object.prototype.hasOwnProperty,
                        Yu = Object.prototype.propertyIsEnumerable,
                        show_share_modal_defNormalProp = (e, t, s) => t in e ? Gu(e, t, {
                            enumerable: !0,
                            configurable: !0,
                            writable: !0,
                            value: s
                        }) : e[t] = s,
                        show_share_modal_spreadValues = (e, t) => {
                            for (var s in t || (t = {})) Hu.call(t, s) && show_share_modal_defNormalProp(e, s, t[s]);
                            if (Wu)
                                for (var s of Wu(t)) Yu.call(t, s) && show_share_modal_defNormalProp(e, s, t[s]);
                            return e
                        };
                    var Ku = (0, g.aZ)({
                            name: "CounterBadge",
                            props: {
                                counter: {
                                    type: Number,
                                    required: !0
                                }
                            }
                        }),
                        Qu = {
                            component: "counter-badge-component"
                        };
                    var Ju = (0, ns.Z)(Ku, (function() {
                            var e = this,
                                t = e.$createElement;
                            return (e._self._c || t)("span", {
                                class: e.$style.component,
                                domProps: {
                                    textContent: e._s(e.counter)
                                }
                            })
                        }), [], !1, (function counter_badge_injectStyles(e) {
                            this.$style = Qu.locals || Qu
                        }), null, null).exports,
                        Xu = (0, g.aZ)({
                            name: "IconButton",
                            directives: {
                                tooltip: Sa.Z
                            },
                            props: {
                                icon: {
                                    type: String,
                                    required: !0
                                },
                                text: {
                                    type: String
                                },
                                off: {
                                    type: Boolean,
                                    default: !1
                                },
                                small: {
                                    type: Boolean,
                                    default: !1
                                },
                                disabled: {
                                    type: Boolean,
                                    default: !1
                                },
                                showText: {
                                    type: Boolean,
                                    default: !0
                                },
                                flipIcon: {
                                    type: Boolean,
                                    default: !1
                                },
                                tooltipContent: {
                                    type: String,
                                    defaut: ""
                                },
                                tooltipPosition: {
                                    type: String,
                                    default: "top"
                                }
                            },
                            emits: ["click", "mousedown", "mouseup"],
                            computed: {
                                componentClasses() {
                                    return {
                                        [this.$style.button]: !0,
                                        [this.$style.off]: this.off,
                                        [this.$style.small]: this.small,
                                        [this.$style.flip]: this.flipIcon
                                    }
                                },
                                tooltip() {
                                    return this.tooltipContent ? {
                                        content: this.tooltipContent,
                                        position: this.tooltipPosition
                                    } : this.text && !this.showText ? {
                                        content: this.text,
                                        position: this.tooltipPosition
                                    } : null
                                }
                            },
                            methods: {
                                onClick(e) {
                                    this.disabled || this.$emit("click", e)
                                }
                            }
                        }),
                        em = {
                            button: "icon-button-button",
                            text: "icon-button-text",
                            "classroom-icon": "icon-button-classroom-icon",
                            off: "icon-button-off",
                            small: "icon-button-small",
                            flip: "icon-button-flip"
                        };
                    var tm = (0, ns.Z)(Xu, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("button", {
                                directives: [{
                                    name: "tooltip",
                                    rawName: "v-tooltip",
                                    value: e.tooltip,
                                    expression: "tooltip"
                                }],
                                class: e.componentClasses,
                                attrs: {
                                    disabled: e.disabled
                                },
                                on: {
                                    click: e.onClick,
                                    mousedown: function(t) {
                                        return e.$emit("mousedown", t)
                                    },
                                    mouseup: function(t) {
                                        return e.$emit("mouseup", t)
                                    }
                                }
                            }, [s("span", {
                                staticClass: "icon-font-chess",
                                class: [e.$style["classroom-icon"], e.icon]
                            }), e._v(" "), e.showText && e.text ? s("span", {
                                class: e.$style.text,
                                domProps: {
                                    textContent: e._s(e.text)
                                }
                            }) : e._e(), e._v(" "), e._t("default")], 2)
                        }), [], !1, (function shared_icon_button_injectStyles(e) {
                            this.$style = em.locals || em
                        }), null, null).exports,
                        sm = (0, g.aZ)({
                            name: "BoardHeader",
                            components: {
                                CounterBadge: Ju,
                                IconButton: tm,
                                CaretIcon: id
                            },
                            props: {
                                canLoadGames: {
                                    type: Boolean,
                                    required: !0
                                },
                                room: {
                                    type: RoomModel,
                                    required: !0
                                },
                                isBoardsListVisible: {
                                    type: Boolean,
                                    required: !0
                                },
                                isOwner: {
                                    type: Boolean,
                                    required: !0
                                }
                            },
                            emits: ["add-board", "close-board", "toggle-boards-list"],
                            computed: {
                                componentClasses() {
                                    return {
                                        [this.$style.component]: !0,
                                        [this.$style.clickable]: this.isOwner
                                    }
                                },
                                boardsCount() {
                                    return this.room.boards.filter((e => !e.draft)).length
                                }
                            },
                            methods: {
                                onClickList(e) {
                                    this.isOwner && this.$emit("toggle-boards-list", e)
                                }
                            }
                        }),
                        am = {
                            component: "board-header-component",
                            clickable: "board-header-clickable",
                            toggle: "board-header-toggle",
                            caret: "board-header-caret",
                            counter: "board-header-counter"
                        };
                    var om = (0, ns.Z)(sm, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.componentClasses
                            }, [s("div", {
                                class: e.$style.toggle,
                                on: {
                                    click: e.onClickList
                                }
                            }, [s("span", {
                                class: e.$style.text,
                                domProps: {
                                    textContent: e._s(e.$trans("Game List"))
                                }
                            }), e._v(" "), s("counter-badge", {
                                class: e.$style.counter,
                                attrs: {
                                    counter: e.boardsCount
                                }
                            }), e._v(" "), e.isOwner ? s("caret-icon", {
                                class: e.$style.caret,
                                attrs: {
                                    flip: e.isBoardsListVisible
                                }
                            }) : e._e()], 1), e._v(" "), e.canLoadGames ? s("icon-button", {
                                class: e.$style.add,
                                attrs: {
                                    icon: "chess-board-plus",
                                    text: e.$trans("Add Games")
                                },
                                on: {
                                    click: function(t) {
                                        return e.$emit("add-board", t)
                                    }
                                }
                            }) : e._e()], 1)
                        }), [], !1, (function board_header_injectStyles(e) {
                            this.$style = am.locals || am
                        }), null, null).exports,
                        nm = (0, g.aZ)({
                            name: "GameDetailsIcon",
                            components: {
                                IconButton: tm,
                                CaretIcon: id
                            },
                            props: {
                                isGameDetailsVisible: {
                                    type: Boolean,
                                    default: !1
                                }
                            },
                            emits: ["show-game-details"]
                        }),
                        rm = {
                            component: "game-details-icon-component",
                            caret: "game-details-icon-caret"
                        };
                    var im = (0, ns.Z)(nm, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("icon-button", {
                                class: e.$style.component,
                                attrs: {
                                    icon: "circle-info"
                                },
                                on: {
                                    click: function(t) {
                                        return t.stopPropagation(), e.$emit("show-game-details")
                                    }
                                }
                            }, [s("caret-icon", {
                                class: e.$style.caret,
                                attrs: {
                                    flip: e.isGameDetailsVisible
                                }
                            })], 1)
                        }), [], !1, (function game_details_icon_injectStyles(e) {
                            this.$style = rm.locals || rm
                        }), null, null).exports,
                        lm = (0, g.aZ)({
                            name: "BoardEditableTitle",
                            directives: {
                                clickOutside: To
                            },
                            components: {
                                V5Input: ko.V5Input
                            },
                            props: {
                                board: {
                                    type: BoardModel,
                                    required: !0
                                },
                                isEditing: {
                                    type: Boolean,
                                    default: !1
                                }
                            },
                            emits: ["rename-board", "cancel-rename-board"],
                            data: () => ({
                                title: ""
                            }),
                            watch: {
                                isEditing() {
                                    this.isEditing && (this.title = this.board.getTitle(), this.$nextTick((() => {
                                        var e;
                                        null == (e = this.$el.querySelector("input")) || e.focus()
                                    })))
                                }
                            },
                            methods: {
                                onClickOutside() {
                                    this.$emit("cancel-rename-board")
                                },
                                onSubmit() {
                                    this.$emit("rename-board", {
                                        board: this.board,
                                        title: this.title
                                    })
                                }
                            }
                        }),
                        cm = {
                            input: "board-editable-title-input",
                            title: "board-editable-title-title"
                        };
                    var dm = (0, ns.Z)(lm, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return e.isEditing ? s("div", {
                                directives: [{
                                    name: "click-outside",
                                    rawName: "v-click-outside",
                                    value: e.onClickOutside,
                                    expression: "onClickOutside"
                                }],
                                class: e.$style.input,
                                on: {
                                    click: function(e) {
                                        e.stopPropagation()
                                    }
                                }
                            }, [s("v5-input", {
                                attrs: {
                                    name: "title"
                                },
                                on: {
                                    enter: e.onSubmit,
                                    blur: e.onSubmit
                                },
                                model: {
                                    value: e.title,
                                    callback: function(t) {
                                        e.title = t
                                    },
                                    expression: "title"
                                }
                            })], 1) : s("span", {
                                class: e.$style.title,
                                domProps: {
                                    textContent: e._s(e.board.getTitle())
                                }
                            })
                        }), [], !1, (function board_editable_title_injectStyles(e) {
                            this.$style = cm.locals || cm
                        }), null, null).exports,
                        um = (0, g.aZ)({
                            name: "BoardTitle",
                            components: {
                                IconButton: tm,
                                GameDetailsIcon: im,
                                BoardEditableTitle: dm
                            },
                            props: {
                                board: {
                                    type: BoardModel,
                                    required: !0
                                },
                                isOwner: {
                                    type: Boolean,
                                    required: !0
                                },
                                isGameDetailsVisible: {
                                    type: Boolean,
                                    default: !1
                                }
                            },
                            emits: ["click", "rename-board", "download-board", "show-game-details"],
                            data: () => ({
                                isEditing: !1
                            }),
                            methods: {
                                onRenameBoard(e) {
                                    this.isEditing = !1, this.$emit("rename-board", e)
                                },
                                onCancelRenameBoard() {
                                    this.isEditing = !1
                                },
                                onClick(e) {
                                    this.isOwner && this.$emit("click", e)
                                },
                                onClickEdit() {
                                    this.isEditing = !0
                                },
                                onClickDownload() {
                                    this.$emit("download-board", {
                                        board: this.board
                                    })
                                }
                            }
                        }),
                        mm = {
                            component: "board-title-component",
                            icon: "board-title-icon",
                            title: "board-title-title"
                        };
                    var hm = (0, ns.Z)(um, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.$style.component
                            }, [s("board-editable-title", {
                                class: e.$style.title,
                                attrs: {
                                    board: e.board,
                                    "is-editing": e.isEditing
                                },
                                on: {
                                    "rename-board": e.onRenameBoard,
                                    "cancel-rename-board": e.onCancelRenameBoard
                                }
                            }), e._v(" "), e.isOwner ? s("icon-button", {
                                class: e.$style.icon,
                                attrs: {
                                    icon: "square-pencil"
                                },
                                on: {
                                    click: function(t) {
                                        return t.stopPropagation(), e.onClickEdit.apply(null, arguments)
                                    }
                                }
                            }) : e._e(), e._v(" "), s("icon-button", {
                                class: e.$style.icon,
                                attrs: {
                                    icon: "download"
                                },
                                on: {
                                    click: function(t) {
                                        return t.stopPropagation(), e.onClickDownload.apply(null, arguments)
                                    }
                                }
                            }), e._v(" "), s("game-details-icon", {
                                class: e.$style.icon,
                                attrs: {
                                    "is-game-details-visible": e.isGameDetailsVisible
                                },
                                on: {
                                    "show-game-details": function(t) {
                                        return e.$emit("show-game-details")
                                    }
                                }
                            })], 1)
                        }), [], !1, (function board_title_injectStyles(e) {
                            this.$style = mm.locals || mm
                        }), null, null),
                        pm = hm.exports,
                        bm = (0, g.aZ)({
                            name: "GameDetailsPlayer",
                            components: {
                                V5Input: ko.V5Input,
                                V5Select: ko.V5Select,
                                Avatar: pa
                            },
                            props: {
                                player: {
                                    type: Object,
                                    required: !0
                                },
                                readOnly: {
                                    type: Boolean,
                                    required: !0
                                },
                                countryOptions: {
                                    type: Array,
                                    required: !0
                                }
                            },
                            emits: ["update-player"],
                            data() {
                                return {
                                    title: this.player.title,
                                    avatarUrl: this.player.avatarUrl,
                                    country: this.player.country
                                }
                            },
                            computed: {
                                titleOptions() {
                                    return [{
                                        value: "",
                                        label: `-- ${this.$trans("Title")} --`
                                    }, {
                                        value: "GM",
                                        label: "GM"
                                    }, {
                                        value: "IM",
                                        label: "IM"
                                    }, {
                                        value: "FM",
                                        label: "FM"
                                    }, {
                                        value: "WGM",
                                        label: "WGM"
                                    }, {
                                        value: "WIM",
                                        label: "WIM"
                                    }, {
                                        value: "WFM",
                                        label: "WFM"
                                    }, {
                                        value: "CM",
                                        label: "CM"
                                    }, {
                                        value: "WCM",
                                        label: "WCM"
                                    }, {
                                        value: "NM",
                                        label: "NM"
                                    }]
                                },
                                validAvatarUrl() {
                                    return this.avatarUrl && (0, N.jv)(this.avatarUrl) ? this.avatarUrl : null
                                }
                            },
                            watch: {
                                title: "onChange",
                                avatarUrl: "onChange",
                                country: "onChange"
                            },
                            methods: {
                                onChange() {
                                    this.$emit("update-player", {
                                        player: {
                                            avatarUrl: this.avatarUrl,
                                            country: this.country,
                                            title: this.title
                                        }
                                    })
                                }
                            }
                        }),
                        gm = {
                            component: "game-details-player-component",
                            avatar: "game-details-player-avatar",
                            fields: "game-details-player-fields",
                            select: "game-details-player-select"
                        };
                    var vm = (0, ns.Z)(bm, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.$style.component
                            }, [s("avatar", {
                                class: e.$style.avatar,
                                attrs: {
                                    width: "105",
                                    height: "105",
                                    src: e.validAvatarUrl
                                }
                            }), e._v(" "), s("div", {
                                class: e.$style.fields
                            }, [s("v5-select", {
                                class: e.$style.select,
                                attrs: {
                                    "value-key": "value",
                                    "aria-label": e.$trans("Title"),
                                    options: e.titleOptions,
                                    disabled: e.readOnly
                                },
                                model: {
                                    value: e.title,
                                    callback: function(t) {
                                        e.title = t
                                    },
                                    expression: "title"
                                }
                            }), e._v(" "), s("v5-select", {
                                class: e.$style.select,
                                attrs: {
                                    "value-key": "value",
                                    "aria-label": e.$trans("Country"),
                                    options: e.countryOptions,
                                    disabled: e.readOnly
                                },
                                model: {
                                    value: e.country,
                                    callback: function(t) {
                                        e.country = t
                                    },
                                    expression: "country"
                                }
                            }), e._v(" "), s("v5-input", {
                                class: e.$style.input,
                                attrs: {
                                    "aria-label": e.$trans("Avatar URL"),
                                    placeholder: e.$trans("Avatar URL"),
                                    disabled: e.readOnly
                                },
                                model: {
                                    value: e.avatarUrl,
                                    callback: function(t) {
                                        e.avatarUrl = t
                                    },
                                    expression: "avatarUrl"
                                }
                            })], 1)], 1)
                        }), [], !1, (function game_details_player_injectStyles(e) {
                            this.$style = gm.locals || gm
                        }), null, null).exports,
                        wm = (0, g.aZ)({
                            name: "GameDetails",
                            components: {
                                V5Button: ko.V5Button,
                                V5Input: ko.V5Input,
                                V5Select: ko.V5Select,
                                IconButton: tm,
                                GameDetailsPlayer: vm
                            },
                            directives: {
                                clickOutside: To,
                                datepicker: Tc
                            },
                            props: {
                                board: {
                                    type: BoardModel,
                                    required: !0
                                },
                                isOwner: {
                                    type: Boolean,
                                    required: !0
                                },
                                countryOptions: {
                                    type: Array,
                                    required: !0
                                }
                            },
                            emits: ["close-game-details", "save-game-details"],
                            data() {
                                return {
                                    readOnly: !0,
                                    headers: getPGNHeaders(this.board.pgn),
                                    whitePlayer: Object.assign({}, this.board.whitePlayer),
                                    blackPlayer: Object.assign({}, this.board.blackPlayer),
                                    isWhiteInfoVisible: !1,
                                    isBlackInfoVisible: !1
                                }
                            },
                            computed: {
                                result() {
                                    var e;
                                    return null != (e = this.headers.Result) ? e : "*"
                                },
                                resultOptions() {
                                    return [{
                                        label: this.$trans("No Result (*)"),
                                        value: "*"
                                    }, {
                                        label: this.$trans("White Won (1-0)"),
                                        value: "1-0"
                                    }, {
                                        label: this.$trans("Black Won (0-1)"),
                                        value: "0-1"
                                    }, {
                                        label: this.$trans("Draw (1/2-1/2)"),
                                        value: "1/2-1/2"
                                    }]
                                },
                                datepickerOptions() {
                                    return {
                                        onDateSelect: e => this.setHeader({
                                            Date: e
                                        }),
                                        format: "YYYY.MM.DD",
                                        placement: "left",
                                        replaceWith: "?"
                                    }
                                },
                                isChesscom() {
                                    return "Chess.com" === this.headers.Site
                                },
                                saveLabel() {
                                    return this.board.isSaving ? this.$trans("Saving...") : this.$trans("Save")
                                }
                            },
                            watch: {
                                "board.isSaving": function(e, t) {
                                    t && !e && (this.readOnly = !0)
                                }
                            },
                            methods: {
                                getHeader: e => "?" === e ? "" : htmlEncode(e),
                                setHeader(e) {
                                    Object.assign(this.headers, e)
                                },
                                onClick(e) {
                                    var t;
                                    "INPUT" === (null == (t = e.target) ? void 0 : t.nodeName) && this.isOwner && !this.isChesscom && this.onClickEdit()
                                },
                                onClickEdit() {
                                    this.readOnly = !1
                                },
                                onClickCancel() {
                                    this.readOnly = !0, this.headers = getPGNHeaders(this.board.pgn)
                                },
                                onClickSave() {
                                    this.$emit("save-game-details", {
                                        headers: this.headers,
                                        whitePlayer: this.whitePlayer,
                                        blackPlayer: this.blackPlayer
                                    })
                                },
                                onClickOutside() {
                                    this.$emit("close-game-details")
                                },
                                onClickWhiteInfo() {
                                    this.isWhiteInfoVisible = !this.isWhiteInfoVisible, this.isWhiteInfoVisible && !this.isChesscom && (this.readOnly = !1)
                                },
                                onClickBlackInfo() {
                                    this.isBlackInfoVisible = !this.isBlackInfoVisible, this.isBlackInfoVisible && !this.isChesscom && (this.readOnly = !1)
                                },
                                onUpdateWhitePlayer({
                                    player: e
                                }) {
                                    Object.assign(this.whitePlayer, e)
                                },
                                onUpdateBlackPlayer({
                                    player: e
                                }) {
                                    Object.assign(this.blackPlayer, e)
                                }
                            }
                        }),
                        fm = wm,
                        ym = {
                            component: "game-details-component",
                            controls: "game-details-controls",
                            source: "game-details-source",
                            datewrapper: "game-details-datewrapper",
                            date: "game-details-date",
                            disabled: "game-details-disabled",
                            button: "game-details-button",
                            normal: "game-details-normal",
                            short: "game-details-short",
                            wide: "game-details-wide",
                            icon: "game-details-icon",
                            buttons: "game-details-buttons",
                            chesscom: "game-details-chesscom",
                            info: "game-details-info"
                        };
                    var _m = (0, ns.Z)(fm, (function() {
                            var e, t, s = this,
                                a = s.$createElement,
                                o = s._self._c || a;
                            return o("div", {
                                directives: [{
                                    name: "click-outside",
                                    rawName: "v-click-outside",
                                    value: s.onClickOutside,
                                    expression: "onClickOutside"
                                }],
                                class: s.$style.component,
                                on: {
                                    click: s.onClick
                                }
                            }, [o("div", {
                                class: s.$style.controls
                            }, [o("v5-input", {
                                class: s.$style.normal,
                                attrs: {
                                    "aria-label": s.$trans("White Player"),
                                    placeholder: s.$trans("White Player"),
                                    value: s.getHeader(s.headers.White),
                                    disabled: s.readOnly
                                },
                                on: {
                                    input: function(e) {
                                        return s.setHeader({
                                            White: e
                                        })
                                    }
                                }
                            }), s._v(" "), o("icon-button", {
                                class: s.$style.info,
                                attrs: {
                                    icon: "circle-info"
                                },
                                on: {
                                    click: s.onClickWhiteInfo
                                }
                            }), s._v(" "), o("v5-input", {
                                class: s.$style.short,
                                attrs: {
                                    "aria-label": s.$trans("Rating"),
                                    placeholder: s.$trans("Rating"),
                                    value: s.getHeader(s.headers.WhiteElo),
                                    disabled: s.readOnly
                                },
                                on: {
                                    input: function(e) {
                                        return s.setHeader({
                                            WhiteElo: e
                                        })
                                    }
                                }
                            })], 1), s._v(" "), s.isWhiteInfoVisible ? o("game-details-player", {
                                attrs: {
                                    player: s.whitePlayer,
                                    "read-only": s.readOnly,
                                    "country-options": s.countryOptions
                                },
                                on: {
                                    "update-player": s.onUpdateWhitePlayer
                                }
                            }) : s._e(), s._v(" "), o("div", {
                                class: s.$style.controls
                            }, [o("v5-input", {
                                class: s.$style.normal,
                                attrs: {
                                    "aria-label": s.$trans("Black Player"),
                                    placeholder: s.$trans("Black Player"),
                                    value: s.getHeader(s.headers.Black),
                                    disabled: s.readOnly
                                },
                                on: {
                                    input: function(e) {
                                        return s.setHeader({
                                            Black: e
                                        })
                                    }
                                }
                            }), s._v(" "), o("icon-button", {
                                class: s.$style.info,
                                attrs: {
                                    icon: "circle-info"
                                },
                                on: {
                                    click: s.onClickBlackInfo
                                }
                            }), s._v(" "), o("v5-input", {
                                class: s.$style.short,
                                attrs: {
                                    "aria-label": s.$trans("Rating"),
                                    placeholder: s.$trans("Rating"),
                                    value: s.getHeader(s.headers.BlackElo),
                                    disabled: s.readOnly
                                },
                                on: {
                                    input: function(e) {
                                        return s.setHeader({
                                            BlackElo: e
                                        })
                                    }
                                }
                            })], 1), s._v(" "), s.isBlackInfoVisible ? o("game-details-player", {
                                attrs: {
                                    player: s.blackPlayer,
                                    "read-only": s.readOnly,
                                    "country-options": s.countryOptions
                                },
                                on: {
                                    "update-player": s.onUpdateBlackPlayer
                                }
                            }) : s._e(), s._v(" "), o("div", {
                                class: s.$style.controls
                            }, [o("v5-select", {
                                class: [s.$style.wide, s.$style.select, (e = {}, e[s.$style.disabled] = s.readOnly, e)],
                                attrs: {
                                    "value-key": "value",
                                    "aria-label": s.$trans("Results"),
                                    options: s.resultOptions,
                                    value: s.result,
                                    disabled: s.readOnly
                                },
                                on: {
                                    input: function(e) {
                                        return s.setHeader({
                                            Result: e
                                        })
                                    }
                                }
                            })], 1), s._v(" "), o("div", {
                                class: s.$style.controls
                            }, [o("v5-input", {
                                class: s.$style.wide,
                                attrs: {
                                    "aria-label": s.$trans("Event"),
                                    placeholder: s.$trans("Event"),
                                    value: s.getHeader(s.headers.Event),
                                    disabled: s.readOnly
                                },
                                on: {
                                    input: function(e) {
                                        return s.setHeader({
                                            Event: e
                                        })
                                    }
                                }
                            })], 1), s._v(" "), o("div", {
                                class: s.$style.controls
                            }, [o("v5-input", {
                                class: s.$style.wide,
                                attrs: {
                                    "aria-label": s.$trans("Time"),
                                    placeholder: s.$trans("Time Control"),
                                    value: s.getHeader(s.headers.TimeControl),
                                    disabled: s.readOnly
                                },
                                on: {
                                    input: function(e) {
                                        return s.setHeader({
                                            TimeControl: e
                                        })
                                    }
                                }
                            })], 1), s._v(" "), o("div", {
                                class: s.$style.controls
                            }, [o("v5-input", {
                                class: s.$style.wide,
                                attrs: {
                                    "aria-label": s.$trans("Termination"),
                                    placeholder: s.$trans("Termination"),
                                    value: s.getHeader(s.headers.Termination),
                                    disabled: s.readOnly
                                },
                                on: {
                                    input: function(e) {
                                        return s.setHeader({
                                            Termination: e
                                        })
                                    }
                                }
                            })], 1), s._v(" "), o("div", {
                                class: s.$style.controls
                            }, [o("v5-input", {
                                class: s.$style.wide,
                                attrs: {
                                    "aria-label": s.$trans("Location"),
                                    placeholder: s.$trans("Location"),
                                    value: s.getHeader(s.headers.Site),
                                    disabled: s.readOnly
                                },
                                on: {
                                    input: function(e) {
                                        return s.setHeader({
                                            Site: e
                                        })
                                    }
                                }
                            })], 1), s._v(" "), o("div", {
                                class: s.$style.controls
                            }, [o("v5-input", {
                                class: s.$style.short,
                                attrs: {
                                    "aria-label": s.$trans("Round"),
                                    placeholder: s.$trans("Round"),
                                    value: s.getHeader(s.headers.Round),
                                    disabled: s.readOnly
                                },
                                on: {
                                    input: function(e) {
                                        return s.setHeader({
                                            Round: e
                                        })
                                    }
                                }
                            }), s._v(" "), o("v5-input", {
                                class: s.$style.eco,
                                attrs: {
                                    "aria-label": "ECO",
                                    placeholder: "ECO",
                                    value: s.headers.ECO,
                                    disabled: s.readOnly
                                },
                                on: {
                                    input: function(e) {
                                        return s.setHeader({
                                            ECO: e
                                        })
                                    }
                                }
                            }), s._v(" "), o("div", {
                                class: s.$style.datewrapper
                            }, [o("v5-input", {
                                directives: [{
                                    name: "datepicker",
                                    rawName: "v-datepicker:click",
                                    value: s.datepickerOptions,
                                    expression: "datepickerOptions",
                                    arg: "click"
                                }],
                                class: [s.$style.date, (t = {}, t[s.$style.disabled] = s.readOnly, t)],
                                attrs: {
                                    "aria-label": s.$trans("Date"),
                                    placeholder: s.$trans("Date"),
                                    disabled: s.readOnly,
                                    value: s.headers.Date
                                }
                            }), s._v(" "), s.readOnly ? s._e() : o("button", {
                                directives: [{
                                    name: "datepicker",
                                    rawName: "v-datepicker:click",
                                    value: s.datepickerOptions,
                                    expression: "datepickerOptions",
                                    arg: "click"
                                }],
                                class: s.$style.button,
                                attrs: {
                                    type: "button",
                                    "aria-label": s.$trans("Show Calendar")
                                }
                            }, [o("span", {
                                staticClass: "icon-font-chess calendar",
                                class: s.$style.icon
                            })])], 1)], 1), s._v(" "), s.isOwner ? o("div", {
                                class: [s.$style.controls, s.$style.buttons]
                            }, [s.isChesscom ? o("span", {
                                class: s.$style.chesscom,
                                domProps: {
                                    textContent: s._s(s.$trans("Details cannot be edited for games played on %websiteName%", {
                                        "%websiteName%": "Chess.com"
                                    }))
                                }
                            }) : [s.readOnly ? o("v5-button", {
                                attrs: {
                                    size: "small"
                                },
                                domProps: {
                                    textContent: s._s(s.$trans("Edit"))
                                },
                                on: {
                                    click: s.onClickEdit
                                }
                            }) : s._e(), s._v(" "), s.readOnly ? s._e() : o("v5-button", {
                                attrs: {
                                    size: "small"
                                },
                                domProps: {
                                    textContent: s._s(s.$trans("Cancel"))
                                },
                                on: {
                                    click: s.onClickCancel
                                }
                            }), s._v(" "), s.readOnly ? s._e() : o("v5-button", {
                                attrs: {
                                    disabled: s.board.isSaving,
                                    size: "small",
                                    theme: "primary"
                                },
                                domProps: {
                                    textContent: s._s(s.saveLabel)
                                },
                                on: {
                                    click: s.onClickSave
                                }
                            })]], 2) : s._e()], 1)
                        }), [], !1, (function game_details_injectStyles(e) {
                            this.$style = ym.locals || ym
                        }), null, null).exports,
                        km = (0, g.aZ)({
                            name: "BoardMoves",
                            directives: {
                                tooltip: Sa.Z
                            },
                            components: {
                                V5Button: ko.V5Button,
                                BoardTitle: pm,
                                GameDetails: _m
                            },
                            props: {
                                board: {
                                    type: BoardModel,
                                    required: !0
                                },
                                boardId: {
                                    type: String,
                                    required: !0
                                },
                                countryOptions: {
                                    type: Array,
                                    required: !0
                                },
                                isOwner: {
                                    type: Boolean,
                                    required: !0
                                },
                                room: {
                                    type: RoomModel,
                                    required: !0
                                },
                                isMoveListVisible: {
                                    type: Boolean,
                                    required: !0
                                },
                                isEvaluationLinesVisible: {
                                    type: Boolean,
                                    required: !0
                                }
                            },
                            emits: ["click-explorer", "download-board", "rename-board", "save-game-details", "save-game"],
                            data: () => ({
                                isGameDetailsVisible: !1
                            }),
                            computed: {
                                isSaveVisible() {
                                    return Boolean(!this.room.autoSave && this.room.selectedCollectionId && this.isOwner)
                                }
                            },
                            methods: {
                                onShowGameDetails() {
                                    this.isGameDetailsVisible = !this.isGameDetailsVisible
                                },
                                onCloseGameDetails() {
                                    this.isGameDetailsVisible = !1
                                },
                                onClickOpening(e) {
                                    e.target.classList.contains("eco-opening-icon") && window.chesscom.features.includes("classroom_load_from_explorer") && (e.preventDefault(), this.$emit("click-explorer"))
                                }
                            }
                        }),
                        Cm = {
                            component: "board-moves-component",
                            title: "board-moves-title",
                            border: "board-moves-border",
                            moves: "board-moves-moves",
                            save: "board-moves-save"
                        };
                    var Sm = (0, ns.Z)(km, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.$style.component
                            }, [s("board-title", {
                                class: e.$style.title,
                                attrs: {
                                    board: e.board,
                                    "is-owner": e.isOwner,
                                    "is-game-details-visible": e.isGameDetailsVisible
                                },
                                on: {
                                    "show-game-details": e.onShowGameDetails,
                                    "download-board": function(t) {
                                        return e.$emit("download-board", t)
                                    },
                                    "rename-board": function(t) {
                                        return e.$emit("rename-board", t)
                                    }
                                }
                            }), e._v(" "), e.isGameDetailsVisible ? s("game-details", {
                                attrs: {
                                    board: e.board,
                                    "is-owner": e.isOwner,
                                    "country-options": e.countryOptions
                                },
                                on: {
                                    "close-game-details": e.onCloseGameDetails,
                                    "save-game-details": function(t) {
                                        return e.$emit("save-game-details", t)
                                    }
                                }
                            }) : [s("eco-opening", {
                                attrs: {
                                    "board-id": e.boardId,
                                    "explorer-is-clickable": "",
                                    "link-to-explorer": ""
                                },
                                on: {
                                    click: e.onClickOpening
                                }
                            }), e._v(" "), s("div", {
                                class: e.$style.border
                            }), e._v(" "), e.isEvaluationLinesVisible ? s("evaluation-lines", {
                                attrs: {
                                    "board-id": e.boardId
                                }
                            }) : e._e(), e._v(" "), s("div", {
                                class: e.$style.moves,
                                attrs: {
                                    id: "move-list"
                                }
                            }, [e.isMoveListVisible ? s("horizontal-move-list", {
                                attrs: {
                                    "scroll-container-id": "move-list",
                                    "board-id": e.boardId
                                }
                            }) : e._e()], 1), e._v(" "), e.isSaveVisible ? s("div", {
                                class: e.$style.save
                            }, [s("v5-button", {
                                attrs: {
                                    disabled: e.board.isSaving,
                                    size: "small",
                                    theme: "primary"
                                },
                                on: {
                                    click: function(t) {
                                        return e.$emit("save-game", t)
                                    }
                                }
                            }, [e._v("\n        " + e._s(e.board.isSaving ? e.$trans("Saving...") : e.$trans("Save")) + "\n      ")])], 1) : e._e()]], 2)
                        }), [], !1, (function board_moves_injectStyles(e) {
                            this.$style = Cm.locals || Cm
                        }), null, null).exports,
                        xm = (0, g.aZ)({
                            name: "RemoveBoards",
                            components: {
                                IconButton: tm,
                                ConfirmTray: Ni,
                                TransposeWithPosition: Gi
                            },
                            props: {
                                board: {
                                    type: BoardModel,
                                    required: !1
                                },
                                text: {
                                    type: String,
                                    required: !1
                                }
                            },
                            emits: ["close-board"],
                            data: () => ({
                                isConfirmVisible: !1
                            }),
                            computed: {
                                confirmText() {
                                    return this.board ? this.$trans("Remove this game?") : this.$trans("Remove all games?")
                                }
                            },
                            methods: {
                                onClickClose() {
                                    this.isConfirmVisible = !0
                                },
                                onCancelClose() {
                                    this.isConfirmVisible = !1
                                },
                                onConfirmClose() {
                                    this.isConfirmVisible = !1, this.$emit("close-board", {
                                        board: this.board
                                    })
                                }
                            }
                        }),
                        $m = {
                            confirm: "remove-boards-confirm"
                        };
                    var Pm = (0, ns.Z)(xm, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("icon-button", {
                                attrs: {
                                    icon: "trash",
                                    text: e.text
                                },
                                on: {
                                    click: function(t) {
                                        return t.stopPropagation(), e.onClickClose.apply(null, arguments)
                                    }
                                }
                            }, [e.isConfirmVisible ? s("transpose-with-position", {
                                attrs: {
                                    parent: e.$el
                                }
                            }, [s("confirm-tray", {
                                class: e.$style.confirm,
                                attrs: {
                                    "confirm-text": e.confirmText
                                },
                                on: {
                                    yes: e.onConfirmClose,
                                    no: e.onCancelClose
                                }
                            })], 1) : e._e()], 1)
                        }), [], !1, (function remove_boards_injectStyles(e) {
                            this.$style = $m.locals || $m
                        }), null, null),
                        Em = Pm.exports,
                        Om = (0, g.aZ)({
                            name: "BoardsListItem",
                            components: {
                                IconButton: tm,
                                RemoveBoards: Em,
                                BoardEditableTitle: dm
                            },
                            props: {
                                number: {
                                    type: Number,
                                    required: !0
                                },
                                board: {
                                    type: BoardModel,
                                    required: !0
                                },
                                isActive: {
                                    type: Boolean,
                                    default: !1
                                },
                                isOwner: {
                                    type: Boolean,
                                    required: !0
                                }
                            },
                            emits: ["click", "rename-board", "close-board", "download-board", "sort-boards"],
                            data: () => ({
                                isEditing: !1
                            }),
                            computed: {
                                componentClasses() {
                                    return {
                                        [this.$style.component]: !0,
                                        [this.$style.clickable]: this.isOwner,
                                        [this.$style.active]: Boolean(this.isActive)
                                    }
                                },
                                isDraggable() {
                                    return this.isOwner && !this.isEditing
                                }
                            },
                            methods: {
                                onRenameBoard(e) {
                                    this.isEditing = !1, this.$emit("rename-board", e)
                                },
                                onCancelRenameBoard() {
                                    this.isEditing = !1
                                },
                                onClick(e) {
                                    this.isOwner && this.$emit("click", e)
                                },
                                onClickEdit() {
                                    this.isEditing = !0
                                },
                                onClickDownload() {
                                    this.$emit("download-board", {
                                        board: this.board
                                    })
                                },
                                onDragStart(e) {
                                    e.dataTransfer && (e.dataTransfer.dropEffect = "move", e.dataTransfer.setData("text/plain", this.board.id))
                                },
                                onDrop(e) {
                                    var t;
                                    const s = null == (t = e.dataTransfer) ? void 0 : t.getData("text/plain");
                                    if (!s) return;
                                    const {
                                        top: a,
                                        bottom: o
                                    } = this.$el.getBoundingClientRect(), n = Math.abs(a - e.clientY) > Math.abs(o - e.clientY) ? "after" : "before";
                                    this.$emit("sort-boards", {
                                        boardId: s,
                                        placement: n,
                                        targetBoardId: this.board.id
                                    })
                                }
                            }
                        }),
                        Am = {
                            component: "boards-list-item-component",
                            active: "boards-list-item-active",
                            number: "boards-list-item-number",
                            title: "boards-list-item-title",
                            border: "boards-list-item-border",
                            "sort-icon": "boards-list-item-sort-icon",
                            "active-icon": "boards-list-item-active-icon",
                            "hover-text": "boards-list-item-hover-text",
                            clickable: "boards-list-item-clickable",
                            icon: "boards-list-item-icon"
                        };
                    var Tm = (0, ns.Z)(Om, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.componentClasses,
                                attrs: {
                                    draggable: e.isDraggable
                                },
                                on: {
                                    dragstart: e.onDragStart,
                                    dragenter: function(e) {
                                        e.preventDefault()
                                    },
                                    dragover: function(e) {
                                        e.preventDefault()
                                    },
                                    dragleave: function(e) {
                                        e.preventDefault()
                                    },
                                    drop: e.onDrop,
                                    click: e.onClick
                                }
                            }, [e.isActive ? s("span", {
                                staticClass: "icon-font-chess binoculars",
                                class: e.$style["active-icon"]
                            }) : s("span", {
                                staticClass: "icon-font-chess circle-3-dots",
                                class: e.$style["sort-icon"]
                            }), e._v(" "), s("span", {
                                class: e.$style.number,
                                domProps: {
                                    textContent: e._s(e.number + ".")
                                }
                            }), e._v(" "), s("board-editable-title", {
                                class: e.$style.title,
                                attrs: {
                                    board: e.board,
                                    "is-editing": e.isEditing
                                },
                                on: {
                                    "rename-board": e.onRenameBoard,
                                    "cancel-rename-board": e.onCancelRenameBoard
                                }
                            }), e._v(" "), s("span", {
                                class: e.$style["hover-text"],
                                domProps: {
                                    textContent: e._s(e.$trans("(Select to view)"))
                                }
                            }), e._v(" "), e.isOwner ? s("icon-button", {
                                class: e.$style.icon,
                                attrs: {
                                    icon: "square-pencil"
                                },
                                on: {
                                    click: function(t) {
                                        return t.stopPropagation(), e.onClickEdit.apply(null, arguments)
                                    }
                                }
                            }) : e._e(), e._v(" "), s("icon-button", {
                                class: e.$style.icon,
                                attrs: {
                                    icon: "download"
                                },
                                on: {
                                    click: function(t) {
                                        return t.stopPropagation(), e.onClickDownload.apply(null, arguments)
                                    }
                                }
                            }), e._v(" "), e.isOwner ? s("remove-boards", {
                                class: e.$style.icon,
                                attrs: {
                                    board: e.board
                                },
                                on: {
                                    "close-board": function(t) {
                                        return e.$emit("close-board", t)
                                    }
                                }
                            }) : e._e(), e._v(" "), s("div", {
                                class: e.$style.border
                            })], 1)
                        }), [], !1, (function boards_list_item_injectStyles(e) {
                            this.$style = Am.locals || Am
                        }), null, null),
                        Mm = Tm.exports,
                        Rm = (0, g.aZ)({
                            name: "SaveBoards",
                            components: {
                                DropdownMenu: Ui,
                                DropdownOption: Yi,
                                IconButton: tm,
                                TransposeWithPosition: Gi,
                                V5Button: ko.V5Button,
                                V5Select: ko.V5Select,
                                V5InputGroup: ko.V5InputGroup
                            },
                            props: {
                                room: {
                                    type: RoomModel,
                                    required: !0
                                },
                                collections: {
                                    type: Array,
                                    required: !0
                                },
                                isCreatingCollection: {
                                    type: Boolean,
                                    required: !0
                                }
                            },
                            emits: ["save-collection", "select-collection", "create-collection", "change-auto-save"],
                            data() {
                                return {
                                    isDropdownOpen: !1,
                                    isNewCollectionVisible: !1,
                                    newCollectionName: "",
                                    selectedCollectionId: this.room.selectedCollectionId,
                                    selectCollectionKey: 1
                                }
                            },
                            computed: {
                                collectionOptions() {
                                    return [{
                                        id: "NEW",
                                        name: this.newCollectionLabel
                                    }, ...this.collections]
                                },
                                newCollectionLabel() {
                                    return this.isCreatingCollection ? this.$trans("Creating collection...") : this.$trans("+ New Collection")
                                },
                                saveLabel() {
                                    return this.room.isSaving ? this.$trans("Saving...") : this.$trans("Save Now")
                                }
                            },
                            watch: {
                                "room.selectedCollectionId": function() {
                                    this.selectedCollectionId = this.room.selectedCollectionId
                                }
                            },
                            methods: {
                                onClickSave() {
                                    this.isDropdownOpen = !this.isDropdownOpen
                                },
                                onCloseMenu() {
                                    this.isDropdownOpen = !1
                                },
                                onSelectCollection(e) {
                                    this.selectedCollectionId = e, this.isNewCollectionVisible = "NEW" === e, this.isNewCollectionVisible || this.$emit("select-collection", {
                                        collectionId: e
                                    })
                                },
                                onToggleAutoSave() {
                                    this.$emit("change-auto-save", {
                                        isAutoSaveEnabled: !this.room.autoSave
                                    })
                                },
                                onCancelNewCollection() {
                                    this.clearNewCollection(), this.selectedCollectionId = this.room.selectedCollectionId
                                },
                                onCreateNewCollection() {
                                    this.$emit("create-collection", {
                                        name: this.newCollectionName
                                    }), this.clearNewCollection()
                                },
                                clearNewCollection() {
                                    this.isNewCollectionVisible = !1, this.newCollectionName = "", this.selectCollectionKey += 1
                                }
                            }
                        }),
                        Im = {
                            dropdown: "save-boards-dropdown",
                            select: "save-boards-select",
                            button: "save-boards-button",
                            "new-collection": "save-boards-new-collection",
                            input: "save-boards-input",
                            icon: "save-boards-icon",
                            submit: "save-boards-submit"
                        };
                    var jm = (0, ns.Z)(Rm, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("icon-button", {
                                attrs: {
                                    icon: "chess-board-folder",
                                    text: e.$trans("Save to Collection")
                                },
                                on: {
                                    click: function(t) {
                                        return t.stopPropagation(), e.onClickSave.apply(null, arguments)
                                    }
                                }
                            }, [e.isDropdownOpen ? s("transpose-with-position", {
                                attrs: {
                                    parent: e.$el
                                }
                            }, [s("dropdown-menu", {
                                class: e.$style.dropdown,
                                on: {
                                    "close-menu": e.onCloseMenu
                                }
                            }, [s("dropdown-option", {
                                attrs: {
                                    label: e.$trans("Where should we save?")
                                }
                            }, [s("v5-select", {
                                key: e.selectCollectionKey,
                                class: e.$style.select,
                                attrs: {
                                    "label-key": "name",
                                    "value-key": "id",
                                    icon: "caret-down",
                                    value: e.selectedCollectionId,
                                    options: e.collectionOptions,
                                    "placeholder-text": e.$trans("Select Collection")
                                },
                                on: {
                                    input: e.onSelectCollection
                                }
                            })], 1), e._v(" "), e.isNewCollectionVisible ? s("dropdown-option", {
                                attrs: {
                                    label: e.$trans("New Collection Name")
                                }
                            }, [s("div", {
                                class: e.$style["new-collection"]
                            }, [s("v5-input-group", {
                                ref: "input",
                                class: e.$style.input,
                                attrs: {
                                    "icon-right": "x",
                                    name: "newCollectionName"
                                },
                                on: {
                                    "icon-click-right": e.onCancelNewCollection,
                                    enter: e.onCreateNewCollection
                                },
                                model: {
                                    value: e.newCollectionName,
                                    callback: function(t) {
                                        e.newCollectionName = t
                                    },
                                    expression: "newCollectionName"
                                }
                            }), e._v(" "), s("span", {
                                staticClass: "icon-font-chess arrow-right",
                                class: [e.$style.icon, e.$style.submit],
                                on: {
                                    click: e.onCreateNewCollection
                                }
                            })], 1)]) : e._e(), e._v(" "), s("dropdown-option", {
                                attrs: {
                                    label: e.$trans("When should we save?")
                                }
                            }), e._v(" "), s("dropdown-option", {
                                attrs: {
                                    name: "autoSave",
                                    "show-switch": "",
                                    icon: "circle-gearwheel",
                                    label: e.$trans("Auto Save"),
                                    value: e.room.autoSave,
                                    info: e.$trans("Auto-save automatically saves game list edits over the collection you have selected when you leave the classroom")
                                },
                                on: {
                                    click: e.onToggleAutoSave
                                }
                            }), e._v(" "), s("dropdown-option", {
                                attrs: {
                                    icon: "circle-clock",
                                    label: e.saveLabel
                                }
                            }, [s("v5-button", {
                                class: e.$style.button,
                                attrs: {
                                    disabled: e.room.isSaving,
                                    size: "x-small"
                                },
                                domProps: {
                                    textContent: e._s(e.$trans("Ok"))
                                },
                                on: {
                                    click: function(t) {
                                        return e.$emit("save-collection", t)
                                    }
                                }
                            })], 1)], 1)], 1) : e._e()], 1)
                        }), [], !1, (function save_boards_injectStyles(e) {
                            this.$style = Im.locals || Im
                        }), null, null),
                        Bm = jm.exports,
                        Lm = (0, g.aZ)({
                            name: "BoardsList",
                            components: {
                                BoardsListItem: Mm,
                                RemoveBoards: Em,
                                SaveBoards: Bm
                            },
                            props: {
                                activeBoard: {
                                    type: BoardModel,
                                    required: !0
                                },
                                collections: {
                                    type: Array,
                                    required: !0
                                },
                                isOwner: {
                                    type: Boolean,
                                    required: !0
                                },
                                room: {
                                    type: RoomModel,
                                    required: !0
                                },
                                isCreatingCollection: {
                                    type: Boolean,
                                    required: !0
                                }
                            },
                            emits: ["change-auto-save", "close-all-boards", "close-board", "create-collection", "download-board", "rename-board", "save-collection", "select-board", "select-collection", "sort-boards"],
                            computed: {
                                boards() {
                                    return this.room.getSortedBoards()
                                }
                            },
                            mounted() {
                                this.scrollToActive()
                            },
                            methods: {
                                onClickSelect(e) {
                                    this.$emit("select-board", {
                                        board: e
                                    })
                                },
                                isActive(e) {
                                    return e.id === this.activeBoard.id
                                },
                                scrollToActive() {
                                    var e;
                                    null == (e = this.$el.querySelector("[data-active]")) || e.scrollIntoView()
                                }
                            }
                        }),
                        Dm = {
                            component: "boards-list-component",
                            list: "boards-list-list",
                            header: "boards-list-header",
                            icon: "boards-list-icon",
                            text: "boards-list-text"
                        };
                    var Um = (0, ns.Z)(Lm, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.$style.component
                            }, [e.isOwner ? s("div", {
                                class: e.$style.header
                            }, [s("span", {
                                class: e.$style.text,
                                domProps: {
                                    textContent: e._s(e.$trans("Select a game below"))
                                }
                            }), e._v(" "), s("save-boards", {
                                attrs: {
                                    collections: e.collections,
                                    room: e.room,
                                    "is-creating-collection": e.isCreatingCollection
                                },
                                on: {
                                    "save-collection": function(t) {
                                        return e.$emit("save-collection", t)
                                    },
                                    "create-collection": function(t) {
                                        return e.$emit("create-collection", t)
                                    },
                                    "select-collection": function(t) {
                                        return e.$emit("select-collection", t)
                                    },
                                    "change-auto-save": function(t) {
                                        return e.$emit("change-auto-save", t)
                                    }
                                }
                            }), e._v(" "), s("remove-boards", {
                                class: e.$style.icon,
                                attrs: {
                                    text: e.$trans("Clear List")
                                },
                                on: {
                                    "close-board": function(t) {
                                        return e.$emit("close-all-boards", t)
                                    }
                                }
                            })], 1) : e._e(), e._v(" "), s("div", {
                                class: e.$style.list
                            }, e._l(e.boards, (function(t, a) {
                                return s("boards-list-item", {
                                    key: t.id,
                                    attrs: {
                                        number: a + 1,
                                        "is-active": e.isActive(t),
                                        board: t,
                                        "is-owner": e.isOwner
                                    },
                                    on: {
                                        click: function(s) {
                                            return e.onClickSelect(t)
                                        },
                                        "sort-boards": function(t) {
                                            return e.$emit("sort-boards", t)
                                        },
                                        "download-board": function(t) {
                                            return e.$emit("download-board", t)
                                        },
                                        "rename-board": function(t) {
                                            return e.$emit("rename-board", t)
                                        },
                                        "close-board": function(t) {
                                            return e.$emit("close-board", t)
                                        }
                                    }
                                })
                            })), 1)])
                        }), [], !1, (function boards_list_injectStyles(e) {
                            this.$style = Dm.locals || Dm
                        }), null, null).exports,
                        zm = (0, g.aZ)({
                            name: "RoomBoardsTab",
                            components: {
                                BoardMoves: Sm,
                                BoardsList: Um,
                                BoardHeader: om
                            },
                            props: {
                                board: {
                                    type: BoardModel,
                                    required: !0
                                },
                                boardId: {
                                    type: String,
                                    required: !0
                                },
                                canLoadGames: {
                                    type: Boolean,
                                    required: !0
                                },
                                countryOptions: {
                                    type: Array,
                                    required: !0
                                },
                                collections: {
                                    type: Array,
                                    required: !0
                                },
                                isBoardsListVisible: {
                                    type: Boolean,
                                    required: !0
                                },
                                isOwner: {
                                    type: Boolean,
                                    required: !0
                                },
                                room: {
                                    type: RoomModel,
                                    required: !0
                                },
                                isMoveListVisible: {
                                    type: Boolean,
                                    required: !0
                                },
                                isEvaluationLinesVisible: {
                                    type: Boolean,
                                    required: !0
                                },
                                isCreatingCollection: {
                                    type: Boolean,
                                    required: !0
                                }
                            },
                            emits: ["add-board", "change-auto-save", "click-explorer", "close-all-boards", "close-board", "create-collection", "download-board", "rename-board", "save-collection", "save-game-details", "save-game", "select-board", "select-collection", "sort-boards", "toggle-boards-list"]
                        }),
                        qm = {
                            component: "room-boards-tab-component"
                        };
                    var Vm = (0, ns.Z)(zm, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.$style.component
                            }, [s("board-header", {
                                attrs: {
                                    "can-load-games": e.canLoadGames,
                                    room: e.room,
                                    "is-owner": e.isOwner,
                                    "is-boards-list-visible": e.isBoardsListVisible
                                },
                                on: {
                                    "add-board": function(t) {
                                        return e.$emit("add-board", t)
                                    },
                                    "toggle-boards-list": function(t) {
                                        return e.$emit("toggle-boards-list", t)
                                    }
                                }
                            }), e._v(" "), e.isBoardsListVisible ? s("boards-list", {
                                attrs: {
                                    "active-board": e.board,
                                    collections: e.collections,
                                    room: e.room,
                                    "is-owner": e.isOwner,
                                    "is-creating-collection": e.isCreatingCollection
                                },
                                on: {
                                    "sort-boards": function(t) {
                                        return e.$emit("sort-boards", t)
                                    },
                                    "download-board": function(t) {
                                        return e.$emit("download-board", t)
                                    },
                                    "close-all-boards": function(t) {
                                        return e.$emit("close-all-boards", t)
                                    },
                                    "save-collection": function(t) {
                                        return e.$emit("save-collection", t)
                                    },
                                    "create-collection": function(t) {
                                        return e.$emit("create-collection", t)
                                    },
                                    "select-collection": function(t) {
                                        return e.$emit("select-collection", t)
                                    },
                                    "change-auto-save": function(t) {
                                        return e.$emit("change-auto-save", t)
                                    },
                                    "rename-board": function(t) {
                                        return e.$emit("rename-board", t)
                                    },
                                    "close-board": function(t) {
                                        return e.$emit("close-board", t)
                                    },
                                    "select-board": function(t) {
                                        return e.$emit("select-board", t)
                                    }
                                }
                            }) : s("board-moves", {
                                attrs: {
                                    room: e.room,
                                    "is-owner": e.isOwner,
                                    board: e.board,
                                    "board-id": e.boardId,
                                    "country-options": e.countryOptions,
                                    "is-move-list-visible": e.isMoveListVisible,
                                    "is-evaluation-lines-visible": e.isEvaluationLinesVisible
                                },
                                on: {
                                    "click-explorer": function(t) {
                                        return e.$emit("click-explorer", t)
                                    },
                                    "save-game-details": function(t) {
                                        return e.$emit("save-game-details", t)
                                    },
                                    "save-game": function(t) {
                                        return e.$emit("save-game", t)
                                    },
                                    "rename-board": function(t) {
                                        return e.$emit("rename-board", t)
                                    },
                                    "close-board": function(t) {
                                        return e.$emit("close-board", t)
                                    },
                                    "download-board": function(t) {
                                        return e.$emit("download-board", t)
                                    }
                                }
                            })], 1)
                        }), [], !1, (function room_boards_tab_injectStyles(e) {
                            this.$style = qm.locals || qm
                        }), null, null).exports,
                        Nm = (0, g.aZ)({
                            name: "RoomBoardsTabController",
                            components: {
                                RoomBoardsTab: Vm
                            },
                            computed: {
                                collections: () => function getCollectionOptions() {
                                    return Yr.collectionOptions
                                }(),
                                isBoardsListVisible: () => function isBoardsListVisible() {
                                    return Ie.isBoardsListVisible
                                }(),
                                isSetupBoardVisible: () => isSetupBoardVisible(),
                                activeRoom: () => getActiveRoom(),
                                activeBoard: () => getActiveBoard(),
                                boardId: () => getActiveChessboardElementId(),
                                isOwner() {
                                    return isRoomOwner(this.activeRoom.id)
                                },
                                canLoadGames() {
                                    return canLoadGames(this.activeRoom.id)
                                },
                                isEvaluationLinesVisible: () => isEvaluationLinesVisible(),
                                isMoveListVisible: () => function isMoveListVisible() {
                                    const e = getActiveRoom();
                                    return !!e && !(e.coachOnly && !isRoomOwner(e.id)) && e.showMoveList
                                }(),
                                isCreatingCollection: () => function isCreatingCollection() {
                                    return Yr.isCreatingCollection
                                }(),
                                countryOptions: () => getCountryOptions()
                            },
                            mounted() {
                                this.isOwner && loadCollectionOptions()
                            },
                            methods: {
                                onToggleBoardsList() {
                                    toggleBoardsList()
                                },
                                onCloseBoard({
                                    board: e
                                }) {
                                    closeBoard(this.activeRoom.id, e.id)
                                },
                                async onSelectBoard({
                                    board: e
                                }) {
                                    await selectBoard(this.activeRoom.id, e.id), toggleBoardsList(!1)
                                },
                                onAddBoard() {
                                    addBoard(this.activeRoom.id), toggleBoardsList(!1)
                                },
                                onRenameBoard({
                                    board: e,
                                    title: t
                                }) {
                                    !async function renameBoard(e, t, s) {
                                        await publishBoardVersion({
                                            roomId: e,
                                            boardId: t,
                                            path: [D.Title],
                                            data: {
                                                title: s
                                            },
                                            method: "put"
                                        })
                                    }(this.activeRoom.id, e.id, t)
                                },
                                onDownloadBoard({
                                    board: e
                                }) {
                                    ! function loadShareModalChessboard(e) {
                                        const t = getShareModalChessboard();
                                        t.game.setOptions({
                                            flipped: e.flipped
                                        }), t.game.load({
                                            pgn: e.pgn,
                                            fen: (0, O.H)()
                                        })
                                    }(e), async function showShareModal(e = {}) {
                                        Fu.options = show_share_modal_spreadValues(show_share_modal_spreadValues({}, Fu.options), e), Fu.isVisible = !0
                                    }({
                                        initialTab: Nu.z.Pgn
                                    })
                                },
                                onChangeAutoSave({
                                    isAutoSaveEnabled: e
                                }) {
                                    updateAutoSave(this.activeRoom.id, e)
                                },
                                onSelectCollection({
                                    collectionId: e
                                }) {
                                    updateSelectedCollectionId(this.activeRoom.id, e)
                                },
                                onCreateCollection({
                                    name: e
                                }) {
                                    create_collection_createCollection(this.activeRoom.id, e)
                                },
                                onSaveGame() {
                                    saveBoardToCollection(this.activeRoom.id, this.activeBoard.id)
                                },
                                onSaveCollection() {
                                    saveRoomToCollection(this.activeRoom.id)
                                },
                                onCloseAllBoards() {
                                    !async function closeAllBoards(e) {
                                        const t = getRoom(e);
                                        if (!t) return;
                                        const s = getActiveBoard(t),
                                            a = t.boards.filter((e => e !== s));
                                        await forEachAsync(a, (async e => {
                                            await closeBoard(t.id, e.id)
                                        })), s && await closeBoard(t.id, s.id)
                                    }(this.activeRoom.id)
                                },
                                onSaveGameDetails(e) {
                                    !async function saveGameDetails(e, t, s) {
                                        const a = getRoom(e);
                                        if (!a) return;
                                        const o = a.boards.find(t);
                                        if (!o) return;
                                        o.isSaving = !0;
                                        const {
                                            headers: n,
                                            whitePlayer: r,
                                            blackPlayer: i
                                        } = s, l = Ne().pgnToJson(o.pgn, 0), c = Ne().generatePgn({
                                            moves: l.moves,
                                            headers: n
                                        });
                                        Object.assign(r, {
                                            name: n.White || "",
                                            rating: parseInt(n.WhiteElo || "", 10)
                                        }), Object.assign(i, {
                                            name: n.Black || "",
                                            rating: parseInt(n.BlackElo || "", 10)
                                        }), await updatePlayers(e, t, {
                                            whitePlayer: r,
                                            blackPlayer: i
                                        }), await publishBoardVersion({
                                            roomId: e,
                                            boardId: t,
                                            path: [D.Moves],
                                            data: {
                                                pgn: c,
                                                line: o.line,
                                                move: o.move
                                            },
                                            method: "put"
                                        }), o.isSaving = !1
                                    }(this.activeRoom.id, this.activeBoard.id, e)
                                },
                                onSortBoards({
                                    boardId: e,
                                    placement: t,
                                    targetBoardId: s
                                }) {
                                    !async function sortBoards(e, t) {
                                        var s, a;
                                        const o = getRoom(e);
                                        if (!o) return;
                                        const n = o.getSortedBoards(),
                                            r = n.findIndex((e => e.id === t.targetBoardId)),
                                            [i, l] = "before" === t.placement ? [r ? n[r - 1].sequence : 0, n[r].sequence] : [n[r].sequence, null != (a = null == (s = n[r + 1]) ? void 0 : s.sequence) ? a : o.getNextSequence()],
                                            c = (l - i) / 2 + i;
                                        await publishBoardVersion({
                                            roomId: e,
                                            boardId: t.boardId,
                                            path: [D.Sequence],
                                            data: {
                                                sequence: c
                                            },
                                            method: "put"
                                        })
                                    }(this.activeRoom.id, {
                                        boardId: e,
                                        placement: t,
                                        targetBoardId: s
                                    })
                                },
                                onClickExplorer() {
                                    loadExplorer()
                                }
                            }
                        }),
                        Zm = Nm,
                        Fm = (0, ns.Z)(Zm, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return e.activeBoard ? s("room-boards-tab", {
                                attrs: {
                                    "board-id": e.boardId,
                                    board: e.activeBoard,
                                    "can-load-games": e.canLoadGames,
                                    collections: e.collections,
                                    "country-options": e.countryOptions,
                                    "is-boards-list-visible": e.isBoardsListVisible,
                                    "is-creating-collection": e.isCreatingCollection,
                                    "is-evaluation-lines-visible": e.isEvaluationLinesVisible,
                                    "is-move-list-visible": e.isMoveListVisible,
                                    "is-owner": e.isOwner,
                                    room: e.activeRoom
                                },
                                on: {
                                    "add-board": e.onAddBoard,
                                    "change-auto-save": e.onChangeAutoSave,
                                    "click-explorer": e.onClickExplorer,
                                    "close-all-boards": e.onCloseAllBoards,
                                    "close-board": e.onCloseBoard,
                                    "create-collection": e.onCreateCollection,
                                    "download-board": e.onDownloadBoard,
                                    "rename-board": e.onRenameBoard,
                                    "save-collection": e.onSaveCollection,
                                    "save-game-details": e.onSaveGameDetails,
                                    "save-game": e.onSaveGame,
                                    "select-board": e.onSelectBoard,
                                    "select-collection": e.onSelectCollection,
                                    "sort-boards": e.onSortBoards,
                                    "toggle-boards-list": e.onToggleBoardsList
                                }
                            }) : e._e()
                        }), [], !1, null, null, null).exports,
                        Gm = (0, g.aZ)({
                            name: "RoomContent"
                        }),
                        Wm = {
                            component: "room-content-component"
                        };
                    var Hm = (0, ns.Z)(Gm, (function() {
                            var e = this,
                                t = e.$createElement;
                            return (e._self._c || t)("div", {
                                class: e.$style.component
                            }, [e._t("default")], 2)
                        }), [], !1, (function room_content_injectStyles(e) {
                            this.$style = Wm.locals || Wm
                        }), null, null).exports,
                        Ym = (0, g.aZ)({
                            name: "AudioButton",
                            components: {
                                IconButton: tm
                            },
                            props: {
                                isOwner: {
                                    type: Boolean,
                                    required: !0
                                },
                                userId: {
                                    type: String,
                                    required: !0
                                },
                                currentUserId: {
                                    type: String,
                                    required: !0
                                },
                                room: {
                                    type: RoomModel,
                                    required: !0
                                },
                                videoRoom: {
                                    type: VideoRoomModel,
                                    required: !1
                                },
                                tooltipPosition: {
                                    type: String,
                                    default: "top"
                                }
                            },
                            emits: ["toggle-audio"],
                            computed: {
                                isAudioEnabled() {
                                    var e, t, s;
                                    return this.userId === this.currentUserId ? Boolean((null == (e = this.videoRoom) ? void 0 : e.isAudioEnabled()) || (null == (t = this.videoRoom) ? void 0 : t.isAudioStarting())) : Boolean(null == (s = this.videoRoom) ? void 0 : s.userHasAudio(this.userId))
                                },
                                isSpeaking() {
                                    var e;
                                    return this.userId === this.currentUserId && Boolean(null == (e = this.videoRoom) ? void 0 : e.isSpeaking)
                                },
                                isMuted() {
                                    return this.room.audioMuteAll && !this.isOwner
                                },
                                buttonText() {
                                    return this.isMuted ? this.$trans("Audio muted by Coach") : this.canToggle ? this.isAudioEnabled ? this.$trans("Mute") : this.$trans("Unmute") : this.isAudioEnabled ? this.$trans("Unmute") : this.$trans("Muted")
                                },
                                canToggle() {
                                    return this.isOwner ? this.userId === this.currentUserId || this.isAudioEnabled : this.userId === this.currentUserId && !this.isMuted
                                }
                            },
                            methods: {
                                onClick() {
                                    var e;
                                    this.userId === this.currentUserId && (null == (e = this.videoRoom) ? void 0 : e.isAudioStarting()) || this.$emit("toggle-audio", {
                                        room: this.room,
                                        userId: this.userId,
                                        enabled: !this.isAudioEnabled
                                    })
                                }
                            }
                        }),
                        Km = {
                            speaking: "audio-button-speaking",
                            "pulse-speaker": "audio-button-pulse-speaker"
                        };
                    var Qm = (0, ns.Z)(Ym, (function() {
                            var e, t = this,
                                s = t.$createElement;
                            return (t._self._c || s)("icon-button", {
                                class: (e = {}, e[t.$style.speaking] = t.isSpeaking, e),
                                attrs: {
                                    icon: t.isAudioEnabled ? "sound-on" : "sound-off",
                                    off: !t.isAudioEnabled,
                                    disabled: !t.canToggle,
                                    text: t.buttonText,
                                    "show-text": !1,
                                    "tooltip-position": t.tooltipPosition
                                },
                                on: {
                                    click: t.onClick
                                }
                            })
                        }), [], !1, (function audio_button_injectStyles(e) {
                            this.$style = Km.locals || Km
                        }), null, null).exports,
                        Jm = (0, g.aZ)({
                            name: "TimerInput",
                            components: {},
                            props: {
                                max: {
                                    type: [Number, String],
                                    required: !0
                                },
                                name: {
                                    type: String,
                                    required: !0
                                }
                            },
                            emits: ["input"],
                            data: () => ({
                                value: 0
                            }),
                            watch: {
                                value() {
                                    const e = Number(this.max);
                                    this.value > e && (this.value = e), this.$emit("input", this.value)
                                }
                            }
                        }),
                        Xm = {
                            input: "timer-input-input"
                        };
                    var eh = (0, ns.Z)(Jm, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.$style.component
                            }, [s("input", {
                                directives: [{
                                    name: "model",
                                    rawName: "v-model.number",
                                    value: e.value,
                                    expression: "value",
                                    modifiers: {
                                        number: !0
                                    }
                                }],
                                staticClass: "ui_v5-input-component",
                                class: e.$style.input,
                                attrs: {
                                    type: "number",
                                    autocomplete: "off",
                                    maxlength: "2",
                                    min: "0",
                                    step: "1",
                                    max: e.max,
                                    name: e.name
                                },
                                domProps: {
                                    value: e.value
                                },
                                on: {
                                    input: function(t) {
                                        t.target.composing || (e.value = e._n(t.target.value))
                                    },
                                    blur: function(t) {
                                        return e.$forceUpdate()
                                    }
                                }
                            })])
                        }), [], !1, (function timer_input_injectStyles(e) {
                            this.$style = Xm.locals || Xm
                        }), null, null).exports,
                        th = (0, g.aZ)({
                            name: "ClockTimer",
                            components: {
                                TimerInput: eh,
                                V5Button: ko.V5Button
                            },
                            props: {
                                room: {
                                    type: RoomModel,
                                    required: !0
                                }
                            },
                            emits: ["set-clock"],
                            data: () => ({
                                hours: "00",
                                minutes: "00",
                                seconds: "00"
                            }),
                            methods: {
                                onClickSet() {
                                    this.$emit("set-clock", {
                                        type: Z.Timer,
                                        duration: `PT${this.hours}H${this.minutes}M${this.seconds}S`,
                                        state: K.Stopped
                                    })
                                }
                            }
                        }),
                        sh = {
                            component: "clock-timer-component",
                            field: "clock-timer-field",
                            separator: "clock-timer-separator",
                            label: "clock-timer-label",
                            input: "clock-timer-input",
                            button: "clock-timer-button"
                        };
                    var ah = (0, ns.Z)(th, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.$style.component,
                                on: {
                                    click: function(e) {
                                        e.stopPropagation()
                                    }
                                }
                            }, [s("div", {
                                class: e.$style.field
                            }, [s("label", {
                                class: e.$style.label,
                                domProps: {
                                    textContent: e._s(e.$trans("Hr"))
                                }
                            }), e._v(" "), s("timer-input", {
                                attrs: {
                                    max: "99",
                                    name: "hours"
                                },
                                model: {
                                    value: e.hours,
                                    callback: function(t) {
                                        e.hours = t
                                    },
                                    expression: "hours"
                                }
                            })], 1), e._v(" "), s("div", {
                                class: e.$style.separator,
                                domProps: {
                                    textContent: e._s(":")
                                }
                            }), e._v(" "), s("div", {
                                class: e.$style.field
                            }, [s("label", {
                                class: e.$style.label,
                                domProps: {
                                    textContent: e._s(e.$trans("Min"))
                                }
                            }), e._v(" "), s("timer-input", {
                                attrs: {
                                    max: "59",
                                    name: "minutes"
                                },
                                model: {
                                    value: e.minutes,
                                    callback: function(t) {
                                        e.minutes = t
                                    },
                                    expression: "minutes"
                                }
                            })], 1), e._v(" "), s("div", {
                                class: e.$style.separator,
                                domProps: {
                                    textContent: e._s(":")
                                }
                            }), e._v(" "), s("div", {
                                class: e.$style.field
                            }, [s("label", {
                                class: e.$style.label,
                                domProps: {
                                    textContent: e._s(e.$trans("Sec"))
                                }
                            }), e._v(" "), s("timer-input", {
                                attrs: {
                                    max: "59",
                                    name: "seconds"
                                },
                                model: {
                                    value: e.seconds,
                                    callback: function(t) {
                                        e.seconds = t
                                    },
                                    expression: "seconds"
                                }
                            })], 1), e._v(" "), s("v5-button", {
                                class: e.$style.button,
                                on: {
                                    click: e.onClickSet
                                }
                            }, [e._v("\n    " + e._s(e.$trans("Set")) + "\n  ")])], 1)
                        }), [], !1, (function clock_timer_injectStyles(e) {
                            this.$style = sh.locals || sh
                        }), null, null).exports,
                        oh = (0, g.aZ)({
                            name: "ClockSetup",
                            directives: {
                                clickOutside: To
                            },
                            components: {
                                IconButton: tm,
                                DropdownMenu: Ui,
                                DropdownOption: Yi,
                                ClockTimer: ah,
                                ClockText: wa,
                                TransposeWithPosition: Gi
                            },
                            props: {
                                isOwner: {
                                    type: Boolean,
                                    required: !0
                                },
                                currentTime: {
                                    type: Date,
                                    required: !0
                                },
                                room: {
                                    type: RoomModel,
                                    required: !0
                                }
                            },
                            emits: ["set-clock"],
                            data: () => ({
                                isMenuVisible: !1
                            }),
                            computed: {
                                clockStateIcon() {
                                    return this.room.isClockRunning() ? "pause" : this.room.isClockUnset(this.currentTime) ? "circle-gearwheel" : "play"
                                },
                                options() {
                                    return [{
                                        key: Z.CurrentTime,
                                        label: this.$trans("Current Time"),
                                        checked: this.room.clockType === Z.CurrentTime
                                    }, {
                                        key: Z.RoomTime,
                                        label: this.$trans("Room Time"),
                                        checked: this.room.clockType === Z.RoomTime
                                    }, {
                                        key: Z.Timer,
                                        label: this.$trans("Timer"),
                                        checked: this.room.clockType === Z.Timer
                                    }, {
                                        key: Z.Stopwatch,
                                        label: this.$trans("Stopwatch"),
                                        checked: this.room.clockType === Z.Stopwatch
                                    }]
                                },
                                isPlayPauseVisible() {
                                    return this.isOwner && (this.room.clockType === Z.Stopwatch || this.room.clockType === Z.Timer)
                                },
                                isResetVisible() {
                                    return this.isOwner && this.room.clockType === Z.Stopwatch
                                }
                            },
                            methods: {
                                isTimer(e) {
                                    return e.key === Z.Timer && this.room.clockType === Z.Timer
                                },
                                onClickClock() {
                                    this.isMenuVisible = this.isOwner && !this.isMenuVisible
                                },
                                onClickOption(e) {
                                    this.$emit("set-clock", {
                                        type: e.key
                                    }), this.isMenuVisible = e.key === Z.Timer
                                },
                                onSetClockState() {
                                    this.room.isClockUnset(this.currentTime) ? this.onClickClock() : this.$emit("set-clock", {
                                        state: this.room.isClockRunning() ? K.Stopped : K.Started
                                    })
                                },
                                onSetClockTimer(e) {
                                    this.$emit("set-clock", e), this.isMenuVisible = !1
                                },
                                onResetClock() {
                                    this.isResetVisible && this.room.stopwatch.state !== K.Ended && this.$emit("set-clock", {
                                        state: K.Ended,
                                        duration: "PT0S"
                                    })
                                },
                                onClickOutsideMenu() {
                                    this.isMenuVisible = !1
                                }
                            }
                        }),
                        nh = {
                            component: "clock-setup-component",
                            clock: "clock-setup-clock",
                            dropdown: "clock-setup-dropdown"
                        };
                    var rh = (0, ns.Z)(oh, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.$style.component
                            }, [s("icon-button", {
                                attrs: {
                                    icon: "circle-clock",
                                    disabled: !e.isOwner
                                },
                                on: {
                                    click: e.onClickClock
                                }
                            }), e._v(" "), s("clock-text", {
                                class: e.$style.clock,
                                attrs: {
                                    "current-time": e.currentTime,
                                    room: e.room
                                },
                                on: {
                                    click: e.onClickClock
                                }
                            }), e._v(" "), e.isPlayPauseVisible ? s("icon-button", {
                                attrs: {
                                    small: "",
                                    icon: e.clockStateIcon
                                },
                                on: {
                                    click: e.onSetClockState
                                }
                            }) : e._e(), e._v(" "), e.isResetVisible ? s("icon-button", {
                                attrs: {
                                    small: "",
                                    icon: "undo"
                                },
                                on: {
                                    click: e.onResetClock
                                }
                            }) : e._e(), e._v(" "), e.isMenuVisible ? s("transpose-with-position", {
                                attrs: {
                                    parent: e.$el
                                }
                            }, [s("dropdown-menu", {
                                directives: [{
                                    name: "click-outside",
                                    rawName: "v-click-outside",
                                    value: e.onClickOutsideMenu,
                                    expression: "onClickOutsideMenu"
                                }],
                                class: e.$style.dropdown
                            }, e._l(e.options, (function(t) {
                                return s("dropdown-option", {
                                    key: t.key,
                                    attrs: {
                                        label: t.label,
                                        checked: t.checked
                                    },
                                    on: {
                                        click: function(s) {
                                            return e.onClickOption(t)
                                        }
                                    }
                                }, [e.isTimer(t) ? s("clock-timer", {
                                    attrs: {
                                        room: e.room
                                    },
                                    on: {
                                        "set-clock": e.onSetClockTimer
                                    }
                                }) : e._e()], 1)
                            })), 1)], 1) : e._e()], 1)
                        }), [], !1, (function clock_setup_injectStyles(e) {
                            this.$style = nh.locals || nh
                        }), null, null).exports,
                        ih = (0, g.aZ)({
                            name: "VideoButton",
                            components: {
                                IconButton: tm
                            },
                            props: {
                                isOwner: {
                                    type: Boolean,
                                    required: !0
                                },
                                userId: {
                                    type: String,
                                    required: !0
                                },
                                currentUserId: {
                                    type: String,
                                    required: !0
                                },
                                room: {
                                    type: RoomModel,
                                    required: !0
                                },
                                videoRoom: {
                                    type: VideoRoomModel,
                                    required: !1
                                },
                                tooltipPosition: {
                                    type: String,
                                    default: "top"
                                }
                            },
                            emits: ["toggle-video"],
                            computed: {
                                isVideoEnabled() {
                                    var e, t, s;
                                    return this.userId === this.currentUserId ? Boolean((null == (e = this.videoRoom) ? void 0 : e.isVideoEnabled()) || (null == (t = this.videoRoom) ? void 0 : t.isVideoStarting())) : Boolean(null == (s = this.videoRoom) ? void 0 : s.userHasVideo(this.userId))
                                },
                                isMuted() {
                                    return this.room.videoMuteAll && !this.isOwner
                                },
                                buttonText() {
                                    return this.isMuted ? this.$trans("Video disabled by Coach") : this.canToggle ? this.isVideoEnabled ? this.$trans("Stop Video") : this.$trans("Start Video") : this.isVideoEnabled ? this.$trans("Video On") : this.$trans("Video Off")
                                },
                                canToggle() {
                                    return this.isOwner ? this.userId === this.currentUserId || this.isVideoEnabled : this.userId === this.currentUserId && !this.isMuted
                                }
                            },
                            methods: {
                                onClick() {
                                    var e;
                                    this.userId === this.currentUserId && (null == (e = this.videoRoom) ? void 0 : e.isVideoStarting()) || this.$emit("toggle-video", {
                                        room: this.room,
                                        userId: this.userId,
                                        enabled: !this.isVideoEnabled
                                    })
                                }
                            }
                        }),
                        lh = (0, ns.Z)(ih, (function() {
                            var e = this,
                                t = e.$createElement;
                            return (e._self._c || t)("icon-button", {
                                attrs: {
                                    icon: e.isVideoEnabled ? "camera-on" : "camera-off",
                                    off: !e.isVideoEnabled,
                                    disabled: !e.canToggle,
                                    text: e.buttonText,
                                    "show-text": !1,
                                    "tooltip-position": e.tooltipPosition
                                },
                                on: {
                                    click: e.onClick
                                }
                            })
                        }), [], !1, null, null, null).exports,
                        ch = (0, g.aZ)({
                            name: "RoomControls",
                            components: {
                                AudioButton: Qm,
                                IconButton: tm,
                                ClockSetup: rh,
                                VideoButton: lh
                            },
                            props: {
                                currentTime: {
                                    type: Date,
                                    required: !0
                                },
                                currentUser: {
                                    type: Object,
                                    required: !0
                                },
                                isVideosPinned: {
                                    type: Boolean,
                                    required: !0
                                },
                                isOwner: {
                                    type: Boolean,
                                    required: !0
                                },
                                room: {
                                    type: RoomModel,
                                    required: !0
                                },
                                videoRoom: {
                                    type: VideoRoomModel,
                                    required: !1
                                }
                            },
                            emits: ["set-clock", "toggle-audio", "toggle-video", "toggle-pin-videos"],
                            data: () => ({
                                RoomTab: Me
                            })
                        }),
                        dh = {
                            controls: "room-controls-controls",
                            button: "room-controls-button",
                            speaking: "room-controls-speaking",
                            "pulse-speaker": "room-controls-pulse-speaker"
                        };
                    var uh = (0, ns.Z)(ch, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.$style.controls
                            }, [s("icon-button", {
                                class: e.$style.button,
                                attrs: {
                                    icon: "pushpin",
                                    "flip-icon": e.isVideosPinned,
                                    text: e.isVideosPinned ? e.$trans("Unpin videos from browser") : e.$trans("Pin videos to browser"),
                                    "show-text": !1
                                },
                                on: {
                                    click: function(t) {
                                        return e.$emit("toggle-pin-videos", t)
                                    }
                                }
                            }), e._v(" "), s("video-button", {
                                class: e.$style.button,
                                attrs: {
                                    room: e.room,
                                    "video-room": e.videoRoom,
                                    "is-owner": e.isOwner,
                                    "current-user-id": e.currentUser.id,
                                    "user-id": e.currentUser.id
                                },
                                on: {
                                    "toggle-video": function(t) {
                                        return e.$emit("toggle-video", t)
                                    }
                                }
                            }), e._v(" "), s("audio-button", {
                                class: e.$style.button,
                                attrs: {
                                    room: e.room,
                                    "video-room": e.videoRoom,
                                    "is-owner": e.isOwner,
                                    "current-user-id": e.currentUser.id,
                                    "user-id": e.currentUser.id
                                },
                                on: {
                                    "toggle-audio": function(t) {
                                        return e.$emit("toggle-audio", t)
                                    }
                                }
                            }), e._v(" "), s("clock-setup", {
                                attrs: {
                                    "is-owner": e.isOwner,
                                    room: e.room,
                                    "current-time": e.currentTime
                                },
                                on: {
                                    "set-clock": function(t) {
                                        return e.$emit("set-clock", t)
                                    }
                                }
                            })], 1)
                        }), [], !1, (function room_controls_injectStyles(e) {
                            this.$style = dh.locals || dh
                        }), null, null).exports,
                        mh = (0, g.aZ)({
                            name: "TransitionBase",
                            props: {
                                reverse: {
                                    type: Boolean,
                                    default: !1
                                }
                            },
                            methods: {
                                withReverse(e) {
                                    return `${e||""} ${this.reverse&&this.$style.reverse?this.$style.reverse:""}`
                                }
                            }
                        }),
                        hh = (0, ns.Z)(mh, (function() {
                            var e = this,
                                t = e.$createElement;
                            return (e._self._c || t)("transition", {
                                attrs: {
                                    mode: "out-in",
                                    "appear-class": e.withReverse(e.$style.appear),
                                    "appear-active-class": e.withReverse(e.$style["appear-active"]),
                                    "appear-to-class": e.withReverse(e.$style["appear-to"]),
                                    "enter-class": e.withReverse(e.$style.enter),
                                    "enter-active-class": e.withReverse(e.$style["enter-active"]),
                                    "enter-to-class": e.withReverse(e.$style["enter-to"]),
                                    "leave-class": e.withReverse(e.$style.leave),
                                    "leave-active-class": e.withReverse(e.$style["leave-active"]),
                                    "leave-to-class": e.withReverse(e.$style["leave-to"])
                                }
                            }, [e._t("default")], 2)
                        }), [], !1, null, null, null).exports,
                        ph = (0, g.aZ)({
                            name: "TransitionRoomHeaderTitle",
                            extends: hh
                        }),
                        bh = {
                            enter: "transition-room-header-title-enter",
                            reverse: "transition-room-header-title-reverse",
                            "enter-active": "transition-room-header-title-enter-active",
                            "enter-to": "transition-room-header-title-enter-to",
                            leave: "transition-room-header-title-leave",
                            "leave-active": "transition-room-header-title-leave-active",
                            "leave-to": "transition-room-header-title-leave-to"
                        };
                    var gh = (0, ns.Z)(ph, undefined, undefined, !1, (function transition_room_header_title_injectStyles(e) {
                            this.$style = bh.locals || bh
                        }), null, null).exports,
                        vh = (0, g.aZ)({
                            name: "TransitionRoomHeaderBackIcon",
                            extends: hh
                        }),
                        wh = {
                            enter: "transition-room-header-back-icon-enter",
                            "enter-active": "transition-room-header-back-icon-enter-active",
                            "enter-to": "transition-room-header-back-icon-enter-to",
                            leave: "transition-room-header-back-icon-leave",
                            "leave-active": "transition-room-header-back-icon-leave-active",
                            "leave-to": "transition-room-header-back-icon-leave-to"
                        };
                    var fh = (0, ns.Z)(vh, undefined, undefined, !1, (function transition_room_header_back_icon_injectStyles(e) {
                            this.$style = wh.locals || wh
                        }), null, null).exports,
                        yh = (0, g.aZ)({
                            name: "TransitionRoomHeaderLeaveLink",
                            extends: hh
                        }),
                        _h = {
                            enter: "transition-room-header-leave-link-enter",
                            "enter-active": "transition-room-header-leave-link-enter-active",
                            "enter-to": "transition-room-header-leave-link-enter-to"
                        };
                    var kh = (0, ns.Z)(yh, undefined, undefined, !1, (function transition_room_header_leave_link_injectStyles(e) {
                            this.$style = _h.locals || _h
                        }), null, null).exports,
                        Ch = (0, g.aZ)({
                            name: "RoomHeader",
                            components: {
                                IconButton: tm,
                                ClassroomIcon: ci,
                                TransitionRoomHeaderTitle: gh,
                                TransitionRoomHeaderBackIcon: fh,
                                TransitionRoomHeaderLeaveLink: kh
                            },
                            props: {
                                icon: {
                                    type: String,
                                    required: !1
                                },
                                title: {
                                    type: String,
                                    required: !0
                                },
                                showBack: {
                                    type: Boolean,
                                    default: !1
                                },
                                showLeave: {
                                    type: Boolean,
                                    default: !1
                                }
                            },
                            emits: ["click-back", "click-leave"]
                        }),
                        Sh = {
                            header: "room-header-header",
                            title: "room-header-title",
                            icon: "room-header-icon",
                            text: "room-header-text",
                            back: "room-header-back",
                            leave: "room-header-leave",
                            classroom: "room-header-classroom"
                        };
                    var xh = (0, ns.Z)(Ch, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.$style.header,
                                attrs: {
                                    "data-room-header": ""
                                }
                            }, [s("transition-room-header-back-icon", [e.showBack ? s("icon-button", {
                                class: e.$style.back,
                                attrs: {
                                    icon: "arrow-left",
                                    "show-text": !1,
                                    text: e.$trans("Back To Room View")
                                },
                                on: {
                                    click: function(t) {
                                        return e.$emit("click-back", t)
                                    }
                                }
                            }) : e._e()], 1), e._v(" "), s("transition-room-header-title", {
                                attrs: {
                                    reverse: e.showBack
                                }
                            }, [s("div", {
                                key: e.title,
                                class: e.$style.title
                            }, [e.icon ? s("span", {
                                staticClass: "icon-font-chess",
                                class: [e.$style.icon, e.icon]
                            }) : s("classroom-icon", {
                                class: e.$style.classroom
                            }), e._v(" "), s("span", {
                                class: e.$style.text,
                                domProps: {
                                    textContent: e._s(e.title)
                                }
                            })], 1)]), e._v(" "), s("transition-room-header-leave-link", [e.showLeave ? s("button", {
                                class: e.$style.leave,
                                attrs: {
                                    type: "button"
                                },
                                domProps: {
                                    textContent: e._s(e.$trans("Leave"))
                                },
                                on: {
                                    click: function(t) {
                                        return t.preventDefault(), e.$emit("click-leave", t)
                                    }
                                }
                            }) : e._e()])], 1)
                        }), [], !1, (function room_header_injectStyles(e) {
                            this.$style = Sh.locals || Sh
                        }), null, null).exports,
                        $h = Object.defineProperty,
                        Ph = Object.defineProperties,
                        Eh = Object.getOwnPropertyDescriptors,
                        Oh = Object.getOwnPropertySymbols,
                        Ah = Object.prototype.hasOwnProperty,
                        Th = Object.prototype.propertyIsEnumerable,
                        add_member_defNormalProp = (e, t, s) => t in e ? $h(e, t, {
                            enumerable: !0,
                            configurable: !0,
                            writable: !0,
                            value: s
                        }) : e[t] = s;
                    async function addMember(e) {
                        const t = getActiveRoom();
                        if (!t) return;
                        if (t.members.find((t => t.username === e))) return void showAlert({
                            content: (0, V.dW)("%member% has been invited already.", {
                                "%member%": e
                            }),
                            theme: "info",
                            duration: 1e4
                        });
                        let s;
                        try {
                            const t = i.Z.generate("web_user_callback_popup", {
                                    username: e
                                }),
                                {
                                    data: a
                                } = await r.Z.get(t);
                            s = a
                        } catch (n) {
                            showHttpError(n)
                        }
                        if (s) {
                            try {
                                await z.publish({
                                    service: j.Classroom,
                                    path: [D.Sessions, t.id, D.Invitees],
                                    data: {
                                        userId: s.uuid,
                                        boardControl: F.Spectator
                                    }
                                })
                            } catch (n) {
                                return void showHttpError(n)
                            }
                            var a, o;
                            t.members.update((a = ((e, t) => {
                                for (var s in t || (t = {})) Ah.call(t, s) && add_member_defNormalProp(e, s, t[s]);
                                if (Oh)
                                    for (var s of Oh(t)) Th.call(t, s) && add_member_defNormalProp(e, s, t[s]);
                                return e
                            })({}, s), o = {
                                id: s.uuid,
                                username: e
                            }, Ph(a, Eh(o))))
                        }
                    }
                    var Mh = (e => (e.Kick = "kick", e.MuteChat = "mute-chat", e.StopAudio = "stop-audio", e.StopVideo = "stop-video", e))(Mh || {});
                    async function removeMember(e, t) {
                        const s = getRoom(e);
                        if (s) {
                            s.members.remove(t);
                            try {
                                await z.publish({
                                    method: "delete",
                                    service: j.Classroom,
                                    path: [D.Sessions, s.id, D.Users, t]
                                })
                            } catch (a) {
                                showHttpError(a)
                            }
                        }
                    }
                    async function sendWebrtcCommand({
                        roomId: e,
                        userId: t,
                        media: s,
                        type: a
                    }) {
                        await z.publish({
                            service: j.Classroom,
                            path: [D.Sessions, e, D.Webrtc, D.Commands],
                            data: {
                                recipientId: t,
                                media: s,
                                type: a
                            }
                        })
                    }
                    async function toggleMemberVideo(e, t, s) {
                        const a = getRoom(e);
                        a && (s || (a.largeClassroom ? await publishTwilioNotification({
                            userId: t,
                            roomId: e,
                            media: ea.Video,
                            type: s ? ta.Start : ta.Stop
                        }) : await sendWebrtcCommand({
                            userId: t,
                            roomId: e,
                            media: sa.Video,
                            type: s ? aa.Start : aa.Stop
                        })))
                    }
                    async function toggleMemberAudio(e, t, s) {
                        const a = getRoom(e);
                        a && (s || (a.largeClassroom ? await publishTwilioNotification({
                            userId: t,
                            roomId: e,
                            media: ea.Audio,
                            type: s ? ta.Start : ta.Stop
                        }) : await sendWebrtcCommand({
                            userId: t,
                            roomId: e,
                            media: sa.Audio,
                            type: s ? aa.Start : aa.Stop
                        })))
                    }
                    const Rh = (0, a.kr)();
                    var Ih = Object.defineProperty,
                        jh = Object.defineProperties,
                        Bh = Object.getOwnPropertyDescriptors,
                        Lh = Object.getOwnPropertySymbols,
                        Dh = Object.prototype.hasOwnProperty,
                        Uh = Object.prototype.propertyIsEnumerable,
                        publish_defNormalProp = (e, t, s) => t in e ? Ih(e, t, {
                            enumerable: !0,
                            configurable: !0,
                            writable: !0,
                            value: s
                        }) : e[t] = s;
                    async function publish_publish(e) {
                        var t, s, a, o;
                        return publish((a = ((e, t) => {
                            for (var s in t || (t = {})) Dh.call(t, s) && publish_defNormalProp(e, s, t[s]);
                            if (Lh)
                                for (var s of Lh(t)) Uh.call(t, s) && publish_defNormalProp(e, s, t[s]);
                            return e
                        })({}, e), o = {
                            requestId: le()(),
                            clientId: null == (s = (t = Rh).getClientId) ? void 0 : s.call(t)
                        }, jh(a, Bh(o))))
                    }
                    async function updateUser(e, t, s) {
                        await publish_publish({
                            method: "put",
                            service: j.Classroom,
                            path: [D.Sessions, e, D.Users, t],
                            data: s
                        })
                    }
                    var zh = (0, g.aZ)({
                            name: "AddMember",
                            components: {
                                UsernameSearchInput: Qc,
                                IconButton: tm
                            },
                            props: {
                                userSearch: {
                                    type: Object,
                                    required: !0
                                },
                                userFriends: {
                                    type: Array,
                                    required: !0
                                }
                            },
                            emits: ["search-user", "submit-add-member", "close-add-member"],
                            data: () => ({
                                username: ""
                            }),
                            computed: {
                                searchResults() {
                                    return this.username ? this.userSearch.userSearchResults : this.userFriends
                                }
                            },
                            mounted() {
                                var e;
                                null == (e = document.getElementById("username-search-input")) || e.focus()
                            },
                            methods: {
                                onClearUser() {
                                    this.username = ""
                                },
                                onSearchUser({
                                    query: e
                                }) {
                                    this.username = e, this.$emit("search-user", {
                                        query: e
                                    })
                                },
                                onSelectUser({
                                    user: e
                                }) {
                                    this.username = e.username, this.onClickAdd()
                                },
                                onEnterUser(e) {
                                    this.username = e.target.value, this.onClickAdd()
                                },
                                onClickAdd() {
                                    this.username && this.$emit("submit-add-member", {
                                        username: this.username
                                    })
                                }
                            }
                        }),
                        qh = zh,
                        Vh = {
                            component: "add-member-component",
                            button: "add-member-button",
                            input: "add-member-input"
                        };
                    var Nh = (0, ns.Z)(qh, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.$style.component
                            }, [s("username-search-input", {
                                class: e.$style.input,
                                attrs: {
                                    placeholder: e.$trans("Enter Username"),
                                    "user-search": e.userSearch
                                },
                                on: {
                                    "enter-user": e.onEnterUser,
                                    blur: e.onClearUser,
                                    "clear-user": e.onClearUser,
                                    "search-user": e.onSearchUser,
                                    "select-user": e.onSelectUser
                                }
                            }), e._v(" "), s("icon-button", {
                                class: e.$style.button,
                                attrs: {
                                    icon: "plus"
                                },
                                on: {
                                    click: e.onClickAdd
                                }
                            }), e._v(" "), s("icon-button", {
                                class: e.$style.button,
                                attrs: {
                                    icon: "x"
                                },
                                on: {
                                    click: function(t) {
                                        return e.$emit("close-add-member", t)
                                    }
                                }
                            })], 1)
                        }), [], !1, (function add_member_injectStyles(e) {
                            this.$style = Vh.locals || Vh
                        }), null, null).exports,
                        Zh = (0, g.aZ)({
                            name: "AddMemberIcon",
                            components: {
                                IconButton: tm
                            },
                            props: {
                                isAddMemberEnabled: {
                                    type: Boolean,
                                    required: !0
                                },
                                currentUser: {
                                    type: UserModel,
                                    required: !0
                                },
                                showText: {
                                    type: Boolean,
                                    required: !0
                                }
                            },
                            emits: ["click-add-member"],
                            computed: {
                                tooltipContent() {
                                    return this.isAddMemberEnabled ? "" : this.$trans("Please upgrade to invite a third participant")
                                }
                            }
                        }),
                        Fh = (0, ns.Z)(Zh, (function() {
                            var e = this,
                                t = e.$createElement;
                            return (e._self._c || t)("icon-button", {
                                attrs: {
                                    icon: "plus",
                                    disabled: !e.isAddMemberEnabled,
                                    "tooltip-content": e.tooltipContent,
                                    text: e.$trans("Add"),
                                    "show-text": e.showText
                                },
                                on: {
                                    click: function(t) {
                                        return e.$emit("click-add-member", t)
                                    }
                                }
                            })
                        }), [], !1, null, null, null).exports,
                        Gh = (0, g.aZ)({
                            name: "MembersBulkMenu",
                            components: {
                                DropdownMenu: Ui,
                                DropdownOption: Yi
                            },
                            props: {
                                room: {
                                    type: RoomModel,
                                    required: !0
                                }
                            },
                            emits: ["close-members-bulk-menu", "click-members-bulk-action"],
                            computed: {
                                options() {
                                    return [{
                                        key: Mh.StopVideo,
                                        label: this.$trans("Turn off all video")
                                    }, {
                                        key: Mh.StopAudio,
                                        label: this.room.audioMuteAll ? this.$trans("Unmute all audio") : this.$trans("Mute all audio")
                                    }, {
                                        key: Mh.MuteChat,
                                        label: this.room.chatMuteAll ? this.$trans("Unmute all chat") : this.$trans("Mute all chat")
                                    }, {
                                        key: Mh.Kick,
                                        label: this.$trans("Kick all participants"),
                                        confirm: this.$trans("Kick All Participants?")
                                    }]
                                }
                            },
                            methods: {
                                onClickOption(e) {
                                    this.$emit("click-members-bulk-action", {
                                        action: e.key
                                    })
                                }
                            }
                        }),
                        Wh = (0, ns.Z)(Gh, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("dropdown-menu", {
                                on: {
                                    "close-menu": function(t) {
                                        return e.$emit("close-members-bulk-menu", t)
                                    }
                                }
                            }, e._l(e.options, (function(t) {
                                return s("dropdown-option", {
                                    key: t.key,
                                    attrs: {
                                        "data-cy": "members-bulk-action-" + t.key,
                                        label: t.label,
                                        confirm: t.confirm
                                    },
                                    on: {
                                        click: function(s) {
                                            return e.onClickOption(t)
                                        }
                                    }
                                })
                            })), 1)
                        }), [], !1, null, null, null).exports,
                        Hh = (0, g.aZ)({
                            name: "SwitchWithLabel",
                            components: {
                                V5Switch: ko.V5Switch,
                                IconHelp: bi
                            },
                            props: {
                                label: {
                                    type: String,
                                    required: !0
                                },
                                name: {
                                    type: String,
                                    required: !0
                                },
                                value: {
                                    type: Boolean,
                                    required: !0
                                },
                                help: {
                                    type: String,
                                    required: !1
                                },
                                isDisabled: {
                                    type: Boolean,
                                    default: !1
                                }
                            },
                            emits: ["input"]
                        }),
                        Yh = {
                            component: "switch-with-label-component",
                            switch: "switch-with-label-switch",
                            text: "switch-with-label-text"
                        };
                    var Kh = (0, ns.Z)(Hh, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.$style.component
                            }, [s("v5-switch", {
                                class: e.$style.switch,
                                attrs: {
                                    name: e.name,
                                    value: e.value,
                                    "is-disabled": e.isDisabled
                                },
                                on: {
                                    input: function(t) {
                                        return e.$emit("input", t)
                                    }
                                }
                            }), e._v(" "), s("span", {
                                class: e.$style.text,
                                domProps: {
                                    textContent: e._s(e.label)
                                }
                            }), e._v(" "), e.help ? s("icon-help", {
                                attrs: {
                                    help: e.help
                                }
                            }) : e._e()], 1)
                        }), [], !1, (function switch_with_label_injectStyles(e) {
                            this.$style = Yh.locals || Yh
                        }), null, null).exports,
                        Qh = (0, g.aZ)({
                            name: "OpenEnrollment",
                            components: {
                                SwitchWithLabel: Kh
                            },
                            props: {
                                currentUser: {
                                    type: UserModel,
                                    required: !0
                                },
                                room: {
                                    type: RoomModel,
                                    required: !0
                                }
                            },
                            emits: ["toggle-open-enrollment"],
                            computed: {
                                isEnabled() {
                                    return this.currentUser.isPremium() && this.room.openEnrollment
                                },
                                helpText() {
                                    const e = this.$trans("While enabled, anyone with your room ID can join. Otherwise, participants must be individually invited."),
                                        t = this.$trans("Please upgrade to enable open-enrollment.");
                                    return this.currentUser.isPremium() ? e : `${e} ${t}`
                                }
                            }
                        }),
                        Jh = {
                            component: "open-enrollment-component"
                        };
                    var Xh = (0, ns.Z)(Qh, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.$style.component
                            }, [s("switch-with-label", {
                                attrs: {
                                    name: "isPublic",
                                    value: e.isEnabled,
                                    "is-disabled": !e.currentUser.isPremium(),
                                    label: e.$trans("Open Enrollment"),
                                    help: e.helpText
                                },
                                on: {
                                    input: function(t) {
                                        return e.$emit("toggle-open-enrollment", {
                                            openEnrollment: t
                                        })
                                    }
                                }
                            })], 1)
                        }), [], !1, (function open_enrollment_injectStyles(e) {
                            this.$style = Jh.locals || Jh
                        }), null, null).exports,
                        ep = (0, g.aZ)({
                            name: "MembersControls",
                            components: {
                                AddMemberIcon: Fh,
                                IconButton: tm,
                                MembersBulkMenu: Wh,
                                OpenEnrollment: Xh
                            },
                            props: {
                                isAddMemberEnabled: {
                                    type: Boolean,
                                    required: !0
                                },
                                currentUser: {
                                    type: UserModel,
                                    required: !0
                                },
                                isOwner: {
                                    type: Boolean,
                                    required: !0
                                },
                                room: {
                                    type: RoomModel,
                                    required: !0
                                },
                                sidebarWidth: {
                                    type: Number,
                                    required: !0
                                }
                            },
                            emits: ["click-add-member", "click-share-room", "toggle-open-enrollment", "click-members-bulk-action"],
                            data: () => ({
                                isMenuOpen: !1
                            }),
                            computed: {
                                showButtonText() {
                                    return this.sidebarWidth > 400
                                },
                                isShareVisible() {
                                    return this.isOwner || this.room.openEnrollment
                                }
                            },
                            methods: {
                                onBulkAction(e) {
                                    this.$emit("click-members-bulk-action", e), this.isMenuOpen = !1
                                },
                                onClickMenu() {
                                    this.isMenuOpen = !0
                                },
                                onCloseMenu() {
                                    this.isMenuOpen = !1
                                }
                            }
                        }),
                        tp = {
                            component: "members-controls-component"
                        };
                    var sp = (0, ns.Z)(ep, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return e.isOwner || e.room.openEnrollment ? s("div", {
                                class: e.$style.component
                            }, [e.isOwner ? s("open-enrollment", {
                                attrs: {
                                    room: e.room,
                                    "current-user": e.currentUser
                                },
                                on: {
                                    "toggle-open-enrollment": function(t) {
                                        return e.$emit("toggle-open-enrollment", t)
                                    }
                                }
                            }) : e._e(), e._v(" "), e.isOwner ? s("add-member-icon", {
                                attrs: {
                                    "current-user": e.currentUser,
                                    "is-add-member-enabled": e.isAddMemberEnabled,
                                    "show-text": e.showButtonText
                                },
                                on: {
                                    "click-add-member": function(t) {
                                        return e.$emit("click-add-member", t)
                                    }
                                }
                            }) : e._e(), e._v(" "), e.isShareVisible ? s("icon-button", {
                                attrs: {
                                    icon: "share",
                                    text: e.$trans("Share"),
                                    "show-text": e.showButtonText
                                },
                                on: {
                                    click: function(t) {
                                        return e.$emit("click-share-room", t)
                                    }
                                }
                            }) : e._e(), e._v(" "), e.isOwner ? s("icon-button", {
                                attrs: {
                                    icon: "circle-3-dots"
                                },
                                on: {
                                    click: e.onClickMenu
                                }
                            }) : e._e(), e._v(" "), e.isMenuOpen ? s("members-bulk-menu", {
                                attrs: {
                                    room: e.room
                                },
                                on: {
                                    "click-members-bulk-action": e.onBulkAction,
                                    "close-members-bulk-menu": e.onCloseMenu
                                }
                            }) : e._e()], 1) : e._e()
                        }), [], !1, (function members_controls_injectStyles(e) {
                            this.$style = tp.locals || tp
                        }), null, null).exports,
                        ap = (0, g.aZ)({
                            name: "MemberMenu",
                            components: {
                                DropdownMenu: Ui,
                                DropdownOption: Yi
                            },
                            props: {
                                member: {
                                    type: MemberModel,
                                    required: !0
                                }
                            },
                            emits: ["close-member-menu", "click-member-option"],
                            computed: {
                                options() {
                                    const e = [];
                                    return this.member.isInvitationPending() ? e.push({
                                        key: F.Kick,
                                        label: this.$trans("Cancel Invite"),
                                        checked: !1
                                    }) : (e.push({
                                        key: F.White,
                                        label: this.$trans("Play as White"),
                                        checked: this.member.isPlayingWhite()
                                    }, {
                                        key: F.Black,
                                        label: this.$trans("Play as Black"),
                                        checked: this.member.isPlayingBlack()
                                    }, {
                                        key: F.Full,
                                        label: this.$trans("Give Full-Control"),
                                        checked: this.member.hasFullControl()
                                    }), this.member.isSpectator() || e.push({
                                        key: F.Spectator,
                                        label: this.$trans("Remove Control"),
                                        checked: !1
                                    }), e.push({
                                        key: F.Kick,
                                        label: this.$trans("Kick-Out"),
                                        checked: !1
                                    }, {
                                        key: Y.LoadGames,
                                        label: this.$trans("Load Games"),
                                        checked: this.member.canLoadGames()
                                    })), e
                                }
                            },
                            methods: {
                                onClickOption(e) {
                                    this.$emit("click-member-option", {
                                        option: e.key,
                                        member: this.member
                                    })
                                }
                            }
                        }),
                        op = (0, ns.Z)(ap, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("dropdown-menu", {
                                on: {
                                    "close-menu": function(t) {
                                        return e.$emit("close-member-menu", t)
                                    }
                                }
                            }, e._l(e.options, (function(t) {
                                return s("dropdown-option", {
                                    key: t.key,
                                    attrs: {
                                        label: t.label,
                                        checked: t.checked
                                    },
                                    on: {
                                        click: function(s) {
                                            return e.onClickOption(t)
                                        }
                                    }
                                })
                            })), 1)
                        }), [], !1, null, null, null).exports,
                        np = (0, g.aZ)({
                            name: "MembersList",
                            directives: {
                                userPopover: lr,
                                tooltip: Sa.Z
                            },
                            components: {
                                AudioButton: Qm,
                                Avatar: pa,
                                IconButton: tm,
                                MemberMenu: op,
                                VideoButton: lh
                            },
                            props: {
                                currentUser: {
                                    type: UserModel,
                                    required: !0
                                },
                                isOwner: {
                                    type: Boolean,
                                    required: !0
                                },
                                room: {
                                    type: RoomModel,
                                    required: !0
                                },
                                videoRoom: {
                                    type: VideoRoomModel,
                                    required: !1
                                }
                            },
                            emits: ["click-member-explorer", "click-member-option", "toggle-audio", "toggle-video"],
                            data: () => ({
                                memberMenu: null
                            }),
                            computed: {
                                members() {
                                    return this.room.getVisibleMembers()
                                }
                            },
                            methods: {
                                getClasses(e) {
                                    return {
                                        [this.$style.row]: !0,
                                        [this.$style.pending]: !e.isInvitationAccepted()
                                    }
                                },
                                getName(e) {
                                    return e.id === this.currentUser.id ? `${e.username} (${this.$trans("you")})` : e.username
                                },
                                onClickMenu(e) {
                                    this.memberMenu = e
                                },
                                onCloseMemberMenu() {
                                    this.memberMenu = null
                                },
                                onClickMemberOption(e) {
                                    this.$emit("click-member-option", e), this.memberMenu = null
                                },
                                onClickExplorer(e) {
                                    this.$emit("click-member-explorer", {
                                        member: e
                                    })
                                },
                                isExplorerVisible(e) {
                                    return this.isOwner && !e.isOwner() && window.chesscom.features.includes("classroom_load_from_explorer")
                                }
                            }
                        }),
                        rp = {
                            component: "members-list-component",
                            row: "members-list-row",
                            pending: "members-list-pending",
                            avatar: "members-list-avatar",
                            name: "members-list-name",
                            separator: "members-list-separator",
                            icon: "members-list-icon",
                            white: "members-list-white",
                            black: "members-list-black",
                            explorer: "members-list-explorer",
                            coach: "members-list-coach"
                        };
                    var ip = (0, ns.Z)(np, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.$style.component
                            }, e._l(e.members, (function(t) {
                                return s("div", {
                                    key: t.id,
                                    class: e.getClasses(t)
                                }, [s("avatar", {
                                    class: e.$style.avatar,
                                    attrs: {
                                        width: "30",
                                        height: "30",
                                        alt: t.username,
                                        src: t.avatarUrl
                                    }
                                }), e._v(" "), s("span", {
                                    directives: [{
                                        name: "user-popover",
                                        rawName: "v-user-popover",
                                        value: {
                                            username: t.username
                                        },
                                        expression: "{ username: member.username }"
                                    }],
                                    class: e.$style.name,
                                    domProps: {
                                        textContent: e._s(e.getName(t))
                                    }
                                }), e._v(" "), t.isOwner() ? s("icon-button", {
                                    directives: [{
                                        name: "tooltip",
                                        rawName: "v-tooltip",
                                        value: e.$trans("Coach"),
                                        expression: "$trans('Coach')"
                                    }],
                                    class: [e.$style.icon, e.$style.coach],
                                    attrs: {
                                        icon: "circle",
                                        disabled: "",
                                        off: "",
                                        small: ""
                                    }
                                }) : e._e(), e._v(" "), e.isExplorerVisible(t) ? s("icon-button", {
                                    directives: [{
                                        name: "tooltip",
                                        rawName: "v-tooltip",
                                        value: e.$trans("Explore"),
                                        expression: "$trans('Explore')"
                                    }],
                                    class: [e.$style.icon, e.$style.explorer],
                                    attrs: {
                                        icon: "circle-compass",
                                        small: ""
                                    },
                                    on: {
                                        click: function(s) {
                                            return e.onClickExplorer(t)
                                        }
                                    }
                                }) : e._e(), e._v(" "), s("span", {
                                    class: e.$style.separator
                                }), e._v(" "), t.isInvitationDeclined() ? s("span", {
                                    domProps: {
                                        textContent: e._s(e.$trans("Declined"))
                                    }
                                }) : e._e(), e._v(" "), t.isInvitationPending() ? s("span", {
                                    domProps: {
                                        textContent: e._s(e.$trans("Not joined yet"))
                                    }
                                }) : e._e(), e._v(" "), t.isInvitationAccepted() ? [t.hasFullControl() ? s("icon-button", {
                                    directives: [{
                                        name: "tooltip",
                                        rawName: "v-tooltip",
                                        value: e.$trans("Full Control"),
                                        expression: "$trans('Full Control')"
                                    }],
                                    class: [e.$style.icon],
                                    attrs: {
                                        disabled: "",
                                        off: "",
                                        icon: "chess-board"
                                    }
                                }) : e._e(), e._v(" "), t.isPlayingWhite() ? s("icon-button", {
                                    directives: [{
                                        name: "tooltip",
                                        rawName: "v-tooltip",
                                        value: e.$trans("Playing as White"),
                                        expression: "$trans('Playing as White')"
                                    }],
                                    class: [e.$style.icon, e.$style.white],
                                    attrs: {
                                        disabled: "",
                                        off: "",
                                        icon: "king-black"
                                    }
                                }) : e._e(), e._v(" "), t.isPlayingBlack() ? s("icon-button", {
                                    directives: [{
                                        name: "tooltip",
                                        rawName: "v-tooltip",
                                        value: e.$trans("Playing as Black"),
                                        expression: "$trans('Playing as Black')"
                                    }],
                                    class: [e.$style.icon, e.$style.black],
                                    attrs: {
                                        disabled: "",
                                        off: "",
                                        icon: "king-black"
                                    }
                                }) : e._e(), e._v(" "), s("video-button", {
                                    class: e.$style.icon,
                                    attrs: {
                                        room: e.room,
                                        "video-room": e.videoRoom,
                                        "is-owner": e.isOwner,
                                        "current-user-id": e.currentUser.id,
                                        "user-id": t.id
                                    },
                                    on: {
                                        "toggle-video": function(t) {
                                            return e.$emit("toggle-video", t)
                                        }
                                    }
                                }), e._v(" "), s("audio-button", {
                                    class: e.$style.icon,
                                    attrs: {
                                        room: e.room,
                                        "video-room": e.videoRoom,
                                        "is-owner": e.isOwner,
                                        "current-user-id": e.currentUser.id,
                                        "user-id": t.id
                                    },
                                    on: {
                                        "toggle-audio": function(t) {
                                            return e.$emit("toggle-audio", t)
                                        }
                                    }
                                })] : e._e(), e._v(" "), e.isOwner && t.id !== e.currentUser.id ? s("icon-button", {
                                    directives: [{
                                        name: "tooltip",
                                        rawName: "v-tooltip",
                                        value: e.$trans("Participant Controls"),
                                        expression: "$trans('Participant Controls')"
                                    }],
                                    class: [e.$style.icon, e.$style.menu],
                                    attrs: {
                                        icon: "circle-3-dots"
                                    },
                                    on: {
                                        click: function(s) {
                                            return e.onClickMenu(t)
                                        }
                                    }
                                }) : e._e(), e._v(" "), e.memberMenu === t ? s("member-menu", {
                                    attrs: {
                                        member: e.memberMenu
                                    },
                                    on: {
                                        "close-member-menu": e.onCloseMemberMenu,
                                        "click-member-option": e.onClickMemberOption
                                    }
                                }) : e._e()], 2)
                            })), 0)
                        }), [], !1, (function members_list_injectStyles(e) {
                            this.$style = rp.locals || rp
                        }), null, null).exports,
                        lp = {
                            name: "CopyText",
                            directives: {
                                tooltip: Sa.Z
                            },
                            props: {
                                text: {
                                    type: String,
                                    required: !0
                                },
                                icon: {
                                    type: String,
                                    default: "share"
                                },
                                tooltipText: String
                            },
                            data: () => ({
                                isMessageVisible: !1
                            }),
                            methods: {
                                tooltip() {
                                    return this.tooltipText || this.$trans("Share")
                                },
                                copy() {
                                    this.isMessageVisible || (this.$refs.textToCopy.select(), document.execCommand("Copy"), this.isMessageVisible = !0, setTimeout((() => {
                                        this.isMessageVisible = !1
                                    }), 3e3))
                                }
                            }
                        },
                        cp = {
                            component: "copy-text-component",
                            share: "copy-text-share",
                            icon: "copy-text-icon",
                            message: "copy-text-message",
                            fadeOut: "copy-text-fadeOut",
                            copy: "copy-text-copy"
                        };
                    var dp = (0, ns.Z)(lp, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("span", {
                                class: e.$style.component
                            }, [s("span", {
                                directives: [{
                                    name: "tooltip",
                                    rawName: "v-tooltip",
                                    value: e.tooltip,
                                    expression: "tooltip"
                                }],
                                staticClass: "icon-font-chess",
                                class: [e.$style.icon, e.$style.share, e.icon],
                                on: {
                                    click: e.copy
                                }
                            }), e._v(" "), s("input", {
                                ref: "textToCopy",
                                attrs: {
                                    type: "text",
                                    readonly: ""
                                },
                                domProps: {
                                    value: e.text
                                }
                            }), e._v(" "), e.isMessageVisible ? s("span", {
                                class: e.$style.message
                            }, [s("span", {
                                staticClass: "icon-font-chess copy",
                                class: [e.$style.icon, e.$style.copy]
                            }), e._v("\n    " + e._s(e.$trans("Link copied to clipboard.")) + "\n  ")]) : e._e()])
                        }), [], !1, (function copy_text_injectStyles(e) {
                            this.$style = cp.locals || cp
                        }), null, null).exports,
                        up = {
                            name: "ModalHeader",
                            props: {
                                closeButton: Function,
                                title: {
                                    type: String,
                                    required: !0
                                }
                            }
                        },
                        mp = {
                            component: "modal-header-component",
                            title: "modal-header-title",
                            close: "modal-header-close",
                            icon: "modal-header-icon"
                        };
                    var hp = (0, ns.Z)(up, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.$style.component
                            }, [s("h3", {
                                class: e.$style.title
                            }, [e._v("\n    " + e._s(e.title) + "\n  ")]), e._v(" "), e.closeButton ? s("button", {
                                class: e.$style.close,
                                attrs: {
                                    type: "button",
                                    "aria-label": e.$trans("Close")
                                },
                                on: {
                                    click: e.closeButton
                                }
                            }, [s("span", {
                                staticClass: "icon-font-chess x",
                                class: e.$style.icon
                            })]) : e._e()])
                        }), [], !1, (function modal_header_injectStyles(e) {
                            this.$style = mp.locals || mp
                        }), null, null).exports,
                        pp = s(8398),
                        bp = (0, g.aZ)({
                            name: "ShareRoomModal",
                            components: {
                                CopyText: dp,
                                ModalContent: Ur.Z,
                                ModalContainer: Dr.Z,
                                ModalHeader: hp,
                                SocialShare: pp.Z,
                                Transpose: Qr,
                                V5Input: ko.V5Input
                            },
                            props: {
                                room: {
                                    type: RoomModel,
                                    required: !0
                                }
                            },
                            emits: ["close-share-room"],
                            methods: {
                                onClose(e) {
                                    this.$emit("close-share-room", e)
                                },
                                onFocusInput(e) {
                                    var t;
                                    null == (t = e.target) || t.select()
                                }
                            }
                        }),
                        gp = {
                            content: "share-room-modal-content",
                            body: "share-room-modal-body",
                            row: "share-room-modal-row",
                            label: "share-room-modal-label",
                            field: "share-room-modal-field",
                            icon: "share-room-modal-icon",
                            copy: "share-room-modal-copy",
                            input: "share-room-modal-input"
                        };
                    var vp = (0, ns.Z)(bp, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("transpose", {
                                attrs: {
                                    target: "body"
                                }
                            }, [s("modal-container", {
                                attrs: {
                                    "auto-show": ""
                                },
                                on: {
                                    "modal-did-hide": e.onClose
                                }
                            }, [s("modal-content", {
                                class: e.$style.content
                            }, [s("modal-header", {
                                attrs: {
                                    "close-button": e.onClose,
                                    title: e.$trans("Share Classroom")
                                }
                            }), e._v(" "), s("div", {
                                class: e.$style.body
                            }, [s("div", {
                                class: e.$style.row
                            }, [s("label", {
                                class: e.$style.label,
                                domProps: {
                                    textContent: e._s(e.$trans("Room ID:"))
                                }
                            }), e._v(" "), s("div", {
                                class: e.$style.field
                            }, [s("span", {
                                staticClass: "icon-font-chess circle",
                                class: e.$style.icon
                            }), e._v(" "), s("v5-input", {
                                class: e.$style.input,
                                attrs: {
                                    "force-theme": "light",
                                    size: "large",
                                    value: e.room.id
                                },
                                on: {
                                    focus: e.onFocusInput
                                }
                            }), e._v(" "), s("copy-text", {
                                class: e.$style.copy,
                                attrs: {
                                    icon: "copy",
                                    text: e.room.id,
                                    "tooltip-text": e.$trans("Copy ID")
                                }
                            })], 1)]), e._v(" "), s("div", {
                                class: e.$style.row
                            }, [s("label", {
                                class: e.$style.label,
                                domProps: {
                                    textContent: e._s(e.$trans("Room URL:"))
                                }
                            }), e._v(" "), s("div", {
                                class: e.$style.field
                            }, [s("span", {
                                staticClass: "icon-font-chess link",
                                class: e.$style.icon
                            }), e._v(" "), s("v5-input", {
                                class: e.$style.input,
                                attrs: {
                                    "force-theme": "light",
                                    size: "large",
                                    "data-cy": "share-room-url",
                                    value: e.room.getUrl(!0)
                                },
                                on: {
                                    focus: e.onFocusInput
                                }
                            }), e._v(" "), s("copy-text", {
                                class: e.$style.copy,
                                attrs: {
                                    icon: "copy",
                                    text: e.room.getUrl(!0),
                                    "tooltip-text": e.$trans("Copy URL")
                                }
                            })], 1)]), e._v(" "), s("div", {
                                class: e.$style.row
                            }, [s("social-share", {
                                attrs: {
                                    background: "transparent"
                                }
                            })], 1)])], 1)], 1)], 1)
                        }), [], !1, (function share_room_modal_injectStyles(e) {
                            this.$style = gp.locals || gp
                        }), null, null).exports,
                        wp = (0, g.aZ)({
                            name: "RoomMembersTab",
                            components: {
                                AddMember: Nh,
                                MembersControls: sp,
                                MembersList: ip,
                                ShareRoomModal: vp
                            },
                            props: {
                                currentUser: {
                                    type: UserModel,
                                    required: !0
                                },
                                isAddMemberEnabled: {
                                    type: Boolean,
                                    required: !0
                                },
                                isAddMemberVisible: {
                                    type: Boolean,
                                    required: !0
                                },
                                isOwner: {
                                    type: Boolean,
                                    required: !0
                                },
                                isShareRoomVisible: {
                                    type: Boolean,
                                    required: !0
                                },
                                room: {
                                    type: RoomModel,
                                    required: !0
                                },
                                sidebarWidth: {
                                    type: Number,
                                    required: !0
                                },
                                userFriends: {
                                    type: Array,
                                    required: !0
                                },
                                userSearch: {
                                    type: Object,
                                    required: !0
                                },
                                videoRoom: {
                                    type: VideoRoomModel,
                                    required: !1
                                }
                            },
                            emits: ["click-add-member", "click-member-explorer", "click-member-option", "click-members-bulk-action", "click-share-room", "close-add-member", "close-share-room", "search-user", "submit-add-member", "toggle-audio", "toggle-video", "toggle-open-enrollment"],
                            methods: {
                                getMaxHeight() {
                                    const e = Number(this.$el.getBoundingClientRect().height);
                                    let t = this.room.members.length;
                                    return (this.isOwner || this.room.openEnrollment) && t++, e - 48 * t
                                }
                            }
                        }),
                        fp = {
                            component: "room-members-tab-component",
                            resizable: "room-members-tab-resizable"
                        };
                    var yp = (0, ns.Z)(wp, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.$style.component
                            }, [e.isShareRoomVisible ? s("share-room-modal", {
                                attrs: {
                                    room: e.room
                                },
                                on: {
                                    "close-share-room": function(t) {
                                        return e.$emit("close-share-room", t)
                                    }
                                }
                            }) : e._e(), e._v(" "), s("members-controls", {
                                attrs: {
                                    "is-add-member-enabled": e.isAddMemberEnabled,
                                    "current-user": e.currentUser,
                                    "is-owner": e.isOwner,
                                    room: e.room,
                                    "sidebar-width": e.sidebarWidth
                                },
                                on: {
                                    "click-add-member": function(t) {
                                        return e.$emit("click-add-member", t)
                                    },
                                    "click-share-room": function(t) {
                                        return e.$emit("click-share-room", t)
                                    },
                                    "click-members-bulk-action": function(t) {
                                        return e.$emit("click-members-bulk-action", t)
                                    },
                                    "toggle-open-enrollment": function(t) {
                                        return e.$emit("toggle-open-enrollment", t)
                                    }
                                }
                            }), e._v(" "), e.isAddMemberVisible ? s("add-member", {
                                attrs: {
                                    "user-search": e.userSearch,
                                    "user-friends": e.userFriends
                                },
                                on: {
                                    "search-user": function(t) {
                                        return e.$emit("search-user", t)
                                    },
                                    "submit-add-member": function(t) {
                                        return e.$emit("submit-add-member", t)
                                    },
                                    "close-add-member": function(t) {
                                        return e.$emit("close-add-member", t)
                                    }
                                }
                            }) : e._e(), e._v(" "), s("members-list", {
                                attrs: {
                                    "current-user": e.currentUser,
                                    "is-owner": e.isOwner,
                                    room: e.room,
                                    "video-room": e.videoRoom
                                },
                                on: {
                                    "click-member-explorer": function(t) {
                                        return e.$emit("click-member-explorer", t)
                                    },
                                    "click-member-option": function(t) {
                                        return e.$emit("click-member-option", t)
                                    },
                                    "toggle-audio": function(t) {
                                        return e.$emit("toggle-audio", t)
                                    },
                                    "toggle-video": function(t) {
                                        return e.$emit("toggle-video", t)
                                    }
                                }
                            })], 1)
                        }), [], !1, (function room_members_tab_injectStyles(e) {
                            this.$style = fp.locals || fp
                        }), null, null).exports,
                        _p = (0, g.aZ)({
                            name: "RoomMembersTabController",
                            components: {
                                RoomMembersTab: yp
                            },
                            data: () => ({
                                isAddMemberVisible: !1,
                                isShareRoomVisible: !1
                            }),
                            computed: {
                                activeRoom: () => getActiveRoom(),
                                currentUser: () => getCurrentUser(),
                                isOwner() {
                                    var e;
                                    return Boolean(null == (e = this.activeRoom.members.find(this.currentUser.id)) ? void 0 : e.isOwner())
                                },
                                videoRoom() {
                                    return getVideoRoom(this.activeRoom.id)
                                },
                                userFriends: () => function getFriends() {
                                    return _e.friends
                                }(),
                                sidebarWidth: () => function getSidebarWidth() {
                                    return Ie.sidebarWidth
                                }(),
                                userSearch: () => getUserSearch(),
                                isAddMemberEnabled() {
                                    return this.activeRoom.getParticipants().length < 1 || this.currentUser.isPremium()
                                }
                            },
                            mounted() {
                                !async function loadFriends() {
                                    if (_e.hasLoadedFriends) return;
                                    const e = i.Z.generate("web_friend_callback_friends_search", {
                                            user: getCurrentUser().userId,
                                            avatarSize: 50
                                        }),
                                        {
                                            data: {
                                                friends: t
                                            }
                                        } = await r.Z.get(e);
                                    _e.friends.splice(0, _e.friends.length, ...t), _e.hasLoadedFriends = !0
                                }()
                            },
                            beforeDestroy() {
                                clearUserSearch()
                            },
                            methods: {
                                onToggleAddMember() {
                                    this.isAddMemberVisible = !this.isAddMemberVisible
                                },
                                onToggleShareRoom() {
                                    this.isShareRoomVisible = !this.isShareRoomVisible
                                },
                                onAddMember({
                                    username: e
                                }) {
                                    addMember(e), this.isAddMemberVisible = !1
                                },
                                onToggleOpenEnrollment({
                                    openEnrollment: e
                                }) {
                                    !async function updateOpenEnrollment(e, t) {
                                        const s = getRoom(e);
                                        if (s && isRoomOwner(e)) try {
                                            await z.publish({
                                                method: "put",
                                                service: j.Classroom,
                                                path: [D.Sessions, s.id, D.Enrollment],
                                                data: {
                                                    openEnrollment: t
                                                }
                                            }), s.openEnrollment = t
                                        } catch (a) {
                                            showHttpError(a)
                                        }
                                    }(this.activeRoom.id, e)
                                },
                                onClickMemberOption({
                                    member: e,
                                    option: t
                                }) {
                                    switch (t) {
                                        case Y.LoadGames:
                                            !async function updateMemberCapability(e, t, s) {
                                                const a = getRoom(e);
                                                if (!a || !isRoomOwner(e)) return;
                                                const o = a.members.find(t),
                                                    n = o.capabilities.includes(s) ? o.capabilities.filter((e => e !== s)) : o.capabilities.concat(s);
                                                try {
                                                    await updateUser(e, t, {
                                                        boardControl: o.boardControl,
                                                        capabilities: n
                                                    })
                                                } catch (r) {
                                                    showHttpError(r)
                                                }
                                            }(this.activeRoom.id, e.id, t);
                                            break;
                                        case F.Kick:
                                            removeMember(this.activeRoom.id, e.id);
                                            break;
                                        default:
                                            !async function updateMemberControl(e, t, s) {
                                                const a = getRoom(e);
                                                if (!a || !isRoomOwner(e)) return;
                                                const o = a.members.find(t);
                                                try {
                                                    await updateUser(e, t, {
                                                        boardControl: s,
                                                        capabilities: o.capabilities
                                                    })
                                                } catch (n) {
                                                    showHttpError(n)
                                                }
                                            }(this.activeRoom.id, e.id, t)
                                    }
                                },
                                onSearchUser({
                                    query: e
                                }) {
                                    searchUser(e)
                                },
                                onToggleAudio({
                                    userId: e,
                                    enabled: t
                                }) {
                                    e === this.currentUser.id ? toggleAudio(this.activeRoom, t) : this.isOwner && toggleMemberAudio(this.activeRoom.id, e, t)
                                },
                                onToggleVideo({
                                    userId: e,
                                    enabled: t
                                }) {
                                    e === this.currentUser.id ? toggleVideo(this.activeRoom, t) : this.isOwner && toggleMemberVideo(this.activeRoom.id, e, t)
                                },
                                onClickMembersBulkAction({
                                    action: e
                                }) {
                                    switch (e) {
                                        case Mh.Kick:
                                            !async function removeAllMembers(e) {
                                                const t = getRoom(e);
                                                if (!t) return;
                                                let s = Promise.resolve();
                                                return t.getParticipants().forEach((t => {
                                                    s = s.then((() => removeMember(e, t.id)))
                                                })), s
                                            }(this.activeRoom.id);
                                            break;
                                        case Mh.StopAudio:
                                            !async function muteAllAudio(e, t = !0) {
                                                const s = getRoom(e);
                                                if (s) try {
                                                    await z.publish({
                                                        method: "put",
                                                        service: j.Classroom,
                                                        path: [D.Sessions, s.id, D.AudioSettings],
                                                        data: {
                                                            muteAll: t
                                                        }
                                                    })
                                                } catch (a) {
                                                    showHttpError(a)
                                                }
                                            }(this.activeRoom.id, !this.activeRoom.audioMuteAll);
                                            break;
                                        case Mh.StopVideo:
                                            !async function stopAllVideo(e) {
                                                const t = getRoom(e);
                                                if (!t) return;
                                                let s = Promise.resolve();
                                                return t.getParticipants().forEach((t => {
                                                    s = s.then((() => toggleMemberVideo(e, t.id, !1)))
                                                })), s
                                            }(this.activeRoom.id);
                                            break;
                                        case Mh.MuteChat:
                                            !async function muteAllMembers(e, t = !0) {
                                                const s = getRoom(e);
                                                if (s) try {
                                                    await z.publish({
                                                        method: "put",
                                                        service: j.Classroom,
                                                        path: [D.Sessions, s.id, D.ChatSettings],
                                                        data: {
                                                            muteAll: t
                                                        }
                                                    })
                                                } catch (a) {
                                                    showHttpError(a)
                                                }
                                            }(this.activeRoom.id, !this.activeRoom.chatMuteAll)
                                    }
                                },
                                onClickMemberExplorer({
                                    member: e
                                }) {
                                    loadExplorer(e)
                                }
                            }
                        }),
                        kp = _p,
                        Cp = (0, ns.Z)(kp, (function() {
                            var e = this,
                                t = e.$createElement;
                            return (e._self._c || t)("room-members-tab", {
                                attrs: {
                                    "current-user": e.currentUser,
                                    "is-add-member-enabled": e.isAddMemberEnabled,
                                    "is-add-member-visible": e.isAddMemberVisible,
                                    "is-owner": e.isOwner,
                                    "is-share-room-visible": e.isShareRoomVisible,
                                    room: e.activeRoom,
                                    "user-search": e.userSearch,
                                    "user-friends": e.userFriends,
                                    "video-room": e.videoRoom,
                                    "sidebar-width": e.sidebarWidth
                                },
                                on: {
                                    "click-add-member": e.onToggleAddMember,
                                    "click-member-explorer": e.onClickMemberExplorer,
                                    "click-member-option": e.onClickMemberOption,
                                    "click-members-bulk-action": e.onClickMembersBulkAction,
                                    "click-share-room": e.onToggleShareRoom,
                                    "close-add-member": e.onToggleAddMember,
                                    "close-share-room": e.onToggleShareRoom,
                                    "search-user": e.onSearchUser,
                                    "submit-add-member": e.onAddMember,
                                    "toggle-audio": e.onToggleAudio,
                                    "toggle-video": e.onToggleVideo,
                                    "toggle-open-enrollment": e.onToggleOpenEnrollment
                                }
                            })
                        }), [], !1, null, null, null).exports,
                        Sp = (0, g.aZ)({
                            name: "RoomTabs",
                            components: {
                                IconButton: tm,
                                CounterBadge: Ju
                            },
                            props: {
                                selectedTab: {
                                    type: String,
                                    required: !0
                                },
                                room: {
                                    type: RoomModel,
                                    required: !0
                                }
                            },
                            emits: ["select-tab"],
                            data: () => ({
                                RoomTab: Me
                            }),
                            computed: {
                                counter() {
                                    var e;
                                    return (null == (e = this.room) ? void 0 : e.getVisibleMembers().length) || 0
                                }
                            },
                            methods: {
                                onClickTab(e, t) {
                                    e.preventDefault(), this.$emit("select-tab", {
                                        tab: t
                                    })
                                }
                            }
                        }),
                        xp = {
                            tabs: "room-tabs-tabs",
                            tab: "room-tabs-tab",
                            active: "room-tabs-active"
                        };
                    var $p = (0, ns.Z)(Sp, (function() {
                        var e, t, s = this,
                            a = s.$createElement,
                            o = s._self._c || a;
                        return o("div", {
                            class: s.$style.tabs
                        }, [o("icon-button", {
                            class: [s.$style.tab, (e = {}, e[s.$style.active] = s.selectedTab === s.RoomTab.Boards, e)],
                            attrs: {
                                "data-cy": "room-tab-boards",
                                icon: "chess-board",
                                text: s.$trans("Games")
                            },
                            on: {
                                click: function(e) {
                                    return s.onClickTab(e, s.RoomTab.Boards)
                                }
                            }
                        }), s._v(" "), o("icon-button", {
                            class: [s.$style.tab, (t = {}, t[s.$style.active] = s.selectedTab === s.RoomTab.Members, t)],
                            attrs: {
                                "data-cy": "room-tab-members",
                                icon: "users",
                                text: s.$trans("Participants")
                            },
                            on: {
                                click: function(e) {
                                    return s.onClickTab(e, s.RoomTab.Members)
                                }
                            }
                        }, [s.counter ? o("counter-badge", {
                            attrs: {
                                counter: s.counter
                            }
                        }) : s._e()], 1)], 1)
                    }), [], !1, (function room_tabs_injectStyles(e) {
                        this.$style = xp.locals || xp
                    }), null, null).exports;
                    async function updatePinnedVideos(e, t) {
                        const s = getRoom(e);
                        s && isRoomOwner(e) && ((0, a.Uc)(s, {
                            pinnedVideos: t
                        }), await z.publish({
                            method: "put",
                            service: j.Classroom,
                            path: [D.Sessions, s.id, D.PinnedVideos],
                            data: {
                                pinnedVideos: t
                            }
                        }))
                    }
                    const getValue = (e, t) => isString(t) && isObject(e) ? e[t] : isFunction(t) ? t(e) : void 0,
                        compareValues = (e, t, s, a) => {
                            const o = getValue(e, s),
                                n = getValue(t, s);
                            return null == o ? 1 : null == n ? -1 : o > n ? "desc" === a ? -1 : 1 : o < n ? "desc" === a ? 1 : -1 : 0
                        };
                    var Pp = (0, g.aZ)({
                            name: "RoomVideoParticipant",
                            components: {
                                AudioButton: Qm,
                                IconButton: tm,
                                UserTagline: zn,
                                VideoButton: lh
                            },
                            props: {
                                room: {
                                    type: Object,
                                    required: !0
                                },
                                videoRoom: {
                                    type: Object,
                                    required: !0
                                },
                                currentUser: {
                                    type: Object,
                                    required: !0
                                },
                                isOwner: {
                                    type: Boolean,
                                    required: !0
                                },
                                isPinned: {
                                    type: Boolean,
                                    required: !0
                                },
                                participantId: {
                                    type: String,
                                    required: !0
                                },
                                showControls: {
                                    type: Boolean,
                                    required: !0
                                },
                                showUsername: {
                                    type: Boolean,
                                    required: !1
                                },
                                user: {
                                    type: Object,
                                    required: !0
                                },
                                videoElement: {
                                    type: HTMLVideoElement,
                                    required: !0
                                }
                            },
                            emits: ["toggle-video", "toggle-audio", "toggle-pin-video", "reorder-pinned-videos"],
                            data: () => ({
                                isDraggable: !1
                            }),
                            computed: {
                                isCurrentUser() {
                                    return this.currentUser.id === this.user.id
                                },
                                isOverlayVisible() {
                                    return this.isOwner && window.chesscom.features.includes("classroom_pin_video")
                                }
                            },
                            mounted() {
                                if (!this.videoElement) return void console.error("Video element missing", this.participantId);
                                this.$refs["video-container"].append(this.videoElement)
                            },
                            methods: {
                                onClickPinVideo() {
                                    this.$emit("toggle-pin-video", {
                                        userId: this.user.id,
                                        isPinned: !this.isPinned
                                    })
                                },
                                onDragIconMouseDown() {
                                    this.isDraggable = !0
                                },
                                onDragIconMouseUp() {
                                    this.isDraggable = !1
                                },
                                onDragStart(e) {
                                    e.dataTransfer && (e.dataTransfer.dropEffect = "move", e.dataTransfer.setData("text/plain", this.user.id))
                                },
                                onDragDrop(e) {
                                    var t;
                                    this.isDraggable = !1;
                                    const s = null == (t = e.dataTransfer) ? void 0 : t.getData("text/plain");
                                    s && s !== this.user.id && this.$emit("reorder-pinned-videos", {
                                        userId: s,
                                        targetUserId: this.user.id
                                    })
                                },
                                onDragEnter(e) {
                                    this.isPinned && e.preventDefault()
                                },
                                onDragOver(e) {
                                    this.isPinned && e.preventDefault()
                                }
                            }
                        }),
                        Ep = {
                            component: "room-video-participant-component",
                            row: "room-video-participant-row",
                            tagline: "room-video-participant-tagline",
                            button: "room-video-participant-button",
                            crop: "room-video-participant-crop",
                            "video-wrapper": "room-video-participant-video-wrapper",
                            overlay: "room-video-participant-overlay",
                            icon: "room-video-participant-icon",
                            grab: "room-video-participant-grab"
                        };
                    var Op = (0, ns.Z)(Pp, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.$style.component,
                                attrs: {
                                    draggable: e.isDraggable
                                },
                                on: {
                                    dragstart: e.onDragStart,
                                    dragenter: e.onDragEnter,
                                    dragover: e.onDragOver,
                                    dragleave: function(e) {
                                        e.preventDefault()
                                    },
                                    drop: e.onDragDrop
                                }
                            }, [s("div", {
                                class: e.$style["video-wrapper"]
                            }, [s("div", {
                                ref: "video-container",
                                class: e.$style.crop
                            }), e._v(" "), e.isOverlayVisible ? s("div", {
                                class: e.$style.overlay
                            }, [e.isPinned ? s("icon-button", {
                                class: [e.$style.icon, e.$style.grab],
                                attrs: {
                                    icon: "thumb-row",
                                    text: e.$trans("Click and drag to reorder pinned video panels"),
                                    "flip-icon": e.isPinned,
                                    "show-text": !1
                                },
                                on: {
                                    mousedown: e.onDragIconMouseDown,
                                    mouseup: e.onDragIconMouseUp
                                }
                            }) : e._e(), e._v(" "), s("icon-button", {
                                class: e.$style.icon,
                                attrs: {
                                    icon: "pushpin",
                                    "flip-icon": e.isPinned,
                                    text: e.isPinned ? e.$trans("Unpin video") : e.$trans("Pin video to the top of the list"),
                                    "show-text": !1
                                },
                                on: {
                                    click: e.onClickPinVideo
                                }
                            })], 1) : e._e()]), e._v(" "), e.showUsername ? s("div", {
                                class: e.$style.row
                            }, [s("user-tagline", {
                                class: e.$style.tagline,
                                attrs: {
                                    "username-theme": "blue-with-dark-mode",
                                    "flair-code": e.user.flairCode,
                                    title: e.user.chessTitle,
                                    username: e.user.username
                                }
                            }), e._v(" "), e.showControls ? s("video-button", {
                                class: e.$style.button,
                                attrs: {
                                    room: e.room,
                                    "video-room": e.videoRoom,
                                    "is-owner": e.isOwner,
                                    "current-user-id": e.currentUser.id,
                                    "user-id": e.user.id,
                                    "tooltip-position": "left"
                                },
                                on: {
                                    "toggle-video": function(t) {
                                        return e.$emit("toggle-video", t)
                                    }
                                }
                            }) : e._e(), e._v(" "), e.showControls ? s("audio-button", {
                                class: e.$style.button,
                                attrs: {
                                    room: e.room,
                                    "video-room": e.videoRoom,
                                    "is-owner": e.isOwner,
                                    "current-user-id": e.currentUser.id,
                                    "user-id": e.user.id,
                                    "tooltip-position": "left"
                                },
                                on: {
                                    "toggle-audio": function(t) {
                                        return e.$emit("toggle-audio", t)
                                    }
                                }
                            }) : e._e()], 1) : e._e()])
                        }), [], !1, (function room_video_participant_injectStyles(e) {
                            this.$style = Ep.locals || Ep
                        }), null, null).exports,
                        Ap = (0, g.aZ)({
                            name: "RoomVideo",
                            components: {
                                RoomVideoParticipant: Op,
                                Transpose: Qr,
                                Pagination: $d.Z
                            },
                            props: {
                                activeRoom: {
                                    type: Object,
                                    required: !0
                                },
                                currentPage: {
                                    type: Number,
                                    required: !0
                                },
                                currentUser: {
                                    type: Object,
                                    required: !0
                                },
                                getUserVideo: {
                                    type: Function,
                                    required: !0
                                },
                                isLocalVideoSmall: {
                                    type: Boolean,
                                    required: !0
                                },
                                isMultiVideoLayout: {
                                    type: Boolean,
                                    required: !0
                                },
                                isRoomOwner: {
                                    type: Boolean,
                                    required: !0
                                },
                                isVideoContainerMounted: {
                                    type: Boolean,
                                    required: !0
                                },
                                isVideosPinned: {
                                    type: Boolean,
                                    required: !0
                                },
                                participantIds: {
                                    type: Array,
                                    required: !0
                                },
                                totalPages: {
                                    type: Number,
                                    required: !0
                                },
                                videoRoom: {
                                    type: Object,
                                    required: !0
                                }
                            },
                            emits: ["toggle-audio", "toggle-video", "change-page", "toggle-pin-video", "reorder-pinned-videos"],
                            computed: {
                                videoRoomTarget() {
                                    return this.isVideosPinned ? "#pinned-video-room" : this.isVideoContainerMounted ? "#unpinned-video-room" : "#hidden-video-room"
                                },
                                videoRoomClasses() {
                                    return {
                                        [this.$style["video-room"]]: !0,
                                        [this.$style.pinned]: this.isVideosPinned,
                                        [this.$style["multi-layout"]]: this.isMultiVideoLayout
                                    }
                                },
                                localVideoClasses() {
                                    return {
                                        [this.$style.video]: !0,
                                        [this.$style["small-video"]]: this.isLocalVideoSmall
                                    }
                                },
                                remoteVideoClasses() {
                                    return {
                                        [this.$style.video]: !0
                                    }
                                }
                            },
                            watch: {
                                totalPages() {
                                    this.currentPage > this.totalPages && this.onChangePage(1)
                                }
                            },
                            methods: {
                                getUser(e) {
                                    return this.activeRoom.members.find(e)
                                },
                                onChangePage(e) {
                                    this.$emit("change-page", {
                                        page: e
                                    })
                                },
                                isCurrentUser(e) {
                                    return this.currentUser.id === e
                                },
                                isVideoPinned(e) {
                                    return this.activeRoom.isVideoPinned(e)
                                }
                            }
                        }),
                        Tp = {
                            "video-room": "room-video-video-room",
                            "multi-layout": "room-video-multi-layout",
                            pinned: "room-video-pinned",
                            video: "room-video-video",
                            "small-video": "room-video-small-video",
                            hidden: "room-video-hidden",
                            pagination: "room-video-pagination"
                        };
                    var Mp = (0, ns.Z)(Ap, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", [s("div", {
                                attrs: {
                                    id: "audio-container"
                                }
                            }), e._v(" "), s("div", {
                                class: e.$style.hidden,
                                attrs: {
                                    id: "hidden-video-room"
                                }
                            }), e._v(" "), s("transpose", {
                                attrs: {
                                    target: e.videoRoomTarget
                                }
                            }, [s("div", {
                                class: e.videoRoomClasses
                            }, e._l(e.participantIds, (function(t) {
                                return s("room-video-participant", {
                                    key: t,
                                    class: e.isCurrentUser(t) ? e.localVideoClasses : e.remoteVideoClasses,
                                    attrs: {
                                        "participant-id": t,
                                        "video-element": e.getUserVideo(t),
                                        room: e.activeRoom,
                                        "video-room": e.videoRoom,
                                        "current-user": e.currentUser,
                                        "is-owner": e.isRoomOwner,
                                        "is-pinned": e.isVideoPinned(t),
                                        user: e.getUser(t),
                                        "show-username": !e.isCurrentUser(t) || e.isMultiVideoLayout,
                                        "show-controls": (e.isCurrentUser(t) || e.isRoomOwner) && e.isVideosPinned
                                    },
                                    on: {
                                        "toggle-audio": function(t) {
                                            return e.$emit("toggle-audio", t)
                                        },
                                        "toggle-video": function(t) {
                                            return e.$emit("toggle-video", t)
                                        },
                                        "toggle-pin-video": function(t) {
                                            return e.$emit("toggle-pin-video", t)
                                        },
                                        "reorder-pinned-videos": function(t) {
                                            return e.$emit("reorder-pinned-videos", t)
                                        }
                                    }
                                })
                            })), 1), e._v(" "), e.totalPages > 1 ? s("pagination", {
                                class: e.$style.pagination,
                                attrs: {
                                    "change-page": e.onChangePage,
                                    "current-page": e.currentPage,
                                    "total-pages": e.totalPages,
                                    "show-first-last-buttons": !1
                                }
                            }) : e._e()], 1)], 1)
                        }), [], !1, (function room_video_injectStyles(e) {
                            this.$style = Tp.locals || Tp
                        }), null, null).exports,
                        Rp = (0, g.aZ)({
                            name: "RoomVideoController",
                            components: {
                                RoomVideo: Mp
                            },
                            data: () => ({
                                currentPage: 1,
                                windowHeight: 0
                            }),
                            computed: {
                                activeRoom: () => getActiveRoom(),
                                videoRoom() {
                                    return getVideoRoom(this.activeRoom.id)
                                },
                                isVideosPinned: () => isVideosPinned(),
                                currentUser: () => getCurrentUser(),
                                isRoomOwner() {
                                    return isRoomOwner(this.activeRoom.id)
                                },
                                isVideoContainerMounted: () => function isVideoContainerMounted() {
                                    return Qs.videoContainerMounted
                                }(),
                                remoteParticipantsWithVideos() {
                                    return this.videoRoom.remoteParticipants.filter((e => e.isVideoEnabled()))
                                },
                                participantsWithVideos() {
                                    let e = [];
                                    return this.remoteParticipantsWithVideos.forEach((t => {
                                        e.push(t.id)
                                    })), this.hasLocalVideo && e.unshift(this.currentUser.id), e = function sortArray(e, t, s) {
                                        const a = isArray(t) ? t : [t],
                                            o = isArray(s) ? s : [s],
                                            n = e.slice(0);
                                        return n.sort(((e, t) => {
                                            let s = 0;
                                            for (let n = 0; n < a.length && 0 === s; n++) s = compareValues(e, t, a[n], o[n]);
                                            return s
                                        })), n
                                    }(e, (e => {
                                        const t = this.activeRoom.pinnedVideos.length;
                                        if (this.activeRoom.pinnedVideos.includes(e)) return this.activeRoom.pinnedVideos.indexOf(e);
                                        if (this.activeRoom.members.find(e).isOwner()) return t + 1;
                                        if (isCurrentUser(e)) return t + 2;
                                        const s = this.activeRoom.members.findIndex((t => t.id === e));
                                        return -1 === s ? 1e5 : 1e4 + s
                                    })), e
                                },
                                participantsToShow() {
                                    const e = (this.currentPage - 1) * this.videosPerPage;
                                    return this.participantsWithVideos.slice(e, e + this.videosPerPage)
                                },
                                hasLocalVideo() {
                                    return this.videoRoom.isVideoEnabled()
                                },
                                totalPages() {
                                    return Math.ceil(this.participantsWithVideos.length / this.videosPerPage)
                                },
                                isMultiVideoLayout() {
                                    return this.isVideosPinned || this.remoteParticipantsWithVideos.length > 1
                                },
                                isLocalVideoSmall() {
                                    return !this.isVideosPinned && !this.isMultiVideoLayout && this.remoteParticipantsWithVideos.length > 0
                                },
                                videosPerPage() {
                                    if (!this.isVideosPinned) return 4;
                                    let e = this.windowHeight,
                                        t = this.getMaxVideosForHeight(e);
                                    return Math.ceil(this.participantsWithVideos.length / t) > 1 && (e -= 41), t = this.getMaxVideosForHeight(e), t
                                }
                            },
                            mounted() {
                                window.addEventListener("resize", this.onWindowResize), this.onWindowResize()
                            },
                            beforeDestroy() {
                                window.removeEventListener("resize", this.onWindowResize)
                            },
                            methods: {
                                getUserVideo: e => function getUserVideo(e) {
                                    const t = getActiveVideoRoom(),
                                        s = getActiveRoom();
                                    if (t && s) {
                                        if (s.largeClassroom) {
                                            const t = getActiveTwilioRoom();
                                            let s;
                                            if (e === getCurrentUser().id) null == t || t.localParticipant.videoTracks.forEach((e => {
                                                e.isTrackEnabled && (s = e.track.attach())
                                            }));
                                            else {
                                                const a = Array.from((null == t ? void 0 : t.participants.values()) || []).find((t => t.identity === e));
                                                null == a || a.videoTracks.forEach((e => {
                                                    e.isSubscribed && e.track && (s = e.track.attach())
                                                }))
                                            }
                                            return s && (s.muted = !0), s
                                        } {
                                            const t = getActiveWebrtcRoom();
                                            if (e === getCurrentUser().id) return null == t ? void 0 : t.attachLocalVideoElement();
                                            const s = null == t ? void 0 : t.participants.find(e);
                                            return null == s ? void 0 : s.attachVideoElement()
                                        }
                                    }
                                }(e),
                                onChangePage({
                                    page: e
                                }) {
                                    this.currentPage = e
                                },
                                onToggleVideo({
                                    enabled: e,
                                    userId: t
                                }) {
                                    isCurrentUser(t) ? toggleVideo(this.activeRoom, e) : toggleMemberVideo(this.activeRoom.id, t, e)
                                },
                                onToggleAudio({
                                    enabled: e,
                                    userId: t
                                }) {
                                    isCurrentUser(t) ? toggleAudio(this.activeRoom, e) : toggleMemberAudio(this.activeRoom.id, t, e)
                                },
                                onWindowResize() {
                                    this.windowHeight = window.innerHeight
                                },
                                getMaxVideosForHeight: e => Math.max(1, Math.floor(e / 173)),
                                onTogglePinVideo({
                                    userId: e,
                                    isPinned: t
                                }) {
                                    ! function togglePinVideo(e, t, s) {
                                        const a = getRoom(e);
                                        if (!a) return;
                                        if (!isRoomOwner(e)) return;
                                        const o = [...a.pinnedVideos];
                                        s ? o.includes(t) || (o.push(t), updatePinnedVideos(e, o)) : o.includes(t) && (o.splice(o.indexOf(t), 1), updatePinnedVideos(e, o))
                                    }(this.activeRoom.id, e, t)
                                },
                                onReorderPinnedVideos(e) {
                                    !async function reorderPinnedVideos(e, t) {
                                        const s = getRoom(e);
                                        if (!s) return;
                                        const a = [...s.pinnedVideos];
                                        if (!a.includes(t.userId) || !a.includes(t.targetUserId)) return;
                                        const o = a.indexOf(t.userId),
                                            n = a.indexOf(t.targetUserId);
                                        a.splice(o, 1), a.splice(n, 0, t.userId), await updatePinnedVideos(e, a)
                                    }(this.activeRoom.id, e)
                                }
                            }
                        }),
                        Ip = Rp,
                        jp = (0, ns.Z)(Ip, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return e.videoRoom ? s("room-video", {
                                attrs: {
                                    "active-room": e.activeRoom,
                                    "video-room": e.videoRoom,
                                    "current-user": e.currentUser,
                                    "is-room-owner": e.isRoomOwner,
                                    "is-video-container-mounted": e.isVideoContainerMounted,
                                    "is-videos-pinned": e.isVideosPinned,
                                    "is-local-video-small": e.isLocalVideoSmall,
                                    "is-multi-video-layout": e.isMultiVideoLayout,
                                    "current-page": e.currentPage,
                                    "get-user-video": e.getUserVideo,
                                    "participant-ids": e.participantsToShow,
                                    "total-pages": e.totalPages
                                },
                                on: {
                                    "change-page": e.onChangePage,
                                    "toggle-audio": e.onToggleAudio,
                                    "toggle-video": e.onToggleVideo,
                                    "toggle-pin-video": e.onTogglePinVideo,
                                    "reorder-pinned-videos": e.onReorderPinnedVideos
                                }
                            }) : e._e()
                        }), [], !1, null, null, null).exports,
                        Bp = (0, g.aZ)({
                            emits: ["mount", "unmount"],
                            mounted() {
                                this.$emit("mount")
                            },
                            beforeDestroy() {
                                this.$emit("unmount")
                            }
                        }),
                        Lp = (0, ns.Z)(Bp, (function() {
                            var e = this.$createElement;
                            return (this._self._c || e)("div", {
                                attrs: {
                                    id: "unpinned-video-room"
                                }
                            })
                        }), [], !1, null, null, null).exports;

                    function splitPgn(e) {
                        return Ne().pgnToJson(e).map(((t, s) => {
                            const a = Ne().createGame({
                                analysis: !0
                            });
                            return a.loadPgn(e, s), a.pgn({})
                        }))
                    }
                    async function addBoardFromStudy(e, t) {
                        let s;
                        try {
                            s = await async function getPgnFromStudy(e) {
                                const t = i.Z.generate("web_classroom_import_study"),
                                    {
                                        data: s
                                    } = await r.Z.get(t, {
                                        params: {
                                            url: e
                                        }
                                    });
                                return s.pgn
                            }(t)
                        } catch (a) {
                            showHttpError(a)
                        }
                        s && (Q.addingBoards.push(e), await forEachAsync(splitPgn(s), (async t => {
                            await addBoardFromPgn(e, {
                                pgn: t
                            })
                        })), removeFromArray(Q.addingBoards, e))
                    }

                    function isFenValid(e) {
                        return !1 !== Ne().getPositionInfo(e)
                    }
                    var Dp = {
                            name: "Accordion",
                            props: {
                                actionIcon: {
                                    type: String
                                },
                                contentClass: {
                                    type: [String, Array],
                                    default: ""
                                },
                                headerIcon: {
                                    type: String
                                },
                                headerText: {
                                    type: String
                                },
                                isOpen: {
                                    type: Boolean,
                                    default: !1
                                }
                            },
                            emits: ["header-click", "action-click", "click"],
                            computed: {
                                iconRight() {
                                    return this.actionIcon || this.caretIcon
                                },
                                caretIcon() {
                                    return "caret-" + (this.isOpen ? "down" : "right")
                                }
                            },
                            methods: {
                                handleActionIconClick() {
                                    this.actionIcon ? this.$emit("action-click") : this.$emit("header-click")
                                }
                            }
                        },
                        Up = {
                            component: "accordion-component",
                            heading: "accordion-heading",
                            trigger: "accordion-trigger",
                            icon: "accordion-icon",
                            big: "accordion-big",
                            right: "accordion-right",
                            content: "accordion-content",
                            open: "accordion-open"
                        };
                    var zp = (0, ns.Z)(Dp, (function() {
                            var e, t = this,
                                s = t.$createElement,
                                a = t._self._c || s;
                            return a("div", {
                                class: t.$style.component,
                                on: {
                                    click: function(e) {
                                        return t.$emit("click", e)
                                    }
                                }
                            }, [a("div", {
                                class: t.$style.heading
                            }, [a("button", {
                                class: t.$style.trigger,
                                attrs: {
                                    type: "button"
                                },
                                on: {
                                    click: function(e) {
                                        return t.$emit("header-click")
                                    }
                                }
                            }, [t.headerIcon ? a("span", {
                                staticClass: "icon-font-chess",
                                class: [t.$style.icon, t.$style.big, t.headerIcon]
                            }) : t._e(), t._v(" "), a("span", {
                                domProps: {
                                    textContent: t._s(t.headerText)
                                }
                            }), t._v(" "), a("span", {
                                class: ["icon-font-chess", t.$style.icon, t.$style.right, t.iconRight],
                                on: {
                                    click: function(e) {
                                        return e.stopPropagation(), t.handleActionIconClick.apply(null, arguments)
                                    }
                                }
                            })])]), t._v(" "), t.isOpen ? a("section", {
                                class: [t.contentClass, t.$style.content, (e = {}, e[t.$style.open] = t.isOpen, e)]
                            }, [t._t("default")], 2) : t._e()])
                        }), [], !1, (function accordion_injectStyles(e) {
                            this.$style = Up.locals || Up
                        }), null, null),
                        qp = zp.exports,
                        Vp = (0, g.aZ)({
                            name: "ImportStudy",
                            components: {
                                V5Button: ko.V5Button,
                                V5Input: ko.V5Input
                            },
                            emits: ["load"],
                            data: () => ({
                                url: ""
                            })
                        }),
                        Np = {
                            button: "import-study-button"
                        };
                    var Zp = (0, ns.Z)(Vp, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.$style.component
                            }, [s("v5-input", {
                                attrs: {
                                    placeholder: e.$trans("Study URL")
                                },
                                model: {
                                    value: e.url,
                                    callback: function(t) {
                                        e.url = t
                                    },
                                    expression: "url"
                                }
                            }), e._v(" "), s("v5-button", {
                                class: e.$style.button,
                                attrs: {
                                    size: "small",
                                    theme: "primary"
                                },
                                domProps: {
                                    textContent: e._s(e.$trans("Load"))
                                },
                                on: {
                                    click: function(t) {
                                        return e.$emit("load", e.url)
                                    }
                                }
                            })], 1)
                        }), [], !1, (function import_study_injectStyles(e) {
                            this.$style = Np.locals || Np
                        }), null, null).exports,
                        Fp = {
                            name: "LoadFromFen",
                            components: {
                                V5Button: ko.V5Button,
                                V5Input: ko.V5Input
                            },
                            emits: ["load"],
                            data: () => ({
                                fen: ""
                            })
                        },
                        Gp = {
                            accordion: "load-from-fen-accordion",
                            controls: "load-from-fen-controls",
                            stretch: "load-from-fen-stretch",
                            select: "load-from-fen-select",
                            button: "load-from-fen-button"
                        };
                    var Wp = (0, ns.Z)(Fp, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.$style.component
                            }, [s("v5-input", {
                                attrs: {
                                    "aria-label": e.$trans("Paste FEN"),
                                    placeholder: e.$trans("Paste FEN")
                                },
                                model: {
                                    value: e.fen,
                                    callback: function(t) {
                                        e.fen = t
                                    },
                                    expression: "fen"
                                }
                            }), e._v(" "), s("v5-button", {
                                class: e.$style.button,
                                attrs: {
                                    size: "small",
                                    theme: "primary"
                                },
                                domProps: {
                                    textContent: e._s(e.$trans("Load"))
                                },
                                on: {
                                    click: function(t) {
                                        return e.$emit("load", e.fen)
                                    }
                                }
                            })], 1)
                        }), [], !1, (function load_from_fen_injectStyles(e) {
                            this.$style = Gp.locals || Gp
                        }), null, null).exports,
                        Hp = {
                            name: "LoadFromPgn",
                            components: {
                                V5Button: ko.V5Button,
                                V5Textarea: ko.V5Textarea
                            },
                            emits: ["load"],
                            data: () => ({
                                pgn: ""
                            }),
                            computed: {
                                placeholder() {
                                    return this.$trans("Paste one or more PGNs")
                                }
                            }
                        },
                        Yp = {
                            accordion: "load-from-pgn-accordion",
                            controls: "load-from-pgn-controls",
                            stretch: "load-from-pgn-stretch",
                            select: "load-from-pgn-select",
                            button: "load-from-pgn-button",
                            textarea: "load-from-pgn-textarea"
                        };
                    var Kp = (0, ns.Z)(Hp, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", [s("v5-textarea", {
                                class: e.$style.textarea,
                                attrs: {
                                    "aria-label": e.placeholder,
                                    placeholder: e.placeholder
                                },
                                model: {
                                    value: e.pgn,
                                    callback: function(t) {
                                        e.pgn = t
                                    },
                                    expression: "pgn"
                                }
                            }), e._v(" "), s("v5-button", {
                                class: e.$style.button,
                                attrs: {
                                    size: "small",
                                    theme: "primary"
                                },
                                domProps: {
                                    textContent: e._s(e.$trans("Load"))
                                },
                                on: {
                                    click: function(t) {
                                        return e.$emit("load", e.pgn)
                                    }
                                }
                            })], 1)
                        }), [], !1, (function load_from_pgn_injectStyles(e) {
                            this.$style = Yp.locals || Yp
                        }), null, null).exports,
                        Qp = (0, g.aZ)({
                            name: "SetupBoard",
                            components: {
                                Accordion: qp,
                                LoadFromFen: Wp,
                                LoadFromPgn: Kp,
                                ImportStudy: Zp
                            },
                            props: {
                                selectedTab: {
                                    type: String,
                                    required: !1
                                }
                            },
                            emits: ["load-fen", "load-pgn", "select-tab", "import-study"],
                            data: () => ({
                                SetupBoardTab: Re
                            }),
                            computed: {
                                isExplorerVisible: () => window.chesscom.features.includes("classroom_load_from_explorer")
                            },
                            methods: {
                                onTabClick(e) {
                                    this.$emit("select-tab", {
                                        tab: e
                                    })
                                },
                                onLoadFen(e) {
                                    this.$emit("load-fen", {
                                        fen: e
                                    })
                                },
                                onLoadPgn(e) {
                                    this.$emit("load-pgn", {
                                        pgn: e
                                    })
                                },
                                onImportStudy(e) {
                                    this.$emit("import-study", {
                                        url: e
                                    })
                                }
                            }
                        }),
                        Jp = {
                            component: "setup-board-component",
                            label: "setup-board-label",
                            accordion: "setup-board-accordion",
                            open: "setup-board-open",
                            pgn: "setup-board-pgn"
                        };
                    var Xp = (0, ns.Z)(Qp, (function() {
                            var e, t = this,
                                s = t.$createElement,
                                a = t._self._c || s;
                            return a("div", {
                                class: t.$style.component
                            }, [a("div", {
                                class: t.$style.label,
                                domProps: {
                                    textContent: t._s(t.$trans("Make moves, or..."))
                                }
                            }), t._v(" "), a("accordion", {
                                class: t.$style.accordion,
                                attrs: {
                                    "header-icon": "plus",
                                    "header-text": t.$trans("Set Up Position")
                                },
                                on: {
                                    "header-click": function(e) {
                                        return t.onTabClick(t.SetupBoardTab.SetupPosition)
                                    }
                                }
                            }), t._v(" "), a("accordion", {
                                class: t.$style.accordion,
                                attrs: {
                                    "header-icon": "chess-pawn-rook",
                                    "header-text": t.$trans("Load FEN"),
                                    "is-open": t.selectedTab === t.SetupBoardTab.LoadFen
                                },
                                on: {
                                    "header-click": function(e) {
                                        return t.onTabClick(t.SetupBoardTab.LoadFen)
                                    }
                                }
                            }, [a("load-from-fen", {
                                on: {
                                    load: t.onLoadFen
                                }
                            })], 1), t._v(" "), a("accordion", {
                                class: [t.$style.accordion, t.$style.pgn, (e = {}, e[t.$style.open] = t.selectedTab === t.SetupBoardTab.LoadPgn, e)],
                                attrs: {
                                    "header-icon": "chess-board",
                                    "header-text": t.$trans("Load PGN"),
                                    "is-open": t.selectedTab === t.SetupBoardTab.LoadPgn
                                },
                                on: {
                                    "header-click": function(e) {
                                        return t.onTabClick(t.SetupBoardTab.LoadPgn)
                                    }
                                }
                            }, [a("load-from-pgn", {
                                on: {
                                    load: t.onLoadPgn
                                }
                            })], 1), t._v(" "), a("accordion", {
                                class: t.$style.accordion,
                                attrs: {
                                    "header-icon": "library",
                                    "header-text": t.$trans("Load From Library")
                                },
                                on: {
                                    "header-click": function(e) {
                                        return t.onTabClick(t.SetupBoardTab.LoadFromLibrary)
                                    }
                                }
                            }), t._v(" "), a("accordion", {
                                class: t.$style.accordion,
                                attrs: {
                                    "header-icon": "chess-board-folder",
                                    "header-text": t.$trans("Load From Archive")
                                },
                                on: {
                                    "header-click": function(e) {
                                        return t.onTabClick(t.SetupBoardTab.LoadFromArchive)
                                    }
                                }
                            }), t._v(" "), t.isExplorerVisible ? a("accordion", {
                                class: t.$style.accordion,
                                attrs: {
                                    "header-icon": "circle-compass",
                                    "header-text": t.$trans("Load From Explorer")
                                },
                                on: {
                                    "header-click": function(e) {
                                        return t.onTabClick(t.SetupBoardTab.LoadFromExplorer)
                                    }
                                }
                            }) : t._e(), t._v(" "), a("accordion", {
                                class: t.$style.accordion,
                                attrs: {
                                    "header-icon": "play-new",
                                    "header-text": t.$trans("Import Study"),
                                    "is-open": t.selectedTab === t.SetupBoardTab.ImportStudy
                                },
                                on: {
                                    "header-click": function(e) {
                                        return t.onTabClick(t.SetupBoardTab.ImportStudy)
                                    }
                                }
                            }, [a("import-study", {
                                on: {
                                    load: t.onImportStudy
                                }
                            })], 1), t._v(" "), t._t("default")], 2)
                        }), [], !1, (function setup_board_injectStyles(e) {
                            this.$style = Jp.locals || Jp
                        }), null, null).exports,
                        eb = (0, g.aZ)({
                            name: "SetupBoardController",
                            components: {
                                SetupBoard: Xp
                            },
                            computed: {
                                selectedTab: () => getSelectedSetupBoardTab(),
                                activeRoom: () => getActiveRoom(),
                                activeBoard: () => getActiveBoard()
                            },
                            methods: {
                                onSelectTab({
                                    tab: e
                                }) {
                                    selectSetupBoardTab(e)
                                },
                                onLoadFen({
                                    fen: e
                                }) {
                                    !async function loadFen(e) {
                                        if (!isFenValid(e)) return void showError((0, V.dW)("This is not a valid FEN."));
                                        const t = getActiveRoom(),
                                            s = getActiveBoard(),
                                            a = getActiveChessboard();
                                        t && s && a && (a.game.load({
                                            fen: e
                                        }), await makeMove(t.id, s.id, {
                                            pgn: a.game.getPGN(),
                                            line: 0,
                                            move: 0
                                        }), await publishDraft(t.id, s.id))
                                    }(e), this.showBoardsList()
                                },
                                onLoadPgn({
                                    pgn: e
                                }) {
                                    forEachAsync(splitPgn(e), (async e => {
                                        await addBoardFromPgn(this.activeRoom.id, {
                                            pgn: e
                                        })
                                    })), this.showBoardsList()
                                },
                                onImportStudy({
                                    url: e
                                }) {
                                    addBoardFromStudy(this.activeRoom.id, e), this.showBoardsList()
                                },
                                showBoardsList() {
                                    toggleBoardsList(!0), selectRoomTab(Me.Boards), selectSetupBoardTab(Re.None)
                                }
                            }
                        }),
                        tb = eb,
                        sb = (0, ns.Z)(tb, (function() {
                            var e = this,
                                t = e.$createElement;
                            return (e._self._c || t)("setup-board", {
                                attrs: {
                                    "selected-tab": e.selectedTab
                                },
                                on: {
                                    "import-study": e.onImportStudy,
                                    "load-fen": e.onLoadFen,
                                    "load-pgn": e.onLoadPgn,
                                    "select-tab": e.onSelectTab
                                }
                            })
                        }), [], !1, null, null, null).exports;
                    var ab = s(162),
                        ob = (e => (e.K = "K", e.Q = "Q", e.k = "k", e.q = "q", e))(ob || {}),
                        nb = (0, g.aZ)({
                            name: "SetupPosition",
                            components: {
                                FormCheckbox: ab.Z,
                                V5Button: ko.V5Button,
                                V5Input: ko.V5Input,
                                V5Select: ko.V5Select,
                                V5Textarea: ko.V5Textarea
                            },
                            directives: {
                                tooltip: Sa.Z
                            },
                            props: {
                                boardId: {
                                    type: String,
                                    required: !0
                                },
                                fen: {
                                    type: String,
                                    required: !0
                                },
                                pgn: {
                                    type: String,
                                    required: !0
                                }
                            },
                            emits: ["clear-board", "flip-board", "load-pgn", "reset-board", "update-fen", "update-pgn"],
                            data: () => ({
                                localPgn: "",
                                playerToMoveOptions: [{
                                    label: Vt.Z.trans("White to move"),
                                    value: "w"
                                }, {
                                    label: Vt.Z.trans("Black to move"),
                                    value: "b"
                                }],
                                Castling: ob
                            }),
                            computed: {
                                castlingRules() {
                                    const e = this.castlingFenPart;
                                    return {
                                        K: e.includes("K"),
                                        Q: e.includes("Q"),
                                        k: e.includes("k"),
                                        q: e.includes("q")
                                    }
                                },
                                castlingFenPart() {
                                    return this.getFenParts()[2]
                                },
                                playerToMove() {
                                    return "w" === this.getFenParts()[1] ? q.White : q.Black
                                }
                            },
                            watch: {
                                pgn: {
                                    handler() {
                                        this.localPgn = this.pgn
                                    },
                                    immediate: !0
                                },
                                fen: {
                                    handler() {
                                        this.localFen = this.fen
                                    },
                                    immediate: !0
                                }
                            },
                            methods: {
                                changePlayerToMove(e) {
                                    const t = this.getFenParts();
                                    t[1] = e, this.handleFenParts(t)
                                },
                                onChangeCastlingRule(e, t) {
                                    const s = this.getFenParts(),
                                        a = s[2],
                                        o = ["K", "Q", "k", "q"].filter((s => s === e ? t : a.includes(s)));
                                    s[2] = o.join(""), this.handleFenParts(s)
                                },
                                handleFenParts(e) {
                                    const t = e.join(" ");
                                    this.updateFen(t)
                                },
                                getFenParts() {
                                    return this.fen.split(" ")
                                },
                                onClickFlipBoard() {
                                    this.$emit("flip-board")
                                },
                                onClickResetBoard() {
                                    this.$emit("reset-board")
                                },
                                onClickClearBoard() {
                                    this.$emit("clear-board")
                                },
                                updateFen(e) {
                                    this.$emit("update-fen", {
                                        fen: e
                                    })
                                },
                                onInputFen(e) {
                                    isFenValid(e) && this.$emit("update-fen", {
                                        fen: e
                                    })
                                },
                                onBlurPgn() {
                                    this.localPgn !== this.pgn && (! function isPgnValid(e) {
                                        return !1 !== Ne().pgnToJson(e, 0)
                                    }(this.localPgn) ? this.localPgn = this.pgn : this.$emit("update-pgn", {
                                        pgn: this.localPgn
                                    }))
                                },
                                onInputPgn(e) {
                                    this.localPgn = e
                                },
                                onClickLoad() {
                                    this.$emit("load-pgn", {
                                        pgn: this.localPgn
                                    })
                                }
                            }
                        }),
                        rb = {
                            component: "setup-position-component",
                            pieces: "setup-position-pieces",
                            bottom: "setup-position-bottom",
                            icon: "setup-position-icon",
                            options: "setup-position-options",
                            controls: "setup-position-controls",
                            labels: "setup-position-labels",
                            player: "setup-position-player",
                            fen: "setup-position-fen",
                            pgn: "setup-position-pgn"
                        };
                    var ib = (0, ns.Z)(nb, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.$style.component
                            }, [s("div", {
                                class: e.$style.pieces
                            }, [s("hand-pieces", {
                                attrs: {
                                    direction: "horizontal",
                                    "board-id": e.boardId
                                }
                            })], 1), e._v(" "), s("div", {
                                class: e.$style.bottom
                            }, [s("div", {
                                class: e.$style.options
                            }, [s("v5-select", {
                                attrs: {
                                    "aria-label": e.$trans("Color to move"),
                                    options: e.playerToMoveOptions,
                                    value: e.playerToMove
                                },
                                on: {
                                    input: e.changePlayerToMove
                                }
                            }), e._v(" "), s("div", {
                                class: e.$style.controls
                            }, [s("span", {
                                directives: [{
                                    name: "tooltip",
                                    rawName: "v-tooltip",
                                    value: e.$trans("Flip Board"),
                                    expression: "$trans('Flip Board')"
                                }],
                                staticClass: "icon-font-chess repeat",
                                class: e.$style.icon,
                                on: {
                                    click: e.onClickFlipBoard
                                }
                            }), e._v(" "), s("span", {
                                directives: [{
                                    name: "tooltip",
                                    rawName: "v-tooltip",
                                    value: e.$trans("Reset Board"),
                                    expression: "$trans('Reset Board')"
                                }],
                                staticClass: "icon-font-chess undo",
                                class: e.$style.icon,
                                on: {
                                    click: e.onClickResetBoard
                                }
                            }), e._v(" "), s("span", {
                                directives: [{
                                    name: "tooltip",
                                    rawName: "v-tooltip",
                                    value: e.$trans("Clear Board"),
                                    expression: "$trans('Clear Board')"
                                }],
                                staticClass: "icon-font-chess trash",
                                class: e.$style.icon,
                                on: {
                                    click: e.onClickClearBoard
                                }
                            })])], 1), e._v(" "), s("div", {
                                class: e.$style.labels
                            }, [s("label", {
                                class: e.$style.player,
                                domProps: {
                                    textContent: e._s(e.$trans("White"))
                                }
                            }), e._v(" "), s("label", {
                                class: e.$style.player,
                                domProps: {
                                    textContent: e._s(e.$trans("Black"))
                                }
                            }), e._v(" "), s("form-checkbox", {
                                attrs: {
                                    label: "(O-O)",
                                    name: "castling-rule-K",
                                    value: e.castlingRules.K
                                },
                                on: {
                                    input: function(t) {
                                        return e.onChangeCastlingRule(e.Castling.K, t)
                                    }
                                }
                            }), e._v(" "), s("form-checkbox", {
                                attrs: {
                                    label: "(O-O)",
                                    name: "castling-rule-k",
                                    value: e.castlingRules.k
                                },
                                on: {
                                    input: function(t) {
                                        return e.onChangeCastlingRule(e.Castling.k, t)
                                    }
                                }
                            }), e._v(" "), s("form-checkbox", {
                                attrs: {
                                    label: "(O-O-O)",
                                    name: "castling-rule-Q",
                                    value: e.castlingRules.Q
                                },
                                on: {
                                    input: function(t) {
                                        return e.onChangeCastlingRule(e.Castling.Q, t)
                                    }
                                }
                            }), e._v(" "), s("form-checkbox", {
                                attrs: {
                                    label: "(O-O-O)",
                                    name: "castling-rule-q",
                                    value: e.castlingRules.q
                                },
                                on: {
                                    input: function(t) {
                                        return e.onChangeCastlingRule(e.Castling.q, t)
                                    }
                                }
                            })], 1), e._v(" "), s("v5-input", {
                                class: e.$style.fen,
                                attrs: {
                                    placeholder: e.$trans("Enter FEN"),
                                    value: e.fen
                                },
                                on: {
                                    input: e.onInputFen
                                }
                            }), e._v(" "), s("v5-textarea", {
                                class: e.$style.pgn,
                                attrs: {
                                    placeholder: e.$trans("Enter PGN"),
                                    value: e.localPgn
                                },
                                on: {
                                    blur: e.onBlurPgn,
                                    input: e.onInputPgn
                                }
                            }), e._v(" "), s("v5-button", {
                                attrs: {
                                    size: "small",
                                    theme: "primary"
                                },
                                domProps: {
                                    textContent: e._s(e.$trans("Load"))
                                },
                                on: {
                                    click: e.onClickLoad
                                }
                            })], 1)])
                        }), [], !1, (function setup_position_injectStyles(e) {
                            this.$style = rb.locals || rb
                        }), null, null).exports,
                        lb = (0, g.aZ)({
                            name: "SetupPositionController",
                            components: {
                                SetupPosition: ib
                            },
                            computed: {
                                activeChessboardElementId: () => getActiveChessboardElementId(),
                                activeRoom: () => getActiveRoom(),
                                activeBoard: () => getActiveBoard(),
                                chessboard: () => getActiveChessboard(),
                                currentFen() {
                                    return Ne().pgnToFen(this.currentPgn, -1)
                                },
                                currentPgn() {
                                    return this.activeBoard.pgn
                                }
                            },
                            mounted() {
                                loadChessboardMode(this.activeRoom, this.activeBoard)
                            },
                            beforeDestroy() {
                                selectSetupBoardTab(Re.None)
                            },
                            methods: {
                                onUpdateFen({
                                    fen: e
                                }) {
                                    this.chessboard.game.load({
                                        fen: e
                                    }), this.updateBoard()
                                },
                                onUpdatePgn({
                                    pgn: e
                                }) {
                                    this.chessboard.game.load({
                                        pgn: e
                                    }), this.updateBoard()
                                },
                                onLoadPgn({
                                    pgn: e
                                }) {
                                    const t = this.activeRoom.id;
                                    forEachAsync(splitPgn(e), (async e => {
                                        await addBoardFromPgn(t, {
                                            pgn: e
                                        })
                                    })), selectSetupBoardTab(Re.None)
                                },
                                onFlipBoard() {
                                    flipBoard()
                                },
                                onClearBoard() {
                                    this.chessboard.game.load({
                                        fen: "8/8/8/8/8/8/8/8"
                                    }), this.updateBoard()
                                },
                                onResetBoard() {
                                    this.chessboard.game.load({
                                        fen: (0, O.H)()
                                    }), this.updateBoard()
                                },
                                updateBoard() {
                                    makeMove(this.activeRoom.id, this.activeBoard.id, getChessboardMove())
                                }
                            }
                        }),
                        cb = (0, ns.Z)(lb, (function() {
                            var e = this,
                                t = e.$createElement;
                            return (e._self._c || t)("setup-position", {
                                attrs: {
                                    "board-id": e.activeChessboardElementId,
                                    fen: e.currentFen,
                                    pgn: e.currentPgn
                                },
                                on: {
                                    "flip-board": e.onFlipBoard,
                                    "reset-board": e.onResetBoard,
                                    "clear-board": e.onClearBoard,
                                    "update-fen": e.onUpdateFen,
                                    "update-pgn": e.onUpdatePgn,
                                    "load-pgn": e.onLoadPgn
                                }
                            })
                        }), [], !1, null, null, null).exports,
                        db = (0, g.aZ)({
                            name: "TransitionRoomContent",
                            extends: hh
                        }),
                        ub = {
                            enter: "transition-room-content-enter",
                            reverse: "transition-room-content-reverse",
                            "enter-active": "transition-room-content-enter-active",
                            "enter-to": "transition-room-content-enter-to",
                            leave: "transition-room-content-leave",
                            "leave-active": "transition-room-content-leave-active",
                            "leave-to": "transition-room-content-leave-to"
                        };
                    var mb = (0, ns.Z)(db, undefined, undefined, !1, (function transition_room_content_injectStyles(e) {
                            this.$style = ub.locals || ub
                        }), null, null).exports,
                        hb = (0, g.aZ)({
                            name: "RoomController",
                            components: {
                                BoardControls: tl,
                                ChatContainer: Tl,
                                LoadFromArchive: qd,
                                LoadFromExplorer: Pu,
                                LoadFromLibrary: Vu,
                                RoomBoardsTab: Fm,
                                RoomContent: Hm,
                                RoomControls: uh,
                                RoomHeader: xh,
                                RoomMembersTab: Cp,
                                RoomTabs: $p,
                                RoomVideo: jp,
                                RoomVideoContainer: Lp,
                                SetupBoard: sb,
                                SetupPosition: cb,
                                TransitionRoomContent: mb
                            },
                            computed: {
                                headerTitle() {
                                    return this.isSetupBoardVisible ? this.$trans("Add Games") : this.isSetupPositionVisible ? this.$trans("Setup Position") : this.isLoadFromArchiveVisible ? this.$trans("Load From Archive") : this.isLoadFromLibraryVisible ? this.$trans("Load From Library") : this.isLoadFromExplorerVisible ? this.$trans("Load From Explorer") : this.$trans("Classroom")
                                },
                                headerIcon() {
                                    return this.isSetupBoardVisible || this.isSetupPositionVisible ? "plus" : this.isLoadFromArchiveVisible ? "chess-board-folder" : this.isLoadFromLibraryVisible ? "library" : this.isLoadFromExplorerVisible ? "circle-compass" : ""
                                },
                                showBack() {
                                    return this.isSetupPositionVisible || this.isLoadFromArchiveVisible || this.isLoadFromLibraryVisible || this.isLoadFromExplorerVisible || this.isSetupBoardVisible
                                },
                                isRoomContentVisible() {
                                    return Boolean(this.activeRoom && !this.showBack)
                                },
                                isSetupBoardVisible: () => isSetupBoardVisible(),
                                isSetupBoardVisibleInsideGamesTab() {
                                    var e;
                                    return Boolean(this.activeRoom && this.isBoardsTabActive && !this.activeRoom.hasNonDraftBoards() && canLoadGames(this.activeRoom.id) && (null == (e = this.activeBoard) ? void 0 : e.userId) === getCurrentUser().id)
                                },
                                isSetupPositionVisible: () => isSetupPositionVisible(),
                                isLoadFromArchiveVisible: () => function isLoadFromArchiveVisible() {
                                    return getSelectedSetupBoardTab() === Re.LoadFromArchive
                                }(),
                                isLoadFromLibraryVisible: () => function isLoadFromLibraryVisible() {
                                    return getSelectedSetupBoardTab() === Re.LoadFromLibrary
                                }(),
                                isLoadFromExplorerVisible: () => isLoadFromExplorerVisible(),
                                selectedTab: () => getSelectedRoomTab(),
                                activeRoom: () => getActiveRoom(),
                                activeBoard: () => getActiveBoard(),
                                isBoardsTabActive() {
                                    return this.selectedTab === Me.Boards
                                },
                                isMembersTabActive() {
                                    return this.selectedTab === Me.Members
                                },
                                currentTime: () => getCurrentTime(),
                                isOwner() {
                                    return !!this.activeRoom && isRoomOwner(this.activeRoom.id)
                                },
                                videoRoom() {
                                    return this.activeRoom ? getVideoRoom(this.activeRoom.id) : null
                                },
                                isVideoEnabled() {
                                    var e, t;
                                    return Boolean((null == (e = this.videoRoom) ? void 0 : e.isVideoEnabled()) || (null == (t = this.videoRoom) ? void 0 : t.isVideoStarting()))
                                },
                                isVideosPinned: () => isVideosPinned(),
                                isPremium: () => getCurrentUser().isPremium(),
                                isChatVisible() {
                                    return Boolean(this.activeRoom && isChatVisible())
                                },
                                isChatEnabled() {
                                    var e;
                                    return this.isOwner || !(null == (e = this.activeRoom) ? void 0 : e.chatMuteAll)
                                },
                                isAtEndOfLine() {
                                    var e, t, s;
                                    return null == (s = null == (t = null == (e = getActiveChessboardWithState()) ? void 0 : e.state) ? void 0 : t.isAtEndOfLine) || s
                                },
                                hasBoardControl() {
                                    var e;
                                    return Boolean(this.activeRoom && (null == (e = getCurrentMember(this.activeRoom.id)) ? void 0 : e.hasBoardControl()))
                                },
                                newChatMessages: () => function getNewChatMessages() {
                                    var e, t;
                                    if (Ie.isChatVisible) return 0;
                                    const s = null != (t = null == (e = getActiveRoom()) ? void 0 : e.chatMessages.length) ? t : 0;
                                    return Math.max(0, s - Ie.toggleChatMessages)
                                }(),
                                chatMinHeight: () => 160,
                                chatMaxHeight: () => getChatMaxHeight,
                                isChatResizable: () => !0,
                                shouldDispatchResize() {
                                    return [getSelectedSetupBoardTab(), this.selectedTab, this.isVideoEnabled]
                                },
                                currentUser: () => getCurrentUser()
                            },
                            watch: {
                                shouldDispatchResize() {
                                    setTimeout(dispatchResize, 100)
                                }
                            },
                            mounted() {
                                !async function loadCountries() {
                                    if (la.countries) return;
                                    const {
                                        data: e
                                    } = await r.Z.get(i.Z.generate("web_classroom_callback_get_countries"));
                                    la.countries = e
                                }()
                            },
                            methods: {
                                onToggleVideo({
                                    enabled: e
                                }) {
                                    toggleVideo(this.activeRoom, e)
                                },
                                onToggleAudio({
                                    enabled: e
                                }) {
                                    toggleAudio(this.activeRoom, e)
                                },
                                onTogglePinVideos() {
                                    ! function toggleVideosPinned(e = !Qs.videosPinned) {
                                        Qs.videosPinned = e, zs.emit(Us.ToggleVideosPinned)
                                    }()
                                },
                                onSelectTab({
                                    tab: e
                                }) {
                                    selectRoomTab(e)
                                },
                                onClickBack() {
                                    this.isSetupBoardVisible ? closeBoard(this.activeRoom.id, this.activeBoard.id) : selectSetupBoardTab(Re.None)
                                },
                                onClickLeave() {
                                    this.activeRoom.isEmpty() ? closeRoom(this.activeRoom.id) : showConfirmCloseRoomModal()
                                },
                                onSetClock(e) {
                                    updateRoomClock(this.activeRoom.id, e)
                                },
                                onGoToEnd() {
                                    getActiveChessboard().game.selectLineEnd()
                                },
                                onGoToStart() {
                                    getActiveChessboard().game.selectLineStart()
                                },
                                onMoveBackward() {
                                    getActiveChessboard().game.moveBackward()
                                },
                                onMoveForward() {
                                    getActiveChessboard().game.moveForward()
                                },
                                onToggleChat() {
                                    toggleChat()
                                },
                                onCollapseChat() {
                                    toggleChat(!1)
                                },
                                onSendChatMessage({
                                    text: e
                                }) {
                                    !async function sendChatMessage(e) {
                                        const t = getActiveRoom();
                                        if (t) {
                                            t.chatSenders.update(getCurrentUser());
                                            try {
                                                const {
                                                    data: s
                                                } = await z.publish({
                                                    service: j.Chat,
                                                    path: [B.Classroom, t.id, B.Messages],
                                                    data: {
                                                        content: e
                                                    },
                                                    params: {
                                                        request_id: le()()
                                                    }
                                                });
                                                t.chatMessages.update(s)
                                            } catch (s) {
                                                showHttpError(s)
                                            }
                                        }
                                    }(e)
                                },
                                onToggleEvaluationSettings({
                                    option: e,
                                    value: t
                                }) {
                                    updateEvaluationSettings(this.activeRoom.id, {
                                        [e]: t
                                    })
                                },
                                onMountVideoContainer() {
                                    toggleVideoContainerMounted(!0)
                                },
                                onUnmountVideoContainer() {
                                    toggleVideoContainerMounted(!1)
                                }
                            }
                        }),
                        pb = hb,
                        bb = (0, ns.Z)(pb, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("room-content", [s("room-header", {
                                attrs: {
                                    title: e.headerTitle,
                                    icon: e.headerIcon,
                                    "show-back": e.showBack,
                                    "show-leave": e.isRoomContentVisible
                                },
                                on: {
                                    "click-back": e.onClickBack,
                                    "click-leave": e.onClickLeave
                                }
                            }), e._v(" "), e.videoRoom ? s("room-video") : e._e(), e._v(" "), s("transition-room-content", {
                                attrs: {
                                    reverse: e.showBack
                                }
                            }, [e.isSetupBoardVisible ? s("setup-board") : e._e(), e._v(" "), e.isSetupPositionVisible ? s("setup-position") : e._e(), e._v(" "), e.isLoadFromArchiveVisible ? s("load-from-archive") : e._e(), e._v(" "), e.isLoadFromLibraryVisible ? s("load-from-library") : e._e(), e._v(" "), e.isLoadFromExplorerVisible ? s("load-from-explorer") : e._e(), e._v(" "), e.isRoomContentVisible ? s("room-content", [s("room-video-container", {
                                on: {
                                    mount: e.onMountVideoContainer,
                                    unmount: e.onUnmountVideoContainer
                                }
                            }), e._v(" "), s("room-controls", {
                                attrs: {
                                    "is-owner": e.isOwner,
                                    "current-time": e.currentTime,
                                    "current-user": e.currentUser,
                                    "video-room": e.videoRoom,
                                    room: e.activeRoom,
                                    "is-videos-pinned": e.isVideosPinned
                                },
                                on: {
                                    "set-clock": e.onSetClock,
                                    "toggle-video": e.onToggleVideo,
                                    "toggle-pin-videos": e.onTogglePinVideos,
                                    "toggle-audio": e.onToggleAudio
                                }
                            }), e._v(" "), s("room-tabs", {
                                attrs: {
                                    room: e.activeRoom,
                                    "selected-tab": e.selectedTab
                                },
                                on: {
                                    "select-tab": e.onSelectTab
                                }
                            }), e._v(" "), e.isSetupBoardVisibleInsideGamesTab ? s("setup-board") : e.isMembersTabActive ? s("room-members-tab") : s("room-boards-tab")], 1) : e._e()], 1), e._v(" "), e.activeRoom ? s("board-controls", {
                                attrs: {
                                    room: e.activeRoom,
                                    "is-at-end-of-line": e.isAtEndOfLine,
                                    "is-chat-visible": e.isChatVisible,
                                    "is-owner": e.isOwner,
                                    "has-board-control": e.hasBoardControl,
                                    "new-chat-messages": e.newChatMessages
                                },
                                on: {
                                    "toggle-chat": e.onToggleChat,
                                    "toggle-evaluation-settings": e.onToggleEvaluationSettings,
                                    "go-to-end": e.onGoToEnd,
                                    "go-to-start": e.onGoToStart,
                                    "move-backward": e.onMoveBackward,
                                    "move-forward": e.onMoveForward
                                }
                            }) : e._e(), e._v(" "), e.isChatVisible ? s("chat-container", {
                                attrs: {
                                    "selected-tab": e.selectedTab,
                                    "is-premium": e.isPremium,
                                    "is-chat-enabled": e.isChatEnabled,
                                    room: e.activeRoom,
                                    "is-resizable": e.isChatResizable,
                                    "min-height": e.chatMinHeight,
                                    "max-height": e.chatMaxHeight
                                },
                                on: {
                                    "collapse-chat": e.onCollapseChat,
                                    "send-chat-message": e.onSendChatMessage
                                }
                            }) : e._e()], 1)
                        }), [], !1, null, null, null).exports,
                        gb = (0, g.aZ)({
                            name: "Sidebar",
                            components: {
                                LoaderThreeBounce: Mo.Z
                            },
                            props: {
                                isLoading: {
                                    type: Boolean,
                                    default: !1
                                }
                            },
                            computed: {
                                componentClasses() {
                                    return {
                                        [this.$style.component]: !0,
                                        [this.$style.loading]: this.isLoading
                                    }
                                }
                            }
                        }),
                        vb = {
                            component: "sidebar-component",
                            loading: "sidebar-loading"
                        };
                    var wb = (0, ns.Z)(gb, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                class: e.componentClasses
                            }, [e.isLoading ? s("loader-three-bounce") : [e._t("default")]], 2)
                        }), [], !1, (function sidebar_injectStyles(e) {
                            this.$style = vb.locals || vb
                        }), null, null).exports,
                        fb = (0, g.aZ)({
                            name: "TransitionSidebar",
                            extends: hh
                        }),
                        yb = {
                            enter: "transition-sidebar-enter",
                            "enter-active": "transition-sidebar-enter-active",
                            "enter-to": "transition-sidebar-enter-to",
                            leave: "transition-sidebar-leave",
                            "leave-active": "transition-sidebar-leave-active",
                            "leave-to": "transition-sidebar-leave-to"
                        };
                    var _b = (0, ns.Z)(fb, undefined, undefined, !1, (function transition_sidebar_injectStyles(e) {
                            this.$style = yb.locals || yb
                        }), null, null).exports,
                        kb = (0, g.aZ)({
                            el: "#sidebar",
                            name: "SidebarController",
                            components: {
                                ConfirmCloseRoomModal: ai,
                                ConfirmAutoSaveModal: ei,
                                Lobby: Ai,
                                Room: bb,
                                Sidebar: wb,
                                TransitionSidebar: _b
                            },
                            computed: {
                                activeRoom: () => getActiveRoom(),
                                userInvitations: () => function getUserInvitations() {
                                    return Ot.userInvitations
                                }(),
                                isLobbyVisible() {
                                    return !this.isLoggedIn || ! function isLoadingRoom() {
                                        return Boolean(Q.isCreatingRoom || Q.isJoiningRoom || Q.loadingRooms.length)
                                    }() && !this.activeRoom && !getRoomIdFromUrl()
                                },
                                isConfirmCloseRoomModalVisible: () => function isConfirmCloseRoomModalVisible() {
                                    return Ie.isConfirmCloseRoomModalVisible
                                }(),
                                isConfirmAutoSaveModalVisible: () => function isConfirmAutoSaveModalVisible() {
                                    const e = getActiveRoom();
                                    return Boolean(Ie.isConfirmCloseRoomModalVisible && e && e.autoSave && e.selectedCollectionId && isRoomOwner(e.id))
                                }(),
                                collection() {
                                    var e, t;
                                    const s = null == (e = this.activeRoom) ? void 0 : e.selectedCollectionId,
                                        a = s ? function getCollection(e) {
                                            return Yr.collectionOptions.find(e)
                                        }(s) : null;
                                    return null != (t = null == a ? void 0 : a.name) ? t : ""
                                },
                                isLoggedIn: () => isLoggedIn()
                            },
                            methods: {
                                onNewRoom() {
                                    createRoom()
                                },
                                onJoinRoom({
                                    roomId: e
                                }) {
                                    joinRoom(e)
                                },
                                onAcceptInvitation({
                                    invitation: e
                                }) {
                                    !async function acceptInvitation(e) {
                                        let t;
                                        try {
                                            const {
                                                data: s
                                            } = await z.publish({
                                                path: e.accept
                                            });
                                            t = s.sessionId
                                        } catch (s) {
                                            showHttpError(s)
                                        }
                                        t && (Ot.userInvitations.remove(e.id), openRoom(t))
                                    }(e)
                                },
                                onDeclineInvitation({
                                    invitation: e
                                }) {
                                    !async function declineInvitation(e) {
                                        try {
                                            await z.publish({
                                                path: e.decline
                                            })
                                        } catch (t) {
                                            showHttpError(t)
                                        }
                                        Ot.userInvitations.remove(e.id)
                                    }(e)
                                },
                                onCancelCloseRoom() {
                                    hideConfirmCloseRoomModal(), this.activeRoom && setRoute(this.activeRoom.getUrl())
                                },
                                async onConfirmCloseRoom() {
                                    this.activeRoom && await closeRoom(this.activeRoom.id), hideConfirmCloseRoomModal()
                                },
                                async onCloseRoomWithoutSaving() {
                                    this.activeRoom && await closeRoom(this.activeRoom.id, !0), hideConfirmCloseRoomModal()
                                }
                            }
                        }),
                        Cb = kb,
                        Sb = (0, ns.Z)(Cb, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("sidebar", [s("transition-sidebar", [e.isLobbyVisible ? s("lobby", {
                                attrs: {
                                    "is-logged-in": e.isLoggedIn,
                                    "user-invitations": e.userInvitations
                                },
                                on: {
                                    "accept-invitation": e.onAcceptInvitation,
                                    "decline-invitation": e.onDeclineInvitation,
                                    "new-room": e.onNewRoom,
                                    "join-room": e.onJoinRoom
                                }
                            }) : s("room")], 1), e._v(" "), e.isConfirmAutoSaveModalVisible ? s("confirm-auto-save-modal", {
                                attrs: {
                                    collection: e.collection,
                                    "is-saving-room": e.activeRoom.isSaving
                                },
                                on: {
                                    "cancel-close-room": e.onCancelCloseRoom,
                                    "confirm-close-room": e.onConfirmCloseRoom,
                                    "close-room-without-saving": e.onCloseRoomWithoutSaving
                                }
                            }) : e.isConfirmCloseRoomModalVisible ? s("confirm-close-room-modal", {
                                on: {
                                    "cancel-close-room": e.onCancelCloseRoom,
                                    "confirm-close-room": e.onConfirmCloseRoom
                                }
                            }) : e._e()], 1)
                        }), [], !1, null, null, null).exports,
                        xb = (0, g.aZ)({
                            el: "#board-controls",
                            name: "BoardControlsController",
                            methods: {
                                onClickSettings() {
                                    showSettingsModal()
                                },
                                onClickFlip() {
                                    flipBoard()
                                }
                            }
                        });
                    var $b = [(0, ns.Z)(xb, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", [s("button", {
                                staticClass: "board-layout-icon icon-font-chess circle-gearwheel",
                                attrs: {
                                    id: "board-controls-settings",
                                    "aria-label": e.$trans("Settings"),
                                    type: "button"
                                },
                                on: {
                                    click: e.onClickSettings
                                }
                            }), e._v(" "), s("button", {
                                staticClass: "board-layout-icon icon-font-chess repeat",
                                attrs: {
                                    id: "board-controls-flip",
                                    "aria-label": e.$trans("Flip Board"),
                                    type: "button"
                                },
                                on: {
                                    click: e.onClickFlip
                                }
                            })])
                        }), [], !1, null, null, null).exports, gr, wr, Hr, Sb],
                        Pb = s(5213);
                    const Eb = {
                            p: "pawn",
                            n: "knight",
                            b: "bishop",
                            r: "rook",
                            q: "queen"
                        },
                        Ob = {
                            p: 1,
                            b: 2,
                            n: 3,
                            r: 4,
                            q: 5
                        },
                        getClassName = (e, t, s) => (e => `cpiece ${e}-`)(t) + (1 === s ? (e => Eb[e])(e) : ((e, t) => `${e}-${Eb[t]}s`)(s, e)),
                        buildPieceClassNames = (e, t, s, a) => a && "p" === e ? ((e, t) => [...Array.from(Array(Math.floor(t / 2)), (() => getClassName(n.lA.Piece.Types.Pawn, e, 2))), ...Array.from(Array(t % 2), (() => getClassName(n.lA.Piece.Types.Pawn, e, 1)))])(t, s) : getClassName(e, t, s);
                    var Ab = {
                        "captured-pieces": "captured-pieces-captured-pieces",
                        vertical: "captured-pieces-vertical",
                        hidden: "captured-pieces-hidden",
                        cpiece: "captured-pieces-cpiece",
                        score: "captured-pieces-score",
                        "b-pawn": "captured-pieces-b-pawn",
                        "w-pawn": "captured-pieces-w-pawn",
                        "b-2-pawns": "captured-pieces-b-2-pawns",
                        "w-2-pawns": "captured-pieces-w-2-pawns",
                        "b-3-pawns": "captured-pieces-b-3-pawns",
                        "w-3-pawns": "captured-pieces-w-3-pawns",
                        "b-4-pawns": "captured-pieces-b-4-pawns",
                        "w-4-pawns": "captured-pieces-w-4-pawns",
                        "b-5-pawns": "captured-pieces-b-5-pawns",
                        "w-5-pawns": "captured-pieces-w-5-pawns",
                        "b-6-pawns": "captured-pieces-b-6-pawns",
                        "w-6-pawns": "captured-pieces-w-6-pawns",
                        "b-7-pawns": "captured-pieces-b-7-pawns",
                        "w-7-pawns": "captured-pieces-w-7-pawns",
                        "b-8-pawns": "captured-pieces-b-8-pawns",
                        "w-8-pawns": "captured-pieces-w-8-pawns",
                        "b-bishop": "captured-pieces-b-bishop",
                        "w-bishop": "captured-pieces-w-bishop",
                        "b-2-bishops": "captured-pieces-b-2-bishops",
                        "w-2-bishops": "captured-pieces-w-2-bishops",
                        "b-knight": "captured-pieces-b-knight",
                        "w-knight": "captured-pieces-w-knight",
                        "b-2-knights": "captured-pieces-b-2-knights",
                        "w-2-knights": "captured-pieces-w-2-knights",
                        "b-rook": "captured-pieces-b-rook",
                        "w-rook": "captured-pieces-w-rook",
                        "b-2-rooks": "captured-pieces-b-2-rooks",
                        "w-2-rooks": "captured-pieces-w-2-rooks",
                        "b-queen": "captured-pieces-b-queen",
                        "w-queen": "captured-pieces-w-queen"
                    };
                    class CapturedPieces extends Pb.H {
                        constructor() {
                            super(), this.color = 1, this.verticalLayout = !1, this.onPositionChangeHandler = w(this.onPositionChange.bind(this), 100)
                        }
                        static get observedAttributes() {
                            return [v._.ObservedAttributes.BoardId, v._.ObservedAttributes.Color, v._.ObservedAttributes.VerticalLayout]
                        }
                        boardReady() {
                            this.removeListeners(), this.addListeners(), this.onPositionChange()
                        }
                        componentDestroy() {
                            this.removeListeners()
                        }
                        addListeners() {
                            wt.forEach((e => {
                                this.addBoardEventListener(e, this.onPositionChangeHandler)
                            }))
                        }
                        removeListeners() {
                            wt.forEach((e => {
                                this.removeBoardEventListener(e, this.onPositionChangeHandler)
                            }))
                        }
                        readAttributes() {
                            const e = Number(this.getAttribute(v._.ObservedAttributes.Color)),
                                t = Boolean(this.hasAttribute(v._.ObservedAttributes.VerticalLayout));
                            return (e !== this.color || t !== this.verticalLayout) && (this.color = e, this.verticalLayout = t, !0)
                        }
                        attributesChanged() {
                            this.readAttributes() && (this.buildComponent(), this.board && this.onPositionChange())
                        }
                        componentReady() {
                            this.readAttributes(), this.buildComponent()
                        }
                        buildComponent() {
                            this.innerHTML = `\n      <div>\n        <span class="${Ab.cpiece} ${Ab.score}" />\n      </div>\n    `, this.scoreElement = this.querySelector(`.${Ab.score}`)
                        }
                        onPositionChange() {
                            var e;
                            this.capturedPieces = null == (e = this.board) ? void 0 : e.game.getMaterial(), this.updatePieces(), this.updateScore()
                        }
                        updatePieces() {
                            if (!this.capturedPieces) return;
                            const e = this.firstElementChild;
                            if (!e) return;
                            const t = ((e, t, s = !1) => Object.keys(e).filter((t => e[t] > 0 && Eb[t])).sort(((e, t) => Ob[e] - Ob[t])).map((a => buildPieceClassNames(a, t, e[a], s))).reduce(((e, t) => e.concat(t)), []))(1 === this.color ? this.capturedPieces.white : this.capturedPieces.black, 1 === this.color ? n.lA.ColorsAsLetters.Black : n.lA.ColorsAsLetters.White, this.verticalLayout);
                            for (; t.length < e.childElementCount - 1 && e.childElementCount > 1;) {
                                const t = e.children[e.childElementCount - 2];
                                e.removeChild(t)
                            }
                            for (let s = 0; s < t.length; s++) {
                                const a = t[s].split(" ").map((e => Ab[e])).join(" ");
                                if (e.childElementCount - 1 >= s + 1) e.children[s].className !== a && (e.children[s].className = a);
                                else {
                                    const t = document.createElement("span");
                                    t.className = a, e.insertBefore(t, e.lastElementChild)
                                }
                            }
                        }
                        updateScore() {
                            if (!this.scoreElement || !this.capturedPieces) return;
                            let e = "";
                            1 === this.color && this.capturedPieces.imbalance > 0 && (e = `+${this.capturedPieces.imbalance}`), 2 === this.color && this.capturedPieces.imbalance < 0 && (e = `+${Math.abs(this.capturedPieces.imbalance)}`), this.scoreElement.textContent = e
                        }
                    }
                    var Tb = s(7597),
                        Mb = s(3157);
                    var Rb;
                    (e => {
                        let t, s;
                        e.Name = "eco", (e => {
                            let t;
                            (t = e.Codes || (e.Codes = {})).StartingPosition = "A00", e.Text = {
                                CustomPosition: Vt.Z.trans("Custom Position"),
                                StartingPosition: Vt.Z.trans("Starting Position")
                            }
                        })(t = e.Config || (e.Config = {})), (e => {
                            let t;
                            var s;
                            let a;
                            var o;
                            (s = t = e.GameSource || (e.GameSource = {})).Master = "master", s.Other = "other", s.Own = "own", (o = a = e.GameType || (e.GameType = {})).All = "all", o.Blitz = "blitz", o.Daily = "daily", o.Lightning = "lightning", o.Live = "live", o.Standard = "standard"
                        })(s = e.Explorer || (e.Explorer = {}))
                    })(Rb || (Rb = {}));
                    var Ib = Object.defineProperty,
                        jb = Object.defineProperties,
                        Bb = Object.getOwnPropertyDescriptors,
                        Lb = Object.getOwnPropertySymbols,
                        Db = Object.prototype.hasOwnProperty,
                        Ub = Object.prototype.propertyIsEnumerable,
                        get_explorer_link_defNormalProp = (e, t, s) => t in e ? Ib(e, t, {
                            enumerable: !0,
                            configurable: !0,
                            writable: !0,
                            value: s
                        }) : e[t] = s;

                    function getExplorerLink({
                        game: e,
                        gameSource: t = Rb.Explorer.GameSource.Master,
                        gameType: s = Rb.Explorer.GameType.All,
                        moveList: a
                    }) {
                        var o, n, r, l;
                        return decodeURIComponent(i.Z.generate("explorer_index", (r = ((e, t) => {
                            for (var s in t || (t = {})) Db.call(t, s) && get_explorer_link_defNormalProp(e, s, t[s]);
                            if (Lb)
                                for (var s of Lb(t)) Ub.call(t, s) && get_explorer_link_defNormalProp(e, s, t[s]);
                            return e
                        })({
                            color: e.getOptions().flipped ? "black" : "white",
                            gameSource: t
                        }, !(t === Rb.Explorer.GameSource.Master && s === Rb.Explorer.GameType.All) && {
                            gameType: s
                        }), l = {
                            moveList: null != a ? a : e.getHistorySANs().join("+"),
                            ne: 1,
                            ply: (null != (n = null == (o = e.getSelectedNode()) ? void 0 : o.moveNumber) ? n : 0) + 1
                        }, jb(r, Bb(l)))))
                    }

                    function getOpeningsLink(e) {
                        return i.Z.generate("web_openings_view", {
                            cleanUrl: e
                        })
                    }
                    var zb = s(1353),
                        qb = {
                            color: {
                                BLACK: "black",
                                WHITE: "white",
                                label: {
                                    BLACK: Vt.Z.trans("Black"),
                                    WHITE: Vt.Z.trans("White"),
                                    COLOR: Vt.Z.trans("Color")
                                }
                            },
                            alert: {
                                ERROR: "error",
                                MESSAGE: Vt.Z.trans("Invalid Username")
                            },
                            gameSource: {
                                MASTER: "master",
                                OTHER: "other",
                                OWN: "own",
                                label: {
                                    MASTER: Vt.Z.trans("Master Games"),
                                    OTHER: Vt.Z.trans("Other Players"),
                                    OWN: Vt.Z.trans("My Games")
                                }
                            },
                            gameType: {
                                ALL: "all",
                                BLITZ: "blitz",
                                DAILY: "daily",
                                LIGHTNING: "lightning",
                                LIVE: "live",
                                STANDARD: "standard",
                                label: {
                                    GAME_TYPE: Vt.Z.trans("Game type"),
                                    ALL: Vt.Z.trans("All Games"),
                                    BLITZ: Vt.Z.trans("- Blitz"),
                                    DAILY: Vt.Z.trans("Daily Chess"),
                                    LIGHTNING: Vt.Z.trans("- Bullet"),
                                    LIVE: Vt.Z.trans("Live Chess"),
                                    STANDARD: Vt.Z.trans("- Rapid")
                                }
                            },
                            label: {
                                FIND: Vt.Z.trans("Find"),
                                HELP_MESSAGE: Vt.Z.trans("Only the following games are imported: Standard rules (no variants) that are at least 15 ply (or 29 ply if timeout) and played against a human (no computers)."),
                                LIMIT_REACHED: `\n      <a href="${i.Z.generate("web_membership",{c:"explorer"})}">\n        ${Vt.Z.trans("Please upgrade to get full access to Explorer.")}\n      </a>`,
                                LOADING: Vt.Z.trans("Loading..."),
                                NO_GAMES: Vt.Z.trans("There are no games with this position found in the database."),
                                SEARCH: Vt.Z.trans("View all games from current position"),
                                UPGRADE_TO_EXPLORE_OWN: `\n      <a href="${i.Z.generate("web_membership",{c:"explorer"})}">\n        ${Vt.Z.trans("Upgrade to premium to explore your own games.")}\n      </a>`,
                                USERNAME: Vt.Z.trans("Username"),
                                MASTER_PLAYER_NAME: Vt.Z.trans("Master player name"),
                                CHOOSE_GAME: Vt.Z.trans("Choose game")
                            },
                            mainControls: {
                                ANALYSIS: Vt.Z.trans("Analysis"),
                                MOVE_BACK: Vt.Z.trans("Move Back"),
                                MOVE_FORWARD: Vt.Z.trans("Move Forward"),
                                PRACTICE: Vt.Z.trans("Practice vs Computer"),
                                RESET: Vt.Z.trans("Reset")
                            },
                            GAME_SEARCH_COUNT_THRESHOLD: 1e4,
                            upgrade: {
                                BODY: Vt.Z.trans("Continue to explore this or any other line with unlimited Explorer and review and play the same lines as grandmasters!"),
                                FREE_TRIAL: Vt.Z.trans("Start Free Trial"),
                                TITLE: Vt.Z.trans("Go Premium for Unlimited Explorer"),
                                NEW_TITLE: Vt.Z.trans("Want Unlimited Openings?"),
                                HEADER_TEXT: Vt.Z.trans("Explorer Limit Reached"),
                                REFERRAL: "explorer",
                                SUBTITLE: Vt.Z.trans("Explorer Move Limit Reached"),
                                UNLOCK: Vt.Z.trans("Unlock Explorer")
                            },
                            LABEL_MINIMUM_PERCENT: 10
                        };
                    qb.gameSource.label.MASTER, qb.gameSource.MASTER, qb.gameSource.label.OWN, qb.gameSource.OWN, qb.gameSource.label.OTHER, qb.gameSource.OTHER, qb.gameType.label.ALL, qb.gameType.ALL, qb.gameType.label.DAILY, qb.gameType.DAILY, qb.gameType.label.LIVE, qb.gameType.LIVE, qb.gameType.label.STANDARD, qb.gameType.STANDARD, qb.gameType.label.BLITZ, qb.gameType.BLITZ, qb.gameType.label.LIGHTNING, qb.gameType.LIGHTNING, qb.color.label.WHITE, qb.color.WHITE, qb.color.label.BLACK, qb.color.BLACK;
                    const Vb = {
                        archive: e => i.Z.generate("web_archive_index", e),
                        defaultExplorerLink: i.Z.generate("explorer_index"),
                        explorerMove: i.Z.generate("explorer_callback_move"),
                        explorerGetSuggestedMoves: i.Z.generate("explorer_callback_get_suggested_moves"),
                        masterGames: e => i.Z.generate("web_master_games_search", e),
                        openAnalysis: e => i.Z.generate("web_analysis_board_editor", e),
                        openPractice: e => i.Z.generate("web_practice_custom", e),
                        register: i.Z.generate("web_security_register"),
                        upgrade: i.Z.generate("web_membership", {
                            c: "explorer"
                        }),
                        vscomp: e => i.Z.generate("web_play_computer", {
                            fen: e
                        })
                    };
                    var Nb = "eco-opening-panel",
                        Zb = "eco-opening-links",
                        Fb = "eco-opening-variant",
                        Gb = "eco-opening-name",
                        Wb = "eco-opening-explorer",
                        Hb = "eco-opening-opening",
                        Yb = "eco-opening-icon";
                    class EcoOpening extends Pb.H {
                        constructor() {
                            super(), this.plugin = null, this.elements = {
                                explorer: void 0,
                                opening: void 0,
                                openingName: void 0
                            }, this.getLinks = this.getLinks.bind(this), this.updateOpeningData = this.updateOpeningData.bind(this), this.handleUpdateEco = this.handleUpdateEco.bind(this)
                        }
                        static get observedAttributes() {
                            return [v._.ObservedAttributes.BoardId, v._.ObservedAttributes.LinkToExplorer, v._.ObservedAttributes.OpeningIsClickable]
                        }
                        getLinks(e) {
                            var t;
                            if (this.hasAttribute(v._.ObservedAttributes.LinkToExplorer) && e && (null == (t = this.board) ? void 0 : t.game)) return {
                                explorer: getExplorerLink({
                                    game: this.board.game
                                }),
                                openings: getOpeningsLink(e)
                            }
                        }
                        isVariant() {
                            var e;
                            return Boolean(null == (e = this.board) ? void 0 : e.game.getHeaders().Variant)
                        }
                        componentDestroy() {
                            var e, t, s, a, o, r, i, l;
                            null == (t = null == (e = this.board) ? void 0 : e.game) || t.off({
                                type: n.th.ECO.Events.Update,
                                handler: this.handleUpdateEco
                            }), this.plugin && !(null == (a = null == (s = this.board) ? void 0 : s.game) ? void 0 : a.listeners.some((e => "UpdateECO" === e.type))) && (null == (l = null == (r = null == (o = this.board) ? void 0 : o.game) ? void 0 : (i = r.plugins).remove) || l.call(i, this.plugin.name), this.plugin = null)
                        }
                        updateOpeningData(e) {
                            var t;
                            const s = {
                                fen: null == e ? void 0 : e.f,
                                link: null == e ? void 0 : e.u,
                                name: null != (t = null == e ? void 0 : e.n) ? t : Rb.Config.Text.CustomPosition
                            };
                            if (!this.elements.opening || !this.elements.explorer || !this.elements.openingName) return;
                            s.fen && "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1".includes(s.fen) && (s.name = Rb.Config.Text.StartingPosition, s.link = void 0), this.updateVariant(), this.elements.openingName.innerText = s.name;
                            const a = this.getLinks(s.link),
                                o = this.hasAttribute(v._.ObservedAttributes.OpeningIsClickable),
                                n = this.hasAttribute(v._.ObservedAttributes.ExplorerIsClickable);

                            function addLink(e, t) {
                                e.setAttribute("href", t), e.setAttribute("target", "_blank")
                            }

                            function removeLink(e) {
                                e.removeAttribute("href"), e.removeAttribute("target")
                            }(!a && this.elements.opening.href || !o) && removeLink(this.elements.opening), (!a && this.elements.explorer.href || !n) && removeLink(this.elements.explorer), a || this.elements.explorer.href.length || !n || addLink(this.elements.explorer, Vb.defaultExplorerLink), a && (o && addLink(this.elements.opening, a.openings), n && addLink(this.elements.explorer, a.explorer))
                        }
                        updateExplorerLink(e) {
                            var t;
                            this.elements.explorer && (this.elements.explorer.href = getExplorerLink({
                                game: null == (t = this.board) ? void 0 : t.game,
                                gameSource: e
                            }))
                        }
                        updateVariant() {
                            const e = this.isVariant(),
                                t = this.classList.contains(Fb);
                            e && !t ? this.classList.add(Fb) : !e && t && this.classList.remove(Fb)
                        }
                        boardReady() {
                            var e, t, s, a, o;
                            this.plugin = (0, n.Kh)({
                                ecoPath: (0, Mb.K)(),
                                http: r.Z
                            }), (0, zb.FR)(y.R.OPENING_EXPLORER_LINK) && (null == (e = this.board) ? void 0 : e.game.getVariant()) === Tb.$y.CHESS_960 && (null == (t = document.querySelector(`.${Hb}`)) || t.remove(), null == (s = document.querySelector(`.${Wb}`)) || s.remove()), null == (a = this.board) || a.game.on(n.th.ECO.Events.Update, this.handleUpdateEco), null == (o = this.board) || o.game.plugins.add(this.plugin)
                        }
                        handleUpdateEco({
                            data: e
                        }) {
                            this.updateOpeningData(e)
                        }
                        componentReady() {
                            this.classList.add(Nb), this.innerHTML = `\n      <span class="${Gb}"></span>\n      <div class="${Zb}">\n        <a class="${Hb}" title="${(0,V.dW)("Openings")}"><span class="icon-font-chess chess-book ${Yb}"></span></a>\n        <a class="${Wb}" title="${(0,V.dW)("Explorer")}"><span class="icon-font-chess circle-compass ${Yb}"></span></a>\n      </div>\n    `, this.elements = {
                                explorer: this.querySelector(`.${Wb}`),
                                opening: this.querySelector(`.${Hb}`),
                                openingName: this.querySelector(`.${Gb}`)
                            }, Sa.Z.bind(this.elements.opening), Sa.Z.bind(this.elements.explorer)
                        }
                    }
                    var Kb = s(7359);
                    var Qb = "evaluation-lines-component",
                        Jb = "evaluation-lines-withicon",
                        Xb = "evaluation-lines-open",
                        eg = "evaluation-lines-icon",
                        tg = "evaluation-lines-inverted",
                        sg = "evaluation-lines-node",
                        ag = "evaluation-lines-thinking",
                        og = "evaluation-lines-score",
                        ng = "evaluation-lines-negative",
                        rg = "evaluation-lines-lines",
                        ig = "evaluation-lines-tooltip",
                        lg = "evaluation-lines-node-clickable",
                        cg = "evaluation-lines-line-empty",
                        dg = "evaluation-lines-line-thinking",
                        ug = "evaluation-lines-best-move",
                        mg = "evaluation-lines-depth",
                        hg = "evaluation-lines-best-line";

                    function evaluation_lines_toggleClass(e, t, s) {
                        const a = e.classList.contains(t);
                        s && !a ? e.classList.add(t) : !s && a && e.classList.remove(t)
                    }
                    class EvaluationLines extends Pb.H {
                        constructor() {
                            super(), this.tooltipElement = null, this.isShowEngineDetails = !1, this.isNodeClickable = !1, this.scoreElements = [], this.lineElements = [], this.engineName = "", this.nodeElements = [], this.onEvaluationUpdateHandler = this.onEvaluationUpdate.bind(this), this.onEvaluationSettingsUpdateHandler = this.onEvaluationSettingsUpdate.bind(this)
                        }
                        static get observedAttributes() {
                            return [v._.ObservedAttributes.BoardId, v._.ObservedAttributes.EngineName]
                        }
                        boardReady() {
                            this.removeListeners(), this.addListeners(), this.onEvaluationUpdate()
                        }
                        componentDestroy() {
                            this.removeListeners()
                        }
                        addListeners() {
                            this.addEventListener("click", this.onComponentClick), pt.H.on("evaluation.update", this.onEvaluationUpdateHandler), pt.H.on("evaluation.settings-update", this.onEvaluationSettingsUpdateHandler)
                        }
                        removeListeners() {
                            this.removeEventListener("click", this.onComponentClick), pt.H.off({
                                type: "evaluation.update",
                                handler: this.onEvaluationUpdateHandler
                            }), pt.H.off({
                                type: "evaluation.settings-update",
                                handler: this.onEvaluationSettingsUpdateHandler
                            })
                        }
                        componentReady() {
                            const e = [];
                            let {
                                linesCount: t
                            } = (0, ut.Gw)();
                            const s = this.hasAttribute("show-best-line"),
                                a = this.getAttribute("lines");
                            this.readEngineName(), this.isShowEngineDetails = this.hasAttribute("is-display-engine-details"), this.isNodeClickable = this.hasAttribute("is-node-clickable"), this.isShowEngineDetails && (this.engineName = this.getAttribute("engine-name") || (0, dt.YE)().name || ""), a && (t = Number(a)), s && e.push(`\n        <span class="${ug}"></span>\n        <span class="${mg}"></span>\n      `);
                            for (let r = 0; r < t; r++) e.push(`\n        <div class="${Qb} ${Jb} ${dg}">\n          <span class="${ag}"></span>\n          <a class="${og}" href="//support.chess.com/article/656-what-do-the-computer-evaluation-numbers-mean-like-225" target="_blank">0.00</a>\n          <span class="${eg} icon-font-chess caret-down"></span>\n        </div>\n      `), this.nodeElements[r] = [];
                            const o = this.isShowEngineDetails ? `<div class="${ig}"></div>` : "",
                                n = this.isNodeClickable ? lg : "";
                            this.innerHTML = `\n      <div class="${rg} ${n}">\n        ${e.join("")}\n        ${o}\n      </div>\n    `, s && (this.bestMoveElement = this.querySelector(`.${ug}`), this.depthElement = this.querySelector(`.${mg}`)), this.lineElements = Array.from(this.querySelectorAll(`.${Qb}`)), this.scoreElements = Array.from(this.querySelectorAll(`.${og}`)), this.tooltipElement = this.querySelector(`.${ig}`)
                        }
                        onComponentClick(e) {
                            var t, s, a;
                            const o = e.target;
                            if (o.classList.contains(eg)) {
                                const e = o.parentNode;
                                e.classList.contains(Xb) ? (e.classList.remove(Xb), o.classList.remove(tg)) : (e.classList.add(Xb), o.classList.add(tg))
                            }
                            if (this.isNodeClickable && o.classList.contains(sg)) {
                                const {
                                    lines: e
                                } = (0, bt.y0)(), n = Number(o.getAttribute("data-line-index")), r = Number(o.getAttribute("data-move-index")), i = null != (a = null == (s = null == (t = e[n]) ? void 0 : t.pvSan) ? void 0 : s.slice(0, r + 1)) ? a : [];
                                this.dispatchEvent(new CustomEvent("click-node", {
                                    detail: {
                                        lineIndex: n,
                                        moveIndex: r,
                                        sanMoves: i
                                    }
                                }))
                            }
                        }
                        onEvaluationUpdate() {
                            const e = this.hasAttribute("show-best-line"),
                                {
                                    lines: t,
                                    isRunning: s,
                                    isNewPosition: a,
                                    selectedPly: o
                                } = (0, bt.y0)();
                            this.lineElements.forEach(((n, r) => {
                                var i, l;
                                const c = t[r];
                                let d, u;
                                (0, zb.FR)("engine_animation_fix") ? (d = !(null == (i = null == c ? void 0 : c.pvSan) ? void 0 : i.length) || a, u = c && 0 === c.mateIn) : (u = !(null == (l = null == c ? void 0 : c.pvSan) ? void 0 : l.length), d = s && c && 0 !== c.mateIn && (u || a));
                                const m = e && 0 === r;
                                if (evaluation_lines_toggleClass(n, hg, m), evaluation_lines_toggleClass(n, cg, u), evaluation_lines_toggleClass(n, dg, d), d || u) this.clearLineNodes(r);
                                else {
                                    for (m && this.depthElement && (this.depthElement.textContent = this.getDepthString(c.depth)), this.updateScore(r, c); this.nodeElements[r].length > c.pvSan.length;) this.removeLineLastNode(r);
                                    c.pvSan.forEach(((e, t) => {
                                        const s = this.getLineNode(r, t),
                                            a = `${function getMoveNumber(e,t){const s=Math.max(e,0)+t,a=s%2==0;if(t>0&&!a)return"";let o=`${Math.ceil((s+1)/2)}.`;return 0!==t||a||(o+=".."),o}(o,t)}${translateMoveText(e)} `;
                                        s.textContent = a, m && 0 === t && this.bestMoveElement && (this.bestMoveElement.textContent = a), this.isNodeClickable && (s.setAttribute("data-line-index", String(r)), s.setAttribute("data-move-index", String(t)))
                                    }))
                                }
                            }))
                        }
                        onEvaluationSettingsUpdate() {
                            this.componentReady()
                        }
                        attributesChanged() {
                            this.readEngineName(), this.onEvaluationUpdate()
                        }
                        clearLineNodes(e) {
                            if (this.nodeElements[e])
                                for (; this.nodeElements[e].length;) this.removeLineLastNode(e)
                        }
                        getDepthString(e) {
                            return (0, V.dW)("Depth=%depth%", {
                                "%depth%": e
                            })
                        }
                        updateScore(e, t) {
                            const s = this.scoreElements[e];
                            s.textContent = (0, Kb.D4)(t);
                            const a = isNumber(t.score) && t.score < 0,
                                o = s.classList.contains(ng);
                            a && !o ? s.classList.add(ng) : !a && o && s.classList.remove(ng), this.isShowEngineDetails && this.tooltipElement && 0 === e && (this.tooltipElement.textContent = `${this.engineName} ${this.getDepthString(t.depth)}`)
                        }
                        getLineNode(e, t) {
                            if (!this.nodeElements[e][t]) {
                                const s = document.createElement("span");
                                s.className = sg, this.lineElements[e].appendChild(s), this.nodeElements[e][t] = s
                            }
                            return this.nodeElements[e][t]
                        }
                        removeLineLastNode(e) {
                            const t = this.nodeElements[e].pop();
                            this.lineElements[e].removeChild(t)
                        }
                        readEngineName() {
                            var e;
                            this.isShowEngineDetails && (this.engineName = this.getAttribute("engine-name") || (null == (e = (0, dt.YE)((0, ut.Gw)().engineName)) ? void 0 : e.name) || "")
                        }
                    }
                    class HandPieces extends Pb.H {
                        constructor() {
                            super(...arguments), this.plugin = null
                        }
                        static get observedAttributes() {
                            return [v._.ObservedAttributes.BoardId, v._.ObservedAttributes.Direction]
                        }
                        boardReady() {
                            var e, t;
                            this.plugin = (0, n.rF)({
                                direction: this.getAttribute(v._.ObservedAttributes.Direction),
                                el: this,
                                replaceContainer: !1
                            }), null == (t = null == (e = this.board) ? void 0 : e.game) || t.plugins.add(this.plugin)
                        }
                        componentDestroy() {
                            var e, t, s;
                            null == (s = null == (e = this.board) ? void 0 : e.game) || s.plugins.remove(null == (t = this.plugin) ? void 0 : t.name), this.plugin = null
                        }
                    }
                    const pg = moveNotationTranslations(),
                        bg = {
                            "%username% won on time": e => V.$H.trans("%username% won on time", {
                                "%username": e
                            }),
                            "Good move": () => V.$H.trans("Good move"),
                            "Bad move": () => V.$H.trans("Bad move"),
                            "Excellent move": () => V.$H.trans("Excellent move"),
                            Blunder: () => V.$H.trans("Blunder"),
                            "Speculative move": () => V.$H.trans("Speculative move"),
                            "Dubious move": () => V.$H.trans("Dubious move"),
                            Drawish: () => V.$H.trans("Drawish"),
                            Unclear: () => V.$H.trans("Unclear"),
                            "White has a slight advantage": () => V.$H.trans("White has a slight advantage"),
                            "Black has a slight advantage": () => V.$H.trans("Black has a slight advantage"),
                            "White has a moderate advantage": () => V.$H.trans("White has a moderate advantage"),
                            "Black has a moderate advantage": () => V.$H.trans("Black has a moderate advantage"),
                            "White has a decisive advantage": () => V.$H.trans("White has a decisive advantage"),
                            "Black has a decisive advantage": () => V.$H.trans("Black has a decisive advantage"),
                            "The position is in zugzwang": () => V.$H.trans("The position is in zugzwang"),
                            "With initiative": () => V.$H.trans("With initiative"),
                            "With compensation": () => V.$H.trans("With compensation"),
                            Novelty: () => V.$H.trans("Novelty"),
                            "With an attack": () => V.$H.trans("With an attack"),
                            "Clear All Analysis": () => V.$H.trans("Clear All Analysis"),
                            "Delete Comment After": () => V.$H.trans("Delete Comment After"),
                            "Delete Comment Before": () => V.$H.trans("Delete Comment Before"),
                            "Delete Move": () => V.$H.trans("Delete Move"),
                            "Delete Entire Variation": () => V.$H.trans("Delete Entire Variation"),
                            "Comment After": () => V.$H.trans("Comment After"),
                            "Comment Before": () => V.$H.trans("Comment Before"),
                            "Insert Continuation": () => V.$H.trans("Insert Continuation"),
                            "Move Variation Down": () => V.$H.trans("Move Variation Down"),
                            "Move Variation Up": () => V.$H.trans("Move Variation Up"),
                            Promote: () => V.$H.trans("Promote"),
                            "Remove Annotation": () => V.$H.trans("Remove Annotation"),
                            "Remove Begin": () => V.$H.trans("Remove Begin"),
                            "Remove End": () => V.$H.trans("Remove End"),
                            "Remove Evaluation Annotation": () => V.$H.trans("Remove Evaluation Annotation"),
                            "Remove Focus": () => V.$H.trans("Remove Focus"),
                            "Set Begin": () => V.$H.trans("Set Begin"),
                            "Set End": () => V.$H.trans("Set End"),
                            "Set Focus": () => V.$H.trans("Set Focus"),
                            "Add Comment...": () => V.$H.trans("Add Comment..."),
                            B: () => pg.B,
                            K: () => pg.K,
                            N: () => pg.N,
                            P: () => pg.P,
                            Q: () => pg.Q,
                            R: () => pg.R,
                            numberOfDays: e => V.$H.transChoice("{1} 1 day|]1,Inf] %1$s% days", e, {
                                "%1$s%": e
                            }),
                            numberOfHours: e => V.$H.transChoice("{1} 1 hr|]1,Inf] %1$s% hrs", e, {
                                "%1$s%": e
                            }),
                            numberOfMinutes: e => V.$H.transChoice("{1} 1 min|]1,Inf] %1$s% mins", e, {
                                "%1$s%": e
                            }),
                            "This game ended in a draw because the same position was repeated three times.": () => V.$H.trans("This game ended in a draw because the same position was repeated three times."),
                            "En passant is a special pawn move by which a pawn captures another pawn that has advanced two squares.": () => V.$H.trans("En passant is a special pawn move by which a pawn captures another pawn that has advanced two squares.")
                        };
                    var gg = Object.defineProperty,
                        vg = Object.getOwnPropertySymbols,
                        wg = Object.prototype.hasOwnProperty,
                        fg = Object.prototype.propertyIsEnumerable,
                        horizontal_move_list_defNormalProp = (e, t, s) => t in e ? gg(e, t, {
                            enumerable: !0,
                            configurable: !0,
                            writable: !0,
                            value: s
                        }) : e[t] = s,
                        horizontal_move_list_spreadValues = (e, t) => {
                            for (var s in t || (t = {})) wg.call(t, s) && horizontal_move_list_defNormalProp(e, s, t[s]);
                            if (vg)
                                for (var s of vg(t)) fg.call(t, s) && horizontal_move_list_defNormalProp(e, s, t[s]);
                            return e
                        };
                    class HorizontalMoveList extends HTMLElement {
                        constructor() {
                            super(), this.plugin = null, this.translations = bg, this.boardInitializedHandler = this.boardInitialized.bind(this)
                        }
                        static get observedAttributes() {
                            return [v._.ObservedAttributes.BoardId, v._.ObservedAttributes.ScrollContainerId]
                        }
                        attributeChangedCallback() {
                            this.createOnNextTick()
                        }
                        boardInitialized({
                            detail: e
                        }) {
                            this.setAttribute(v._.ObservedAttributes.BoardId, `board-${e}`)
                        }
                        setTranslations(e) {
                            this.translations = horizontal_move_list_spreadValues(horizontal_move_list_spreadValues({}, this.translations), e), this.createOnNextTick()
                        }
                        connectedCallback() {
                            this.create()
                        }
                        disconnectedCallback() {
                            this.destroy()
                        }
                        getBoard() {
                            const e = this.getAttribute(v._.ObservedAttributes.BoardId),
                                t = e && document.getElementById(e);
                            t && (this.board = t)
                        }
                        destroy() {
                            var e, t, s, a, o, n;
                            clearTimeout(this.timeout), this.plugin && (null == (a = null == (t = null == (e = this.board) ? void 0 : e.game) ? void 0 : (s = t.plugins).remove) || a.call(s, this.plugin.name), this.plugin = null), null == (n = null == (o = this.board) ? void 0 : o.removeEventListener) || n.call(o, v._.Events.BoardInitialized, this.boardInitializedHandler)
                        }
                        createOnNextTick() {
                            clearTimeout(this.timeout), this.timeout = window.setTimeout((() => {
                                this.create()
                            }))
                        }
                        create() {
                            var e, t, s, a, o;
                            if (this.destroy(), this.getBoard(), !(null == (e = this.board) ? void 0 : e.game)) return void(null == (s = null == (t = this.board) ? void 0 : t.addEventListener) || s.call(t, v._.Events.BoardInitialized, this.boardInitializedHandler));
                            null == (o = (a = this.board).removeEventListener) || o.call(a, v._.Events.BoardInitialized, this.boardInitializedHandler);
                            const r = this.getAttribute(v._.ObservedAttributes.ScrollContainerId),
                                i = r && document.getElementById(r) || void 0;
                            this.plugin = (0, n.Mo)({
                                el: this,
                                enableContextMenu: !this.hasAttribute(v._.ObservedAttributes.DisableContextMenu),
                                scrollContainer: i,
                                translations: this.translations
                            }), this.board.game.plugins.add(this.plugin)
                        }
                    }
                    Object.create, Object.defineProperty, Object.getOwnPropertyDescriptor, Object.getOwnPropertyNames, Object.getPrototypeOf, Object.prototype.hasOwnProperty;
                    class LottieAnimation extends HTMLElement {
                        constructor() {
                            super(...arguments), this.animation = null, this.autoplay = !1, this.container = document.createElement("div"), this.height = null, this.loop = !1, this.speed = null, this.src = "", this.width = null
                        }
                        static get observedAttributes() {
                            return ["autoplay", "height", "loop", "speed", "src", "width"]
                        }
                        attributeChangedCallback() {
                            this.updateStyles(), this.updateAnimation()
                        }
                        connectedCallback() {
                            Object.assign(this.style, {
                                display: "inline-block"
                            }), this.appendChild(this.container), Object.assign(this.container.style, {
                                transform: "translate(-16%, -16%)"
                            }), this.updateStyles(), this.updateAnimation()
                        }
                        disconnectedCallback() {
                            this.destroy()
                        }
                        destroy() {
                            this.destroyAnimation()
                        }
                        updateStyles() {
                            const e = this.hasAttribute("width") ? Number(this.getAttribute("width")) : null,
                                t = this.hasAttribute("height") ? Number(this.getAttribute("height")) : null;
                            e === this.width && t === this.height || (this.width = e, this.height = t, Object.assign(this.style, {
                                width: e ? `${e}px` : "100%",
                                height: t ? `${t}px` : "100%"
                            }), Object.assign(this.container.style, {
                                width: e ? 1.5 * e + "px" : "15%",
                                height: t ? 1.5 * t + "px" : "15%"
                            }))
                        }
                        destroyAnimation() {
                            this.animation && (this.animation.destroy(), this.animation = null)
                        }
                        createAnimation() {
                            s.e(248).then(s.t.bind(s, 1248, 23)).then((e => {
                                this.destroyAnimation(), this.animation = e.default.loadAnimation({
                                    container: this.container,
                                    renderer: "svg",
                                    loop: this.loop,
                                    autoplay: this.autoplay,
                                    path: this.src
                                }), this.speed && this.animation.setSpeed(this.speed)
                            }))
                        }
                        updateAnimation() {
                            const e = this.getAttribute("src") || "",
                                t = this.hasAttribute("autoplay"),
                                s = this.hasAttribute("loop"),
                                a = this.hasAttribute("speed") ? Number(this.getAttribute("speed")) : null;
                            e === this.src && t === this.autoplay && s === this.loop && a === this.speed || (this.src = e, this.autoplay = t, this.loop = s, this.speed = a, this.createAnimation())
                        }
                    }
                    var yg = {
                        "captured-pieces": CapturedPieces,
                        "eco-opening": EcoOpening,
                        "evaluation-lines": EvaluationLines,
                        "hand-pieces": HandPieces,
                        "horizontal-move-list": HorizontalMoveList,
                        "lottie-animation": LottieAnimation
                    };
                    var _g = [$t, qe, Ke, Ml, Ot, Yr, Q, Rs, Ie, _e, Qs],
                        kg = s(5134);
                    var Cg = s(5236);
                    async function loadBoardOptions() {
                        let e;
                        try {
                            e = await async function fetchBoardOptions() {
                                const {
                                    data: e
                                } = await (0, kg.h)("web_user_callback_get_board_settings"), {
                                    animationType: t,
                                    boardCoords: s,
                                    boardSize: a,
                                    colorScheme: o,
                                    evaluationBar: r,
                                    highlightLegalMoves: i,
                                    highlightMoves: l,
                                    isWhiteOnBottom: c,
                                    moveListDisplayType: d,
                                    moveMethod: u,
                                    pieceStyle: m,
                                    playSounds: h,
                                    soundTheme: p,
                                    showTimestamps: b
                                } = e, g = (0, Cg.KZ)();
                                return {
                                    animationType: (w = t, "battle" === w ? n.$l.Animation.Types.Default : w),
                                    boardSize: a,
                                    boardStyle: o,
                                    coordinates: (v = s, nt[parseInt(v, 10)]),
                                    darkMode: g,
                                    evaluationBarType: r,
                                    highlightLegalMoves: "1" === i,
                                    highlightMoves: "1" === l,
                                    isWhiteOnBottom: c,
                                    moveListDisplayType: d,
                                    moveMethod: u,
                                    pieceStyle: m,
                                    playSounds: "1" === h,
                                    soundTheme: p,
                                    showTimestamps: b
                                };
                                var v, w
                            }()
                        } catch (t) {
                            console.error(t)
                        }
                        e && (Object.assign(b.boardOptions, e), c.n.setBoardOptions(b.boardOptions)), l.getActiveChessboardId && (getChessboards().forEach((e => {
                            e.game.setOptions(b.boardOptions)
                        })), updateChessboardLayout())
                    }
                    const Sg = (0, a.eI)({
                        init: () => function shouldLoadBoardOptions() {
                            var e, t, s, a;
                            return Boolean((null == (t = null == (e = window.context) ? void 0 : e.user) ? void 0 : t.username) && (null == (a = (s = l).shouldLoadBoardOptions) ? void 0 : a.call(s)))
                        }() ? loadBoardOptions() : Promise.resolve()
                    });
                    var xg = s(2805);
                    let $g;
                    class ChessBoard extends HTMLElement {
                        createGame(e) {
                            this.game = (0, n.dz)(e), (0, f.F)("scroll_through_moves_on_board") || this.game.plugins.remove("scroll-through-moves"), (0, f.F)(y.R.CHESSBOARD_EFFECTS_SYNC) || (this.game.plugins.remove("effectsHMLSync"), this.game.onMany([n.QY.InstanceEvents.Create, n.QY.InstanceEvents.ModeChanged], (() => this.game.plugins.remove("effectsHMLSync")))), (0, f.F)(y.R.CHESSBOARD_RECORDER_PLUGIN) && this.game.plugins.add((0, xg.KW)()), this.dispatchEvent(new CustomEvent(v._.Events.BoardInitialized, {
                                detail: this.game.getOptions().id
                            }))
                        }
                        init({
                            boardStyles: e,
                            createRenderer: t,
                            emitter: s,
                            init: a,
                            mode: o,
                            options: r,
                            plugins: i,
                            pieceStyles: l
                        }) {
                            this.innerHTML = "";
                            const c = Object.assign((0, n.jw)(), r);
                            return this.createGame({
                                el: this,
                                emitter: s,
                                init: a,
                                mode: o,
                                options: c,
                                plugins: getPlugins(i),
                                renderer: null == t ? void 0 : t({
                                    boardStyles: e,
                                    el: this,
                                    options: c,
                                    pieceStyles: l
                                })
                            }), this.game
                        }
                        get options() {
                            var e;
                            return null == (e = this.game) ? void 0 : e.getOptions()
                        }
                        connectedCallback() {
                            this.dispatchEvent(new CustomEvent(v._.Events.BoardAttached))
                        }
                        disconnectedCallback() {
                            this.dispatchEvent(new CustomEvent(v._.Events.BoardDetached))
                        }
                    }

                    function getPlugins(e = []) {
                        const t = (0, n.n8)((0, n.NQ)(), e);
                        return $g || ($g = (0, n.q4)()), [...t.filter((e => e.name !== n.th.Sounds.Plugin.Name)), $g]
                    }
                    var Pg = {
                        "chess-board": ChessBoard
                    };
                    const Eg = (0, a.ko)({
                            clients: [Sg],
                            context: l,
                            elements: Pg,
                            state: [b.boardOptions]
                        })({
                            getActiveChessboardId: getActiveChessboardId,
                            shouldLoadBoardOptions: () => !0
                        }),
                        Og = (0, a.kr)(),
                        Ag = (0, a.ko)({
                            context: Og,
                            state: [la]
                        })({}),
                        Tg = (0, a.kr)();
                    var Mg = s(2101);
                    Object.create;
                    var Rg = Object.defineProperty,
                        Ig = Object.defineProperties,
                        jg = (Object.getOwnPropertyDescriptor, Object.getOwnPropertyDescriptors),
                        Bg = (Object.getOwnPropertyNames, Object.getOwnPropertySymbols),
                        Lg = (Object.getPrototypeOf, Object.prototype.hasOwnProperty),
                        Dg = Object.prototype.propertyIsEnumerable,
                        share_modalvue_type_script_lang_ts_defNormalProp = (e, t, s) => t in e ? Rg(e, t, {
                            enumerable: !0,
                            configurable: !0,
                            writable: !0,
                            value: s
                        }) : e[t] = s,
                        Ug = (0, g.aZ)({
                            el: "#share-modal",
                            name: "ShareModalController",
                            components: {
                                ShareMenu: () => s.e(690).then(s.bind(s, 3690))
                            },
                            setup: () => ({
                                checkboxModel: Mg._$
                            }),
                            data: () => ({
                                shareMenuData: null
                            }),
                            computed: {
                                isVisible: () => function isShareModalVisible() {
                                    return Fu.isVisible
                                }(),
                                boardStyles: () => Tg.getBoardStyles(),
                                isLoggedIn() {
                                    var e, t;
                                    return Boolean(null == (t = null == (e = window.context) ? void 0 : e.user) ? void 0 : t.id)
                                }
                            },
                            watch: {
                                isVisible() {
                                    this.isVisible && this.loadBoardData()
                                },
                                checkboxModel: {
                                    deep: !0,
                                    handler() {
                                        this.loadBoardData()
                                    }
                                }
                            },
                            methods: {
                                onClose() {
                                    ! function hideShareModal() {
                                        Fu.options = Zu, Fu.isVisible = !1
                                    }()
                                },
                                onShareMenuMounted(e) {
                                    e()
                                },
                                async loadBoardData() {
                                    await Tg.loadBoardStyles();
                                    const e = function get_share_modal_chessboard_getShareModalChessboard() {
                                            return Tg.getActiveChessboard()
                                        }(),
                                        t = e.game.getOptions(),
                                        s = function getShareModalOptions() {
                                            return Fu.options
                                        }();
                                    var a, o;
                                    this.shareMenuData = (a = ((e, t) => {
                                        for (var s in t || (t = {})) Lg.call(t, s) && share_modalvue_type_script_lang_ts_defNormalProp(e, s, t[s]);
                                        if (Bg)
                                            for (var s of Bg(t)) Dg.call(t, s) && share_modalvue_type_script_lang_ts_defNormalProp(e, s, t[s]);
                                        return e
                                    })({}, s), o = {
                                        initialActiveTab: s.initialTab,
                                        tcn: e.game.getTCN(),
                                        fen: e.game.getFEN(),
                                        pgn: e.game.getPGN((0, Mg.nj)(this.checkboxModel)),
                                        pgnHeaders: e.game.getHeaders(),
                                        hasTimestamps: !0,
                                        variant: e.game.getVariant(),
                                        boardOptions: {
                                            coordinates: t.coordinates,
                                            boardStyle: t.boardStyle,
                                            pieceStyle: t.pieceStyle,
                                            flipBoard: t.flipped
                                        }
                                    }, Ig(a, jg(o)))
                                }
                            }
                        }),
                        zg = Ug,
                        qg = (0, ns.Z)(zg, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return e.isVisible && e.shareMenuData ? s("share-menu", e._b({
                                ref: "modal",
                                attrs: {
                                    "board-settings": e.boardStyles,
                                    "is-logged-in": e.isLoggedIn
                                },
                                on: {
                                    hide: e.onClose,
                                    mounted: e.onShareMenuMounted
                                }
                            }, "share-menu", e.shareMenuData, !1)) : e._e()
                        }), [], !1, null, null, null).exports;
                    const Vg = (0, a.ko)({
                            state: [Fu],
                            context: Tg,
                            controllers: [qg]
                        })({
                            getActiveChessboard: getShareModalChessboard,
                            getBoardStyles: getBoardStyles,
                            loadBoardStyles: loadBoardStyles
                        }),
                        Ng = {
                            settings: (0, ut.Gw)()
                        },
                        Zg = (0, a.ko)({
                            state: [Ng],
                            context: ct.a
                        })({
                            getActiveChessboard: getActiveChessboard,
                            getActiveChessboardElementId: getActiveChessboardElementId,
                            isEvaluationBarVisible: isEvaluationBarVisible
                        }),
                        Fg = (0, a.kr)(),
                        Gg = (0, a.ko)({
                            context: Fg
                        })({});
                    async function waitForPubSubError() {
                        if (!isPubSubEnabled()) throw new Error("PubSub.client script not found in document");
                        return Dt.waitingForClient && await Dt.waitingForClient, new Promise((e => {
                            const onError = () => {
                                window.PubSub.off(T, onError), window.PubSub.off(I, onError), window.PubSub.off(M, onError), e()
                            };
                            window.PubSub.on(T, onError), window.PubSub.on(I, onError), window.PubSub.on(M, onError)
                        }))
                    }
                    const Wg = (0, a.eI)({
                            async init(e) {
                                var t, s;
                                try {
                                    await async function waitForPubSubClient() {
                                        if (!z.client) {
                                            if (!isPubSubEnabled()) throw new Error("PubSub.client script not found in document");
                                            return Dt.waitingForClient || (Dt.waitingForClient = new Promise(((e, t) => {
                                                let s;
                                                const a = window.setInterval((() => {
                                                    z.client && (clearTimeout(s), clearInterval(a), Dt.waitingForClient = null, e())
                                                }), 50);
                                                s = window.setTimeout((() => {
                                                    Dt.isEnabled = !1, clearInterval(a), Dt.waitingForClient = null, t(new Error("timed out while waiting for PubSub.client to load after 5000ms"))
                                                }), 5e3)
                                            }))), Dt.waitingForClient
                                        }
                                    }()
                                } catch (a) {
                                    (null == (s = null == (t = window.context) ? void 0 : t.user) ? void 0 : s.username) && console.error(a)
                                }
                                if (isPubSubEnabled()) return updateConnectionStatus(), e.then(updateConnectionStatus), z.on(A, updateConnectionStatus), z.on(T, updateConnectionStatus), z.on(I, updateConnectionStatus), z.on(M, updateConnectionStatus), z.on(R, updateConnectionStatus), z.client.addQualityListener(updateConnectionStatus), Promise.race([waitForPubSubConnection(), waitForPubSubError()])
                            }
                        }),
                        Hg = (0, a.ko)({
                            clients: [Wg],
                            state: [Dt.reactive],
                            context: Rh
                        })({});
                    var Yg = s(8137);
                    Object.create, Object.defineProperty, Object.getOwnPropertyDescriptor, Object.getOwnPropertyNames, Object.getPrototypeOf, Object.prototype.hasOwnProperty;
                    const Kg = (0, a.eI)({
                        init() {
                            Ks.Z.get(Yg.J.getStorageKey()) || s.e(43).then(s.bind(s, 3043)).then((e => {
                                (0, a.DP)([e.default])
                            }))
                        }
                    });
                    var Qg = [Eg, Ag, Zg, Vg, Gg, Hg, (0, a.ko)({
                        context: Yg.J,
                        clients: [Kg]
                    })({
                        getStorageKey: () => "ClassroomWelcomeModal",
                        getContent: () => ({
                            icon: "/bundles/web/images/color-icons/classroom.svg",
                            title: (0, V.dW)("Classroom"),
                            subtitleBottom: document.referrer.includes("/live") ? (0, V.dW)("Welcome to Classroom! Classroom is the new and improved Live Analysis board. It has everything you're used to and so much more!") : (0, V.dW)("Welcome to Classroom, the best way to share a chess board with a coach, student, or friend!"),
                            buttonText: (0, V.dW)("Let's Go!"),
                            bullets: [{
                                icon: "camera-on",
                                text: (0, V.dW)("Voice and video")
                            }, {
                                icon: "chess-board-folder",
                                text: (0, V.dW)("Load several games at once")
                            }, {
                                icon: "library",
                                text: (0, V.dW)("Quickly save to Library Collections")
                            }, {
                                icon: "classroom",
                                text: (0, V.dW)("Powerful room management tools for coaching")
                            }]
                        })
                    })];

                    function initClassroom() {
                        (0, a.QB)({
                            elements: yg,
                            controllers: $b,
                            clients: ia,
                            state: _g,
                            extensions: Qg
                        })
                    }
                    window.Config.cypress ? window.addEventListener("load", initClassroom) : initClassroom(), window.context.appVersion = function getClassroomVersion() {
                        return function getPackageVersion(e) {
                            return e.version
                        }(s(3950))
                    }(), window.context.chessboardVersion = function getChessboardFullVersion() {
                        const {
                            default: e
                        } = s(6940);
                        return e
                    }()
                },
                9790: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        jC: function() {
                            return o
                        },
                        R0: function() {
                            return n
                        },
                        xL: function() {
                            return r
                        },
                        V5: function() {
                            return i
                        }
                    });
                    var a = s(8160);
                    const o = 7e3,
                        n = {
                            badRequest: a.Z.trans("Oops. Looks like there was an error. Sorry! Please refresh.")
                        },
                        r = (a.Z.trans("Avatar uploaded"), a.Z.trans("Thank you for your comment."), a.Z.trans("Comment deleted."), a.Z.trans("You cannot send an empty comment"), a.Z.trans("Comment updated."), a.Z.trans("Comment link is copied to clipboard"), a.Z.trans("Copied to clipboard"), a.Z.trans("All forum topics have been marked as read"), a.Z.trans("Feature Set! It might take a minute or two to appear."), a.Z.trans("Please select the players for whom to send the invitation"), a.Z.trans("Your invitations were sent successfully"), a.Z.trans("PGN copied to buffer"), {
                            ALERT_FLASH_CONTAINER: "widget-alert-flash",
                            DISMISSING: "alert-banner-dismissing"
                        }),
                        i = {
                            error: "error",
                            info: "info",
                            success: "success"
                        };
                    i.error, n.badRequest
                },
                6670: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        el: function() {
                            return createAlert
                        },
                        OD: function() {
                            return dismissAlert
                        },
                        x2: function() {
                            return showError
                        }
                    });
                    var a = s(9790);

                    function dismissAlert(e) {
                        const t = document.getElementById(`alert-${e}`);
                        t && hideAlertElement(t)
                    }

                    function createAlertElement(e) {
                        var t;
                        ! function loadLazyStyle(e) {
                            const t = document.querySelector(`link[data-href*="/${e}.client"]`);
                            t && (t.setAttribute("href", t.getAttribute("data-href")), t.removeAttribute("data-href"))
                        }("alerts");
                        const s = document.createElement("div");
                        s.classList.add("alerts-alert"), s.classList.add("alerts-enter"), s.classList.add(`alerts-${e.type}`), s.setAttribute("id", `alert-${e.id}`);
                        const o = document.createElement("span");
                        o.classList.add("alerts-message"), o.innerHTML = e.message;
                        const n = document.createElement("button");
                        n.classList.add("alerts-close"), n.setAttribute("type", "button"), n.innerHTML = '<span class="icon-font-chess x"></span>', s.appendChild(o), s.appendChild(n), null == (t = getContainer()) || t.appendChild(s), n.addEventListener("click", onClickClose), e.type === a.V5.success && setTimeout(hideAlertElement, a.jC, s)
                    }

                    function getContainer() {
                        return document.getElementById(a.xL.ALERT_FLASH_CONTAINER)
                    }

                    function hideAlertElement(e) {
                        e.classList.add("alerts-leave"), setTimeout(removeAlertElement, 200, e)
                    }

                    function removeAlertElement(e) {
                        var t;
                        try {
                            null == (t = getContainer()) || t.removeChild(e)
                        } catch (s) {
                            ! function clearAlerts() {
                                const e = getContainer();
                                e && (e.innerHTML = "")
                            }()
                        }
                    }

                    function onClickClose(e) {
                        var t, s;
                        const a = null == (s = null == (t = e.target) ? void 0 : t.closest) ? void 0 : s.call(t, ".alerts-alert");
                        a && hideAlertElement(a)
                    }
                    var o = s(4752),
                        n = s.n(o);

                    function createAlert({
                        message: e,
                        type: t,
                        id: s
                    }) {
                        createAlertElement({
                            id: null != s ? s : n()(),
                            type: t,
                            message: e
                        })
                    }

                    function showError(e = a.R0.badRequest) {
                        createAlert({
                            type: a.V5.error,
                            message: e
                        })
                    }
                },
                7359: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        zl: function() {
                            return getAbbreviatedScore
                        },
                        D4: function() {
                            return getFormattedScore
                        },
                        tu: function() {
                            return getWhiteBarPercentage
                        }
                    });
                    const a = 50,
                        o = 45,
                        n = 5,
                        getFormattedMoveScore = (e = 0) => `${e>0?"+":""}${e.toFixed(((e=0)=>3-String(Math.floor(Math.abs(e))).length)(Math.min(100,Math.abs(e))))}`;
                    const moveIsCheckmate = (e = {}) => 0 === e.mateIn,
                        moveIsStalemate = (e = {}) => e.stalemate,
                        moveIsMateIn = (e = {}) => "number" == typeof e.mateIn,
                        scoreIsPositive = (e = 0) => null !== e && e > 0,
                        getWhiteBarPercentage = (e = {}) => {
                            const t = ((e = 0) => {
                                if (null !== e) {
                                    if (e > n) return n;
                                    if (e < -n) return -n
                                }
                                return e
                            })(e.score);
                            return moveIsMateIn(e) ? (e => null !== e && e > 0 ? 100 : 0)(t) : scoreIsPositive(t) ? (e => (null != e ? e : 0) * o / n + a)(t) : ((e = 0) => null !== e && e < 0)(t) ? (e => a - Math.abs(null != e ? e : 0) * o / n)(t) : a
                        },
                        getFormattedScore = (e = {}) => {
                            var t;
                            return moveIsCheckmate(e) ? scoreIsPositive(e.score) ? "1-0" : "0-1" : moveIsStalemate(e) ? "½-½" : moveIsMateIn(e) ? `${scoreIsPositive(e.score)?"+":"-"}M${Math.abs(null!=(t=e.mateIn)?t:0)}` : getFormattedMoveScore(Math.min(100, e.score))
                        };

                    function getAbbreviatedScore(e = {}) {
                        var t;
                        return moveIsCheckmate(e) ? scoreIsPositive(e.score) ? "1-0" : "0-1" : moveIsStalemate(e) ? "½" : moveIsMateIn(e) ? `M${Math.abs(null!=(t=e.mateIn)?t:0)}` : function getAbbreviatedFormattedMoveScore(e) {
                            const t = Math.abs(e);
                            if (!e) return "0.0";
                            const s = t.toString(),
                                a = s.indexOf(".");
                            return -1 === a && t < 10 ? t.toFixed(1) : -1 === a || a >= 2 ? Math.floor(t).toString() : s.substring(0, 4 - a)
                        }(e.score)
                    }
                },
                7597: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        _G: function() {
                            return c
                        },
                        $y: function() {
                            return d
                        },
                        xL: function() {
                            return m
                        },
                        Iz: function() {
                            return u
                        }
                    });
                    var a = s(3754),
                        o = s(8160);
                    const n = "v-board-popover",
                        r = "v-tooltip";
                    var i, l;
                    const c = {
                            BLOG: "blog",
                            CSRF_TOKEN: null == (l = null == (i = window.context) ? void 0 : i.csrf) ? void 0 : l.token,
                            DARK_MODE: "dark-mode",
                            DEFAULT_LOCALE: "en_US",
                            LESSONS: "lessons",
                            NEWS: "news",
                            VIDEO: "video",
                            GRID_VIEW: "grid",
                            LIST_VIEW: "list",
                            LOCALE: window.context && window.context.locale || "en_US",
                            LOGGED_IN: window.context && window.context.user,
                            TIME: {
                                hour: 36e5
                            },
                            USERNAME: window.context && window.context.user ? window.context.user.username : null,
                            USER_COLOR_SCHEME: "COLOR_SCHEME"
                        },
                        d = {
                            CHESS_960: "chess960"
                        },
                        u = {
                            category: e => o.Z.trans(e, {}, "dynamic"),
                            daysOfWeek: [o.Z.trans("Sunday"), o.Z.trans("Monday"), o.Z.trans("Tuesday"), o.Z.trans("Wednesday"), o.Z.trans("Thursday"), o.Z.trans("Friday"), o.Z.trans("Saturday")],
                            loading: o.Z.trans("Loading..."),
                            months: [o.Z.trans("January"), o.Z.trans("February"), o.Z.trans("March"), o.Z.trans("April"), o.Z.trans("May"), o.Z.trans("June"), o.Z.trans("July"), o.Z.trans("August"), o.Z.trans("September"), o.Z.trans("October"), o.Z.trans("November"), o.Z.trans("December")],
                            monthsAbbreviated: [o.Z.trans("Jan"), o.Z.trans("Feb"), o.Z.trans("Mar"), o.Z.trans("Apr"), o.Z.trans("May"), o.Z.trans("Jun"), o.Z.trans("Jul"), o.Z.trans("Aug"), o.Z.trans("Sep"), o.Z.trans("Oct"), o.Z.trans("Nov"), o.Z.trans("Dec")],
                            noResult: o.Z.trans("No results found."),
                            pleaseEnter: e => o.Z.trans("Please enter %number% or more characters", {
                                "%number%": e
                            }),
                            showMore: o.Z.trans("More"),
                            showLess: o.Z.trans("Less"),
                            lessonsHintMessage: o.Z.trans("Let me help you learn everything you need to know with this guide."),
                            nextLessonHintMessage: o.Z.trans("Your next lesson is ready. Study daily if you really want to improve!"),
                            openingsHintMessage: o.Z.trans("Let me help you improve your openings!")
                        },
                        m = {
                            AMPLITUDE_LOGGER: "amplitude-logger",
                            AMPLITUDE_LOG_SELECTION: "[data-log-selection-to-amplitude]",
                            BOARD_POPOVER: n,
                            CAPTCHA: "captcha",
                            COLLAPSE: "v-toggle-collapse",
                            COLLAPSED: "toggle-collapsed",
                            CONTENT_AD: "content-ad",
                            CONTENT_CATEGORY_SELECT: "content-category-select",
                            CONTENT_LANGUAGE_SELECT: "content-language-select",
                            CONFIRM_OPEN: "confirm-open",
                            CONFIRM_POPOVER: "v-confirm-popover",
                            CONFIRM_POPOVER_INLINE: "confirm-popover-inline",
                            DONATE_MODAL: "donate-modal",
                            FEATURE_SIDEBAR_LINK: "post-category-link-feature",
                            FILTERS: "page-filters",
                            FOLLOW_UNFOLLOW_AUTHOR: "follow-unfollow-author",
                            FORM_DATEPICKER: "v-datepicker",
                            FORM_DROPDOWN: "form-dropdown",
                            GAME_PREVIEW: "game-preview",
                            GIFT_MEMBERSHIP_BUTTON: "give-gift-membership",
                            GIFT_MEMBERSHIP_MODAL: "gift-membership-modal",
                            HEADLINE_SIDEBAR_LINK: "post-category-link-headline",
                            HIDDEN: "toggle-hidden",
                            HINT_WRAPPER: "hint-wrapper",
                            LANGUAGE_DROPDOWN: "post-view-languages",
                            MESSAGE_PARENT: "vue-message",
                            NAVIGATION_FOOTER: "navigation-footer",
                            NEW_GAME: "new-game",
                            PAGINATION_BOTTOM: "pagination-bottom",
                            PAGINATION_TOP: "pagination-top",
                            PAGINATION_SCROLL_TOP: ".pagination-scroll-to-top",
                            POST_AUTHOR_FOLLOW: "post-author-follow",
                            POST_CAN_EDIT_URL: "post-can-edit-url",
                            POST_EDIT_URL: "post-edit-url",
                            POST_EDIT_URL_FIELD: "post-edit-url-field",
                            POST_IMAGE_BUTTON: "image-upload-button",
                            POST_IMAGE_THUMBNAIL: "image-upload-thumbnail",
                            SCROLL_TOP_ANCHOR: "scroll-top-anchor",
                            SHORT_SIDEBAR_AD_BOTTOM: "short-sidebar-ad-bottom",
                            SHORT_SIDEBAR_AD_TOP: "short-sidebar-ad-top",
                            SIDEBAR_STATS: "sidebar-stats",
                            SIDEBAR_SURVEY: "sidebar-survey",
                            SIDEBAR_TOGGLE_BUTTON_TEXT: "toggle-content-button-text",
                            SIDEBAR_TOGGLE_ICON: "toggle-content-icon",
                            SIDEBAR_USER_ITEMS: "sidebar-users-grid-toggle-item",
                            SIDEBAR_USERS_TOGGLE_BUTTON: "toggle-content-button",
                            STAT_CHART: "stat-chart",
                            TABS_BUTTON: "v5-tabs-button",
                            TABS_PANEL: "v5-tabs-panel",
                            TIMEZONES: "page-timezones",
                            TOOLTIP: r,
                            TOOLTIP_CLASS: "tooltip",
                            TOOLTIP_TOP: "top",
                            UPGRADE_ACCORDION: "upgrade-accordion",
                            USER_LEAGUE: "user-league",
                            USER_POPOVER: "v-user-popover",
                            USER_POPOVER_TOOLTIP: "v-user-popover-tooltip",
                            USER_TAGLINE: "post-view-meta-user",
                            VERSION_DROPDOWN: "version-dropdown"
                        };
                    a.Z.generate("web_security_login_and_go")
                },
                2203: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        H: function() {
                            return a
                        }
                    });
                    const a = (0, s(5174).I)()
                },
                5036: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        Gw: function() {
                            return getSettings
                        },
                        OL: function() {
                            return getStopFastTimeout
                        },
                        mC: function() {
                            return getStreamMinDepth
                        },
                        YQ: function() {
                            return isWdlBarEnabled
                        },
                        VP: function() {
                            return updateSettings
                        }
                    });
                    var a = s(6989),
                        o = s(2203),
                        n = s(7835),
                        r = s(942);
                    const i = "analysis_engine_settings";
                    var l = s(1681),
                        c = Object.defineProperty,
                        d = Object.defineProperties,
                        u = Object.getOwnPropertyDescriptors,
                        m = Object.getOwnPropertySymbols,
                        h = Object.prototype.hasOwnProperty,
                        p = Object.prototype.propertyIsEnumerable,
                        __defNormalProp = (e, t, s) => t in e ? c(e, t, {
                            enumerable: !0,
                            configurable: !0,
                            writable: !0,
                            value: s
                        }) : e[t] = s;
                    const b = {
                        depth: 20,
                        timeLimit: 10,
                        linesCount: 3,
                        engineName: a.nv,
                        isWdlBarSupported: !1,
                        hasChosenWdlBar: !1,
                        minDepths: {
                            komodo: 10,
                            stockfish: 10
                        }
                    };

                    function updateSettings(e) {
                        var t;
                        Object.assign(b, e), l.Z.set(i, (t = ((e, t) => {
                            for (var s in t || (t = {})) h.call(t, s) && __defNormalProp(e, s, t[s]);
                            if (m)
                                for (var s of m(t)) p.call(t, s) && __defNormalProp(e, s, t[s]);
                            return e
                        })({}, b), d(t, u({
                            isWdlBarEnabled: void 0
                        })))), o.H.emit("evaluation.settings-update")
                    }

                    function getSettings() {
                        return b
                    }

                    function getStopFastTimeout() {
                        return b.engineName === a.XP.KOMODO ? 50 : 200
                    }

                    function getStreamMinDepth() {
                        return b.engineName === a.XP.KOMODO ? b.minDepths.komodo : b.minDepths.stockfish
                    }
                    Object.assign(b, l.Z.get(i), {
                        isWdlBarSupported: (0, r.F)(n.R.WDL_EVAL_BAR_OPTION)
                    });
                    const isWdlBarEnabled = () => b.isWdlBarSupported && b.hasChosenWdlBar
                },
                2643: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        y0: function() {
                            return getState
                        },
                        oA: function() {
                            return resetState
                        },
                        VD: function() {
                            return updateLines
                        },
                        SZ: function() {
                            return updateSelectedPly
                        },
                        xq: function() {
                            return updateState
                        }
                    });
                    const a = {
                        fen: "",
                        isRunning: !1,
                        isLocked: !1,
                        isNewPosition: !1,
                        lines: [],
                        selectedPly: -1,
                        wdlBar: null
                    };

                    function updateSelectedPly(e) {
                        a.selectedPly = e
                    }

                    function resetState() {
                        updateState({
                            fen: "",
                            isRunning: !1,
                            isLocked: !1,
                            isNewPosition: !1,
                            lines: [],
                            selectedPly: -1,
                            wdlBar: null
                        })
                    }

                    function updateState(e) {
                        Object.assign(a, e)
                    }

                    function updateLines(e) {
                        if (!e) return void(a.lines = []);
                        if (!e.multipv) return void(a.lines = 0 === e.mateIn ? [e] : []);
                        const t = e.multipv - 1;
                        a.lines[t] ? a.lines.splice(t, 1, e) : a.lines.push(e)
                    }

                    function getState() {
                        return a
                    }
                },
                3644: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        t: function() {
                            return isRtl
                        }
                    });
                    const isRtl = () => "rtl" === document.querySelector("html").getAttribute("dir")
                },
                2468: function(e, t, s) {
                    "use strict";
                    t.Z = {
                        modalStates: {
                            select: "select",
                            send: "send",
                            sent: "sent"
                        },
                        types: {
                            game: "game",
                            social: "social"
                        }
                    }
                },
                7692: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        ZC: function() {
                            return c
                        },
                        Wp: function() {
                            return d
                        },
                        yc: function() {
                            return u
                        },
                        xL: function() {
                            return m
                        },
                        _j: function() {
                            return h
                        },
                        Iz: function() {
                            return p
                        },
                        p0: function() {
                            return b
                        },
                        qG: function() {
                            return g
                        },
                        Cz: function() {
                            return v
                        },
                        rP: function() {
                            return w
                        },
                        U3: function() {
                            return f
                        },
                        Zj: function() {
                            return y
                        }
                    });
                    var a = s(3754),
                        o = s(8160),
                        n = Object.defineProperty,
                        r = Object.getOwnPropertySymbols,
                        i = Object.prototype.hasOwnProperty,
                        l = Object.prototype.propertyIsEnumerable,
                        __defNormalProp = (e, t, s) => t in e ? n(e, t, {
                            enumerable: !0,
                            configurable: !0,
                            writable: !0,
                            value: s
                        }) : e[t] = s;
                    const c = {
                            REPORT_USER: "web_user_callback_report_user",
                            REPORT_TV_USER: "web_tv_callback_report",
                            USER_POPUP: "web_user_callback_popup"
                        },
                        d = (o.Z.trans("Membership Icons"), o.Z.trans("Emoji"), o.Z.trans("Chess"), o.Z.trans("Holiday"), o.Z.trans("Hosts"), o.Z.trans("Computer Chess"), o.Z.trans("PRO Chess League"), {
                            category: "membership_icons",
                            code: "nothing",
                            description: o.Z.trans("Nothing"),
                            id: 206,
                            imageCode: "nothing",
                            membershipLevelCode: "staff",
                            name: o.Z.trans("Nothing"),
                            status: ""
                        }),
                        u = ["blocked", "clear", "clear_light"],
                        m = {
                            USER_FLAIR: "user-flair",
                            USER_SEARCH: "user-search",
                            USER_POPOVER_CONTAINER: "user-popover"
                        },
                        h = {
                            about: () => a.Z.generate("web_about"),
                            membership: (e = "icon") => a.Z.generate("web_membership", {
                                c: e
                            }),
                            usernameSearch: e => a.Z.generate("web_user_callback_username_search", ((e, t) => {
                                for (var s in t || (t = {})) i.call(t, s) && __defNormalProp(e, s, t[s]);
                                if (r)
                                    for (var s of r(t)) l.call(t, s) && __defNormalProp(e, s, t[s]);
                                return e
                            })({
                                activeDays: 4e3
                            }, e)),
                            userDivision: ({
                                league: e,
                                division: t
                            }) => a.Z.generate("web_league_division", {
                                league: e,
                                division: t
                            })
                        },
                        p = {
                            acceptFriendRequest: o.Z.trans("Accept Friend Request"),
                            addFriend: o.Z.trans("Add Friend"),
                            block: o.Z.trans("Block"),
                            blockConfirm: o.Z.trans("Are you sure you want to block this user?"),
                            cancel: o.Z.trans("Cancel"),
                            cancelFriendRequest: o.Z.trans("Cancel Friend Request"),
                            challenge: o.Z.trans("Challenge"),
                            follow: o.Z.trans("Follow"),
                            gameArchive: o.Z.trans("Game Archive"),
                            giftMembership: o.Z.trans("Gift Membership"),
                            giveTrophy: o.Z.trans("Give Award"),
                            joinedDate: e => o.Z.trans("Joined %1$s%", {
                                "%1$s%": e
                            }),
                            lastOnline: e => o.Z.trans("Online %1$s%", {
                                "%1$s%": e
                            }),
                            moderator: o.Z.trans("Moderator"),
                            onlineNow: o.Z.trans("Online Now"),
                            inLiveNow: o.Z.trans("In Live"),
                            removeFriend: o.Z.trans("Remove Friend"),
                            removeFriendConfirm: o.Z.trans("Are you sure you want to remove this friend from your list?"),
                            report: o.Z.trans("Report"),
                            reportUser: e => o.Z.trans("Report %username%", {
                                "%username%": e
                            }),
                            sendMessage: o.Z.trans("Send Message"),
                            showYourFlair: o.Z.trans("Show your flair!"),
                            staff: o.Z.trans("Staff"),
                            unblock: o.Z.trans("Unblock"),
                            unfollow: o.Z.trans("Unfollow"),
                            userReportError: o.Z.trans("Tell us more...")
                        },
                        b = {
                            guest: 0,
                            cheater: 5,
                            abuser: 6,
                            voluntarilyClosed: 7,
                            unspecifiedClosed: 8,
                            basic: 10,
                            silver: 20,
                            gold: 30,
                            platinum: 40,
                            diamond: 50,
                            moderator: 80,
                            staff: 90
                        },
                        g = {
                            [b.diamond]: "diamond",
                            [b.abuser]: "abuser",
                            [b.cheater]: "cheater",
                            [b.voluntarilyClosed]: "inactive",
                            [b.unspecifiedClosed]: "cheater",
                            [b.gold]: "gold",
                            [b.moderator]: "pawn-blue",
                            [b.platinum]: "platinum",
                            [b.staff]: "pawn-green"
                        },
                        v = {
                            [b.basic]: o.Z.trans("Basic Membership"),
                            [b.diamond]: o.Z.trans("Diamond Membership"),
                            [b.cheater]: o.Z.trans("Closed: Fair Play"),
                            [b.abuser]: o.Z.trans("Closed: Abuse"),
                            [b.voluntarilyClosed]: o.Z.trans("Closed: Inactive"),
                            [b.unspecifiedClosed]: o.Z.trans("Account Closed"),
                            [b.gold]: o.Z.trans("Gold Membership"),
                            [b.moderator]: o.Z.trans("Moderator Account"),
                            [b.platinum]: o.Z.trans("Platinum Membership"),
                            [b.silver]: o.Z.trans("Silver Membership"),
                            [b.staff]: o.Z.trans("Staff Account")
                        },
                        w = {
                            GM: o.Z.trans("Grandmaster"),
                            WGM: o.Z.trans("Woman Grandmaster"),
                            IM: o.Z.trans("International Master"),
                            WIM: o.Z.trans("Woman International Master"),
                            FM: o.Z.trans("FIDE Master"),
                            WFM: o.Z.trans("Woman FIDE Master"),
                            NM: o.Z.trans("National Master"),
                            CM: o.Z.trans("FIDE Candidate Master"),
                            WCM: o.Z.trans("FIDE Woman Candidate Master"),
                            WNM: o.Z.trans("Woman National Master")
                        },
                        f = {
                            AUTOCOMPLETE_CLEAR_SELECTED: "form-autocomplete-clear-selected"
                        },
                        y = {
                            FETCH_ROLES: "fetchRoles"
                        }
                },
                4735: function(e, t, s) {
                    "use strict";

                    function getUserFromContext() {
                        var e;
                        return null == (e = window.context) ? void 0 : e.user
                    }
                    s.d(t, {
                        x: function() {
                            return getUserFromContext
                        }
                    })
                },
                493: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        S_: function() {
                            return checkUserStatus
                        },
                        yO: function() {
                            return getMembershipNumber
                        },
                        nJ: function() {
                            return is_guest_isGuest
                        },
                        jl: function() {
                            return is_logged_in_isLoggedIn
                        }
                    });
                    s(3754), s(5236);
                    var a = s(2220);

                    function is_logged_in_isLoggedIn() {
                        var e;
                        return Boolean((null == (e = window.context) ? void 0 : e.user) && !(0, a.Z)())
                    }
                    var o = s(7692);

                    function is_guest_isGuest() {
                        var e, t;
                        return Boolean(null == (t = null == (e = window.context) ? void 0 : e.user) ? void 0 : t.isGuest)
                    }
                    const n = window.context,
                        checkUserStatus = e => {
                            if (!is_logged_in_isLoggedIn()) return !1;
                            let t = !1;
                            switch (e) {
                                case "isActivated":
                                    t = n.user.isActivated;
                                    break;
                                case "isStaff":
                                    t = n.user.membershipLevel >= o.p0.staff;
                                    break;
                                case "isStaffOnly":
                                    t = n.user.membershipLevel === o.p0.staff;
                                    break;
                                case "isModerator":
                                    t = n.user.membershipLevel >= o.p0.moderator;
                                    break;
                                case "isModeratorOnly":
                                    t = n.user.membershipLevel === o.p0.moderator;
                                    break;
                                case "isDiamond":
                                    t = n.user.membershipLevel >= o.p0.diamond;
                                    break;
                                case "isDiamondOnly":
                                    t = n.user.membershipLevel === o.p0.diamond;
                                    break;
                                case "isPlatinum":
                                    t = n.user.membershipLevel >= o.p0.platinum;
                                    break;
                                case "isPlatinumOnly":
                                    t = n.user.membershipLevel === o.p0.platinum;
                                    break;
                                case "isSilver":
                                case "isPremium":
                                    t = n.user.membershipLevel >= o.p0.silver;
                                    break;
                                case "isSilverOnly":
                                    t = n.user.membershipLevel === o.p0.silver;
                                    break;
                                case "isGold":
                                    t = n.user.membershipLevel >= o.p0.gold;
                                    break;
                                case "isGoldOnly":
                                    t = n.user.membershipLevel === o.p0.gold;
                                    break;
                                case "isBasic":
                                    t = n.user.membershipLevel === o.p0.basic;
                                    break;
                                case "isNewlyRegistered":
                                    t = n.user.isNewlyRegistered;
                                    break;
                                case "isGuest":
                                    t = n.user.isGuest;
                                    break;
                                case "chessTitle":
                                    t = n.user.chessTitle;
                                    break;
                                default:
                                    t = !1
                            }
                            return t
                        },
                        getMembershipNumber = (e, t) => !t && e >= o.p0.basic ? o.p0.unspecifiedClosed : e
                },
                4734: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        Z: function() {
                            return R
                        }
                    });
                    var a = s(4735),
                        o = s(7692);
                    const n = s(5696).n;

                    function createApproveFriendRequest(e) {
                        return function approveFriendRequest(t) {
                            const {
                                actionQueue: s,
                                http: a,
                                Router: o
                            } = e;
                            return s.add(a.put, o.generate("web_friend_accept_request_callback", {
                                user: t
                            }))
                        }
                    }

                    function createAddFriend(e) {
                        return function addFriend(t, s = !1) {
                            const {
                                actionQueue: a,
                                http: o,
                                Router: n
                            } = e, r = {
                                user: t
                            };
                            return s && (r.recommendation = 1), a.add(o.post, n.generate("web_friend_request_callback", r))
                        }
                    }

                    function createBlockUser(e) {
                        return function blockUser(t) {
                            const {
                                actionQueue: s,
                                CSRFToken: a,
                                http: o,
                                Router: n
                            } = e;
                            return s.add(o.post, n.generate("web_member_callback_block_member", {
                                username: t
                            }), {
                                _token: a
                            })
                        }
                    }

                    function createCancelFriendRequest(e) {
                        return function cancelFriendRequest(t) {
                            const {
                                actionQueue: s,
                                http: a,
                                Router: o
                            } = e;
                            return s.add(a.post, o.generate("web_friend_cancel_request_callback", {
                                user: t
                            }))
                        }
                    }

                    function createCheckMembershipStatus(e) {
                        return function checkMembershipStatus(t) {
                            const {
                                membership: s,
                                service: a,
                                user: o
                            } = e;
                            if (!a.isLoggedIn()) return !1;
                            let n = !1;
                            switch (t) {
                                case "isActivated":
                                    n = o.isActivated;
                                    break;
                                case "isStaff":
                                    n = o.membershipLevel >= s.staff;
                                    break;
                                case "isStaffOnly":
                                    n = o.membershipLevel === s.staff;
                                    break;
                                case "isModerator":
                                    n = o.membershipLevel >= s.moderator;
                                    break;
                                case "isModeratorOnly":
                                    n = o.membershipLevel === s.moderator;
                                    break;
                                case "isDiamond":
                                    n = o.membershipLevel >= s.diamond;
                                    break;
                                case "isDiamondOnly":
                                    n = o.membershipLevel === s.diamond;
                                    break;
                                case "isPlatinum":
                                    n = o.membershipLevel >= s.platinum;
                                    break;
                                case "isPlatinumOnly":
                                    n = o.membershipLevel === s.platinum;
                                    break;
                                case "isSilver":
                                case "isPremium":
                                    n = o.membershipLevel >= s.silver;
                                    break;
                                case "isSilverOnly":
                                    n = o.membershipLevel === s.silver;
                                    break;
                                case "isGold":
                                    n = o.membershipLevel >= s.gold;
                                    break;
                                case "isGoldOnly":
                                    n = o.membershipLevel === s.gold;
                                    break;
                                case "isBasic":
                                    n = o.membershipLevel === s.basic;
                                    break;
                                default:
                                    n = !1
                            }
                            return n
                        }
                    }

                    function createCheckValidUsername(e) {
                        return function checkValidUsername(t) {
                            const {
                                http: s,
                                Router: a
                            } = e;
                            return s.get(a.generate("web_user_callback_valid_username", {
                                username: t
                            }))
                        }
                    }

                    function createDeclineFriendRequest(e) {
                        return function declineFriendRequest(t) {
                            const {
                                actionQueue: s,
                                http: a,
                                Router: o
                            } = e;
                            return s.add(a.post, o.generate("web_friend_decline_request_callback", {
                                user: t
                            }))
                        }
                    }

                    function createDeleteFriend(e) {
                        return function deleteFriend(t) {
                            const {
                                actionQueue: s,
                                http: a,
                                Router: o
                            } = e;
                            return s.add(a.delete, o.generate("web_friend_delete_callback", {
                                user: t
                            }))
                        }
                    }

                    function createDismissFollowSuggestion(e) {
                        return function dismissFollowSuggestion(t) {
                            const {
                                actionQueue: s,
                                http: a,
                                Router: o
                            } = e;
                            return s.add(a.post, o.generate("web_user_callback_dismiss_follow_suggestion", {
                                username: t
                            }))
                        }
                    }

                    function createEligibleFirstTrial(e) {
                        return function EligibleFirstTrial() {
                            const {
                                service: t,
                                user: s
                            } = e;
                            return t.isLoggedIn() && s.eligibleFirstTrial
                        }
                    }
                    var r = s(5174),
                        i = s(5134);

                    function getDefaultBoardOptions() {
                        return {
                            animationType: "default",
                            boardSize: "auto",
                            boardStyle: "green",
                            coordinates: "inside",
                            darkMode: !0,
                            highlightLegalMoves: !0,
                            highlightMoves: !0,
                            isWhiteOnBottom: !1,
                            moveListDisplayType: "text",
                            moveMethod: "drag",
                            pieceStyle: "neo",
                            playSounds: !0,
                            soundTheme: "default"
                        }
                    }
                    var l = s(5236),
                        c = s(2220);

                    function formatResponse(e) {
                        const {
                            animationType: t,
                            boardCoords: s,
                            boardSize: a,
                            colorScheme: o,
                            evaluationBar: n,
                            highlightLegalMoves: r,
                            highlightMoves: i,
                            isWhiteOnBottom: c,
                            moveListDisplayType: d,
                            moveMethod: u,
                            pieceStyle: m,
                            playSounds: h,
                            soundTheme: p
                        } = e.data, b = (0, l.KZ)();
                        return {
                            animationType: (v = t, "battle" === v ? "default" : v),
                            boardSize: a,
                            boardStyle: o,
                            coordinates: (g = s, ["off", "inside", "outside"][parseInt(g, 10)]),
                            darkMode: b,
                            evaluationBarType: n,
                            highlightLegalMoves: "1" === r,
                            highlightMoves: "1" === i,
                            isWhiteOnBottom: c,
                            moveListDisplayType: d,
                            moveMethod: u,
                            pieceStyle: m,
                            playSounds: "1" === h,
                            soundTheme: p
                        };
                        var g, v
                    }

                    function createFetchReportReasonsData(e) {
                        return function fetchReportReasonsData() {
                            const {
                                http: t,
                                Router: s
                            } = e;
                            return t.get(s.generate("web_user_callback_report_reasons"))
                        }
                    }

                    function createGet(e) {
                        return function get(t) {
                            const {
                                user: s
                            } = e;
                            return s ? t ? s[t] : s : null
                        }
                    }

                    function createGetAvatar(e) {
                        return function getAvatar(t) {
                            const {
                                http: s,
                                Router: a
                            } = e;
                            return s.get(a.generate("pubapi_player_profile", {
                                username: t
                            }))
                        }
                    }

                    function createGetFollowSuggestions(e) {
                        return function getFollowSuggestions() {
                            const {
                                http: t,
                                Router: s
                            } = e;
                            return t.get(s.generate("web_user_callback_follow_suggestions"))
                        }
                    }

                    function createGetFriends(e) {
                        return function getFriends(t) {
                            const {
                                http: s,
                                Router: a
                            } = e;
                            return s.get(a.generate("web_friend_callback_friends_search", t))
                        }
                    }

                    function createGetOpponents(e) {
                        return function getOpponents() {
                            const {
                                http: t,
                                Router: s
                            } = e;
                            return t.get(s.generate("web_user_callback_recent_opponents"))
                        }
                    }

                    function createIsLoggedIn(e) {
                        return function isLoggedIn() {
                            const {
                                is2FARoute: t,
                                user: s
                            } = e;
                            return s && s.id && !t()
                        }
                    }

                    function createIsEnabled(e) {
                        return function isEnabled() {
                            const {
                                service: t,
                                user: s
                            } = e;
                            return t.isLoggedIn() && s.isEnabled
                        }
                    }

                    function createIsImpersonating(e) {
                        return function isImpersonating() {
                            const {
                                service: t,
                                user: s
                            } = e;
                            return t.isLoggedIn() && s.isImpersonating
                        }
                    }

                    function createGenerateProfileLink(e) {
                        return function generateProfileLink(t) {
                            const {
                                Router: s
                            } = e;
                            return t ? `<a href="${s.generate("web_member_view",{username:t})}" target="_self">${t}</a>` : ""
                        }
                    }

                    function getPromises() {
                        return window.chesscom.promises || (window.chesscom.promises = {}), window.chesscom.promises
                    }
                    var d = s(493);

                    function createGetRoles(e) {
                        return function getRoles() {
                            const {
                                http: t,
                                Router: s
                            } = e;
                            return (0, d.jl)() ? function execAndCache({
                                id: e,
                                promise: t
                            }) {
                                const s = getPromises();
                                return s[e] || (s[e] = new Promise(((e, s) => {
                                    t().then(e).catch(s)
                                }))), s[e]
                            }({
                                id: o.Zj.FETCH_ROLES,
                                promise: () => t.get(s.generate("web_security_callback_user_roles"))
                            }) : []
                        }
                    }

                    function createGetUser(e) {
                        return function getUser(t) {
                            const {
                                http: s,
                                Router: a
                            } = e;
                            return s.get(a.generate("web_user_callback_popup", {
                                username: t
                            }))
                        }
                    }

                    function createGuestUpdateSkillLevel(e) {
                        return function guestUpdateSkillLevel(t) {
                            const {
                                http: s,
                                Router: a
                            } = e;
                            return s.post(a.generate("web_guest_update_skill_level"), {
                                skill_level: Number(t)
                            })
                        }
                    }
                    var u = s(2591);

                    function createReportUser(e) {
                        return function reportUser(t) {
                            const {
                                callbacks: s,
                                http: a,
                                Router: o
                            } = e;
                            return a.post(o.generate(s.REPORT_USER), {
                                abuser_username: t.username,
                                reason_id: t.picked,
                                other_reason: t.otherReason,
                                block_user: t.blockUser,
                                reporter_url: window.location.href
                            })
                        }
                    }
                    const m = s(517).f,
                        h = {
                            coordinates: e => ["off", "inside", "outside"].indexOf(e),
                            evaluationBarType: e => parseInt(e, 10)
                        };
                    var p = Object.defineProperty,
                        b = Object.defineProperties,
                        g = Object.getOwnPropertyDescriptors,
                        v = Object.getOwnPropertySymbols,
                        w = Object.prototype.hasOwnProperty,
                        f = Object.prototype.propertyIsEnumerable,
                        __defNormalProp = (e, t, s) => t in e ? p(e, t, {
                            enumerable: !0,
                            configurable: !0,
                            writable: !0,
                            value: s
                        }) : e[t] = s;

                    function createSaveBoardSetting(e) {
                        return function saveBoardSetting(t, s) {
                            const {
                                actionQueue: a,
                                emitUser: o,
                                http: n,
                                Router: r,
                                service: i,
                                update: l
                            } = e, {
                                boardOptions: c
                            } = i.get(), d = l("boardOptions", (u = ((e, t) => {
                                for (var s in t || (t = {})) w.call(t, s) && __defNormalProp(e, s, t[s]);
                                if (v)
                                    for (var s of v(t)) f.call(t, s) && __defNormalProp(e, s, t[s]);
                                return e
                            })({}, c), b(u, g({
                                [t]: s
                            }))));
                            var u;
                            let p = s;
                            return "coordinates" !== t && "evaluationBarType" !== t || (p = h[t](s)), a.add(n.post, r.generate(m[t]), {
                                action: p
                            }).then(o).catch((() => {
                                d(), o()
                            }))
                        }
                    }
                    var y = Object.defineProperty,
                        _ = Object.getOwnPropertySymbols,
                        k = Object.prototype.hasOwnProperty,
                        C = Object.prototype.propertyIsEnumerable,
                        search_username_defNormalProp = (e, t, s) => t in e ? y(e, t, {
                            enumerable: !0,
                            configurable: !0,
                            writable: !0,
                            value: s
                        }) : e[t] = s;

                    function createSearchUsername(e) {
                        return function searchUsername(t, s = {}) {
                            const {
                                http: a,
                                routes: o
                            } = e;
                            return a.get(o.usernameSearch(((e, t) => {
                                for (var s in t || (t = {})) k.call(t, s) && search_username_defNormalProp(e, s, t[s]);
                                if (_)
                                    for (var s of _(t)) C.call(t, s) && search_username_defNormalProp(e, s, t[s]);
                                return e
                            })({
                                query: t
                            }, s)))
                        }
                    }

                    function createSet(e) {
                        return function set(t, s) {
                            const {
                                user: a
                            } = e;
                            return a ? (a[t] = s, a) : null
                        }
                    }

                    function createSetArchiveView(e) {
                        return function setArchiveView(t) {
                            const {
                                emitUser: s,
                                http: a,
                                Router: o,
                                update: n
                            } = e, r = n("archiveView", t);
                            return a.post(o.generate("web_user_callback_set_archive_view"), {
                                archiveView: t
                            }).then(s).catch((() => {
                                r(), s()
                            }))
                        }
                    }

                    function createSetFairPlayAgree(e) {
                        return function setFairPlayAgree(t) {
                            const {
                                emitUser: s,
                                http: a,
                                Router: o,
                                update: n
                            } = e, r = n("fairPlayAgree", t);
                            return a.post(o.generate("web_user_callback_set_fair_play_agree", {
                                fairPlayAgree: t ? 1 : 0
                            })).then(s).catch((() => {
                                r(), s()
                            }))
                        }
                    }

                    function createSetHomeContentType(e) {
                        return function setHomeContentType(t) {
                            const {
                                emitUser: s,
                                http: a,
                                Router: o,
                                update: n
                            } = e, r = n("homeContentType", t);
                            return a.post(o.generate("web_user_callback_set_home_recent_content_type"), {
                                recentContentType: t
                            }).then(s).catch((() => {
                                r(), s()
                            }))
                        }
                    }

                    function createTrackUser(e) {
                        return function trackUser(t) {
                            const {
                                actionQueue: s,
                                CSRFToken: a,
                                http: o,
                                Router: n
                            } = e;
                            return s.add(o.post, n.generate("web_member_callback_track_member", {
                                username: t
                            }), {
                                _token: a
                            })
                        }
                    }

                    function createUnblockUser(e) {
                        return function unblockUser(t) {
                            const {
                                actionQueue: s,
                                CSRFToken: a,
                                http: o,
                                Router: n
                            } = e;
                            return s.add(o.post, n.generate("web_member_callback_unblock_member", {
                                username: t
                            }), {
                                _token: a
                            })
                        }
                    }

                    function createUntrackUser(e) {
                        return function untrackUser(t) {
                            const {
                                actionQueue: s,
                                CSRFToken: a,
                                http: o,
                                Router: n
                            } = e;
                            return s.add(o.post, n.generate("web_member_callback_untrack_member", {
                                username: t
                            }), {
                                _token: a
                            })
                        }
                    }
                    var S = s(3167),
                        x = Object.defineProperty,
                        $ = Object.getOwnPropertySymbols,
                        P = Object.prototype.hasOwnProperty,
                        E = Object.prototype.propertyIsEnumerable,
                        service_defNormalProp = (e, t, s) => t in e ? x(e, t, {
                            enumerable: !0,
                            configurable: !0,
                            writable: !0,
                            value: s
                        }) : e[t] = s;
                    const O = {
                        getToken: function getToken() {
                            return window.context && window.context.csrf && window.context.csrf.token
                        }
                    };
                    var A = s(2433),
                        T = s(3754);
                    const M = function createUserService({
                        cache: e,
                        callbacks: t,
                        CSRF: s,
                        getCurrentUser: a,
                        http: n,
                        includeBoardOptions: l = !1,
                        Router: d,
                        routes: m
                    }) {
                        const h = (0, u.j)(!0),
                            p = (0, r.I)(),
                            b = function getInitialUser() {
                                const t = a(),
                                    s = function getDefaultUser() {
                                        var e;
                                        return {
                                            avatarUrl: null == (e = null == window ? void 0 : window.Config) ? void 0 : e.noAvatar,
                                            archiveView: "grid",
                                            boardOptions: {
                                                animationType: "default",
                                                boardSize: "auto",
                                                boardStyle: "green",
                                                coordinates: "inside",
                                                darkMode: !0,
                                                highlightLegalMoves: !0,
                                                highlightMoves: !0,
                                                isWhiteOnBottom: !1,
                                                moveListDisplayType: "text",
                                                moveMethod: "drag",
                                                pieceStyle: "neo",
                                                playSounds: !0,
                                                soundTheme: "default"
                                            },
                                            country: null,
                                            features: {},
                                            flag: null,
                                            friends: [],
                                            homeContentType: "following",
                                            isLoggedIn: !1,
                                            loading: {
                                                friends: !1,
                                                opponents: !1
                                            },
                                            membership: null,
                                            opponents: [],
                                            rating: null,
                                            roles: [],
                                            username: ""
                                        }
                                    }();
                                if (!t) return s;
                                const o = Object.assign({}, s, t);
                                if (!t.isImpersonating) {
                                    const t = e.getBoardOptions();
                                    Object.keys(t).length && Object.assign(o.boardOptions, (0, S.ei)(t, ["animationType", "boardSize", "boardStyle", "coordinates", "darkMode", "highlightLegalMoves", "highlightMoves", "isWhiteOnBottom", "moveListDisplayType", "moveMethod", "pieceStyle", "playSounds", "soundTheme"]))
                                }
                                return o
                            }(),
                            g = {
                                actionQueue: h,
                                callbacks: t,
                                CSRFToken: s.getToken(),
                                emitUser: emitUser,
                                http: n,
                                is2FARoute: c.Z,
                                membership: o.p0,
                                Router: d,
                                routes: m,
                                update: function update(t, s) {
                                    const a = b[t];
                                    return b[t] = s, e.setBoardOptions(s),
                                        function undo() {
                                            b[t] = a, e.setBoardOptions(a)
                                        }
                                },
                                user: b
                            },
                            v = ((e, t) => {
                                for (var s in t || (t = {})) P.call(t, s) && service_defNormalProp(e, s, t[s]);
                                if ($)
                                    for (var s of $(t)) E.call(t, s) && service_defNormalProp(e, s, t[s]);
                                return e
                            })({
                                addFriend: createAddFriend(g),
                                approveFriendRequest: createApproveFriendRequest(g),
                                blockUser: createBlockUser(g),
                                cancelFriendRequest: createCancelFriendRequest(g),
                                checkMembershipStatus: createCheckMembershipStatus(g),
                                checkValidUsername: createCheckValidUsername(g),
                                declineFriendRequest: createDeclineFriendRequest(g),
                                deleteFriend: createDeleteFriend(g),
                                dismissFollowSuggestion: createDismissFollowSuggestion(g),
                                eligibleFirstTrial: createEligibleFirstTrial(g),
                                fetchBoardOptions: l ? function fetchBoardOptions() {
                                    return (0, c.Z)() ? Promise.resolve() : (0, i.h)("web_user_callback_get_board_settings").then(formatResponse).catch(getDefaultBoardOptions)
                                } : void 0,
                                fetchReportReasonsData: createFetchReportReasonsData(g),
                                generateProfileLine: createGenerateProfileLink(g),
                                get: createGet(g),
                                getAvatar: createGetAvatar(g),
                                getFollowSuggestions: createGetFollowSuggestions(g),
                                getFriends: createGetFriends(g),
                                getOpponents: createGetOpponents(g),
                                getRoles: createGetRoles(g),
                                getUser: createGetUser(g),
                                guestUpdateSkillLevel: createGuestUpdateSkillLevel(g),
                                isEnabled: createIsEnabled(g),
                                isImpersonating: createIsImpersonating(g),
                                isLoggedIn: createIsLoggedIn(g),
                                reportUser: createReportUser(g),
                                saveBoardSetting: createSaveBoardSetting(g),
                                searchUsername: createSearchUsername(g),
                                set: createSet(g),
                                setArchiveView: createSetArchiveView(g),
                                setFairPlayAgree: createSetFairPlayAgree(g),
                                setHomeContentType: createSetHomeContentType(g),
                                trackUser: createTrackUser(g),
                                unblockUser: createUnblockUser(g),
                                untrackUser: createUntrackUser(g)
                            }, p);
                        return v.saveBoardSettings = function saveBoardSettings(e) {
                            Object.entries(e).forEach((([e, t]) => v.saveBoardSetting(e, t)))
                        }, async function fetchAndApplyBoardOptions() {
                            if (v.fetchBoardOptions) try {
                                const t = await v.fetchBoardOptions();
                                v.set("boardOptions", t), e.setBoardOptions(t), emitUser()
                            } catch (t) {}
                        }(), v.acceptFollowSuggestion = v.trackUser, g.service = v, v;

                        function emitUser(e) {
                            p.emit(e, b)
                        }
                    }({
                        callbacks: o.ZC,
                        cache: n,
                        CSRF: O,
                        getCurrentUser: a.x,
                        http: A.Z,
                        Router: T.Z,
                        routes: o._j
                    });
                    var R = M
                },
                162: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        Z: function() {
                            return r
                        }
                    });
                    var a = s(9947),
                        o = {
                            name: "FormCheckbox",
                            mixins: [s(2597).Z, a.Z],
                            props: {
                                disabled: {
                                    type: Boolean,
                                    default: !1
                                },
                                id: {
                                    type: String
                                },
                                label: {
                                    type: String,
                                    required: !0
                                },
                                name: {
                                    type: String,
                                    required: !0
                                },
                                value: {
                                    type: Boolean,
                                    required: !0
                                }
                            },
                            emits: ["input"],
                            methods: {
                                setCheckboxStatus(e) {
                                    this.$emit("input", e)
                                }
                            }
                        },
                        n = {
                            component: "form-checkbox-component",
                            label: "form-checkbox-label",
                            checkbox: "form-checkbox-checkbox"
                        };
                    var r = (0, s(1900).Z)(o, (function() {
                        var e = this,
                            t = e.$createElement,
                            s = e._self._c || t;
                        return s("div", {
                            class: [e.componentClasses(), e.themeClasses]
                        }, [s("input", {
                            class: e.$style.checkbox,
                            attrs: {
                                id: e.id || e.name,
                                type: "checkbox",
                                disabled: e.disabled,
                                name: e.name
                            },
                            domProps: {
                                checked: e.value
                            },
                            on: {
                                change: function(t) {
                                    return e.setCheckboxStatus(t.target.checked)
                                }
                            }
                        }), e._v(" "), s("label", {
                            class: e.$style.label,
                            attrs: {
                                for: e.name
                            }
                        }, [e._v("\n    " + e._s(e.label) + "\n  ")])])
                    }), [], !1, (function injectStyles(e) {
                        this.$style = n.locals || n
                    }), null, null).exports
                },
                3559: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        Z: function() {
                            return n
                        }
                    });
                    var a = {
                            name: "FormError"
                        },
                        o = {
                            component: "form-error-component"
                        };
                    var n = (0, s(1900).Z)(a, (function() {
                        var e = this,
                            t = e.$createElement;
                        return (e._self._c || t)("div", {
                            class: e.$style.component
                        }, [e._t("default")], 2)
                    }), [], !1, (function injectStyles(e) {
                        this.$style = o.locals || o
                    }), null, null).exports
                },
                468: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        Z: function() {
                            return c
                        }
                    });
                    var a = s(2597),
                        o = s(9947),
                        n = s(4089),
                        r = s(7241),
                        i = {
                            name: "FormInput",
                            components: {
                                IconFont: n.Z
                            },
                            directives: {
                                tooltip: r.Z
                            },
                            mixins: [a.Z, o.Z],
                            props: {
                                ariaLabel: String,
                                autocomplete: String,
                                autofocus: Boolean,
                                disabled: {
                                    type: Boolean,
                                    default: !1,
                                    required: !1
                                },
                                iconLeft: {
                                    type: String,
                                    required: !1
                                },
                                iconLeftTooltip: {
                                    type: String,
                                    default: ""
                                },
                                iconRight: {
                                    type: String,
                                    required: !1
                                },
                                iconRightTooltip: {
                                    type: String,
                                    default: ""
                                },
                                id: String,
                                maxlength: Number,
                                name: String,
                                placeholder: {
                                    type: String,
                                    required: !1
                                },
                                readonly: {
                                    type: Boolean,
                                    default: !1,
                                    required: !1
                                },
                                size: {
                                    type: String,
                                    required: !1
                                },
                                type: {
                                    type: String,
                                    default: "text"
                                },
                                value: {
                                    type: [String, Number],
                                    required: !1
                                }
                            },
                            emits: ["input", "enter", "keyup", "focus", "blur"],
                            computed: {
                                inputClasses() {
                                    const {
                                        $style: e,
                                        iconLeft: t,
                                        iconRight: s,
                                        lightMode: a,
                                        size: o
                                    } = this;
                                    return [e.input, e[o], {
                                        [e.left]: t,
                                        [e.right]: s,
                                        "light-mode": a
                                    }]
                                }
                            },
                            methods: {
                                blurEvent(e) {
                                    this.$emit("blur", e)
                                },
                                focusEvent(e) {
                                    this.$emit("focus", e)
                                },
                                keyupEvent(e) {
                                    this.$emit("keyup", e)
                                },
                                keyupEnterEvent(e) {
                                    this.$emit("enter", e)
                                },
                                onIconClick(e) {
                                    this.$emit(`icon-click-${e}`)
                                },
                                updateValue(e) {
                                    this.$emit("input", e)
                                }
                            }
                        },
                        l = {
                            component: "form-input-component",
                            wrapper: "form-input-wrapper",
                            icon: "form-input-icon",
                            left: "form-input-left",
                            right: "form-input-right",
                            input: "form-input-input",
                            large: "form-input-large",
                            "x-large": "form-input-x-large"
                        };
                    var c = (0, s(1900).Z)(i, (function() {
                        var e = this,
                            t = e.$createElement,
                            s = e._self._c || t;
                        return s("div", {
                            class: [e.componentClasses(), e.themeClasses]
                        }, [e.iconLeft ? s("icon-font", {
                            directives: [{
                                name: "tooltip",
                                rawName: "v-tooltip",
                                value: e.iconLeftTooltip,
                                expression: "iconLeftTooltip"
                            }],
                            class: [e.$style.icon, e.$style.left],
                            attrs: {
                                "is-dark-mode": e.isDarkMode,
                                name: e.iconLeft,
                                theme: "primary"
                            },
                            on: {
                                click: function(t) {
                                    return e.onIconClick("left")
                                }
                            }
                        }) : e._e(), e._v(" "), s("input", {
                            class: e.inputClasses,
                            attrs: {
                                id: e.id,
                                "aria-label": e.ariaLabel,
                                autocomplete: e.autocomplete,
                                autofocus: e.autofocus,
                                disabled: e.disabled,
                                maxlength: e.maxlength,
                                name: e.name,
                                placeholder: e.placeholder,
                                readonly: e.readonly,
                                type: e.type
                            },
                            domProps: {
                                value: e.value
                            },
                            on: {
                                blur: function(t) {
                                    return e.blurEvent(t)
                                },
                                focus: function(t) {
                                    return e.focusEvent(t)
                                },
                                input: function(t) {
                                    return e.updateValue(t.target.value)
                                },
                                keyup: [function(t) {
                                    return e.keyupEvent(t)
                                }, function(t) {
                                    return !t.type.indexOf("key") && e._k(t.keyCode, "enter", 13, t.key, "Enter") ? null : e.keyupEnterEvent(t)
                                }]
                            }
                        }), e._v(" "), e.iconRight ? s("icon-font", {
                            directives: [{
                                name: "tooltip",
                                rawName: "v-tooltip",
                                value: e.iconRightTooltip,
                                expression: "iconRightTooltip"
                            }],
                            class: [e.$style.icon, e.$style.right],
                            attrs: {
                                "is-dark-mode": e.isDarkMode,
                                name: e.iconRight
                            },
                            on: {
                                click: function(t) {
                                    return e.onIconClick("right")
                                }
                            }
                        }) : e._e()], 1)
                    }), [], !1, (function injectStyles(e) {
                        this.$style = l.locals || l
                    }), null, null).exports
                },
                4089: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        Z: function() {
                            return o
                        }
                    });
                    var a = {
                            name: "IconFont",
                            props: {
                                family: {
                                    type: String,
                                    default: "chess"
                                },
                                isDarkMode: {
                                    type: Boolean,
                                    default: !1
                                },
                                name: {
                                    type: String,
                                    required: !0
                                },
                                theme: {
                                    type: String,
                                    default: ""
                                }
                            },
                            computed: {
                                iconFamilyClass() {
                                    return `icon-font-${this.family}`
                                },
                                iconFamilyTheme() {
                                    return `icon-font-${this.theme}`
                                }
                            }
                        },
                        o = (0, s(1900).Z)(a, (function() {
                            var e, t = this,
                                s = t.$createElement,
                                a = t._self._c || s;
                            return a("div", t._g({
                                class: ["icon-font-component", (e = {}, e["icon-font-darkMode"] = t.isDarkMode, e)]
                            }, t.$listeners), [a("span", {
                                class: [t.iconFamilyClass, t.name, t.iconFamilyTheme]
                            })])
                        }), [], !1, null, null, null).exports
                },
                6426: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        Z: function() {
                            return n
                        }
                    });
                    var a = {
                            name: "LoaderThreeBounce",
                            props: {
                                isCircle: {
                                    type: Boolean,
                                    default: !1
                                },
                                size: {
                                    type: Number,
                                    default: 80
                                }
                            },
                            computed: {
                                dotCss() {
                                    const e = `${Math.round(this.size/4)}px`;
                                    return {
                                        width: e,
                                        height: e
                                    }
                                }
                            }
                        },
                        o = {
                            component: "loader-three-bounce-component",
                            circle: "loader-three-bounce-circle",
                            dot: "loader-three-bounce-dot",
                            animate: "loader-three-bounce-animate",
                            bounce1: "loader-three-bounce-bounce1",
                            bounce2: "loader-three-bounce-bounce2"
                        };
                    var n = (0, s(1900).Z)(a, (function() {
                        var e, t = this,
                            s = t.$createElement,
                            a = t._self._c || s;
                        return a("div", {
                            class: [t.$style.component, (e = {}, e[t.$style.circle] = t.isCircle, e)],
                            style: {
                                width: t.size + "px"
                            },
                            attrs: {
                                "data-test-element": "loader-three-bounce"
                            }
                        }, [a("div", {
                            class: [t.$style.dot, t.$style.bounce1],
                            style: t.dotCss
                        }), t._v(" "), a("div", {
                            class: [t.$style.dot, t.$style.bounce2],
                            style: t.dotCss
                        }), t._v(" "), a("div", {
                            class: t.$style.dot,
                            style: t.dotCss
                        })])
                    }), [], !1, (function injectStyles(e) {
                        this.$style = o.locals || o
                    }), null, null).exports
                },
                5072: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        Z: function() {
                            return g
                        }
                    });
                    var a = s(2305);
                    const o = "modal-did-hide",
                        n = ((0, a.dW)("Sign up to analyze your games!"), (0, a.dW)("Sign up to unlock Lessons!"), (0, a.dW)("Sign up to use this feature."), (0, a.dW)("Sign up to keep solving puzzles!"), (0, a.dW)("Sign up to track your progress!"), (0, a.dW)("Already have an account? Log in"), (0, a.dW)("Play, Learn and Connect"), (0, a.dW)("Join millions of chess players."), (0, a.dW)("150k+ Puzzles"), (0, a.dW)("Play every day to improve"), (0, a.dW)("1500+ Lessons"), (0, a.dW)("Learn from chess masters!"), (0, a.dW)("Full Game Analysis"), (0, a.dW)("Learn from every game!"), (0, a.dW)("Get a Rating"), (0, a.dW)("Save your games!"), (0, a.dW)("Explore Full Openings"), (0, a.dW)("See moves played by masters!"), (0, a.dW)("Full Analysis"), (0, a.dW)("Full Report, Accuracy, Key Moments"), (0, a.dW)("Unlimited Puzzles"), (0, a.dW)("Solve 8+ Puzzles/day to improve fast"), (0, a.dW)("Unlimited Lessons"), (0, a.dW)("Your step-by-step path to mastery"), (0, a.dW)("Remove Ads"), (0, a.dW)("Get the best Chess.com experience"), (0, a.dW)("Unlimited Puzzle Rush"), (0, a.dW)("3 strikes and you're out!"), (0, a.dW)("Unlimited Puzzle Battles"), (0, a.dW)("Rush another player to win!"), (0, a.dW)("Get Your Own Flair"), (0, a.dW)("Share your unique personality"), (0, a.dW)("Explore Full Openings"), (0, a.dW)("See moves played by masters!"), (0, a.dW)("Master Every Position"), (0, a.dW)("Practice means everything!"), (0, a.dW)("Unlock All Bots"), (0, a.dW)("Play vs various skills and styles."), (0, a.dW)("Unlimited Collections"), (0, a.dW)("Build and organize your library"), (0, a.dW)("Unlimited Daily Puzzles"), (0, a.dW)("Unlock all daily puzzles."), "clubs"),
                        r = "explorer",
                        i = "leagues",
                        l = "lessons",
                        c = "library",
                        d = "openings",
                        u = "solo",
                        m = "tournaments",
                        h = "vision";
                    (0, a.dW)("Play bots with various strengths and styles"), (0, a.dW)("Use optional coaching features for insights"), (0, a.dW)("Practice at any time - with no pressure"), (0, a.dW)("Challenge the computer to an online chess game."), (0, a.dW)("Chess Computer"), (0, a.dW)("Search millions of master games"), (0, a.dW)("Choose specific players to explore"), (0, a.dW)("Find winning moves from your games"), (0, a.dW)("See moves chess masters have made and the outcome of the game from any position."), (0, a.dW)("Chess Explorer"), (0, a.dW)("Search more than 3,000 opening lines"), (0, a.dW)("Find the perfect chess opening for you"), (0, a.dW)("Explore variations and master chess games"), (0, a.dW)("Learn and explore chess openings to try in your chess games."), (0, a.dW)("Chess Openings"), (0, a.dW)("Capture a piece with every move until just one remains"), (0, a.dW)("No piece may capture more than 2 times per puzzle"), (0, a.dW)("If there is a King on the board, it must be the final piece"), (0, a.dW)("Try for a perfect run in Challenge Mode!"), (0, a.dW)("Start"), (0, a.dW)("How to Play"), (0, a.dW)("Solo Chess"), (0, a.dW)("Improve vision with coordinate training"), (0, a.dW)("Identify squares or make moves"), (0, a.dW)("Answer as many as you can in 30 seconds"), (0, a.dW)("Start"), (0, a.dW)("Learn to quickly follow and record chess coordinates and annotation."), (0, a.dW)("Vision Trainer"), (0, a.dW)("Watch videos to learn concepts"), (0, a.dW)("Test knowledge with Challenges"), (0, a.dW)("Level up to achieve Mastery"), (0, a.dW)("Learn from interactive lessons created by chess masters."), (0, a.dW)("Chess Lessons"), (0, a.dW)("Represent your club in matches"), (0, a.dW)("Chat in private forums"), (0, a.dW)("Organize your team"), (0, a.dW)("Join an Online Chess Club and connect and compete with your friends in matches."), (0, a.dW)("Chess Clubs"), (0, a.dW)("Join tournaments starting every few minutes"), (0, a.dW)("Compete in Daily, multi-game tournaments"), (0, a.dW)("Win trophies to display on your Profile"), (0, a.dW)("Compete in online chess tournaments or join an online Arena, where anyone can win."), (0, a.dW)("Chess Tournaments"), (0, a.dW)("Create collections from games played online, offline, or uploaded."), (0, a.dW)("Open, analyze, edit, and re-save your games to your collection."), (0, a.dW)("Organize, tag, and share your collections with others."), (0, a.dW)("Compile your very own Collection of personal, master, and all other games."), (0, a.dW)("Library"), (0, a.dW)("Play and win games to earn points"), (0, a.dW)("All major formats supported - bullet, blitz, rapid & arena"), (0, a.dW)("The longer the time control, the more points you earn"), (0, a.dW)("Earn trophies and advance to the Next League by playing games."), (0, a.dW)("Players Leagues");
                    var p = {
                            name: "ModalContainer",
                            props: {
                                autoShow: {
                                    type: Boolean,
                                    default: !1
                                },
                                closeOnBackgroundClick: {
                                    type: Boolean,
                                    default: !0
                                },
                                closeOnEscPress: {
                                    type: Boolean,
                                    default: !1
                                },
                                centerOverParent: {
                                    type: Boolean,
                                    default: !1
                                },
                                centerOverContent: {
                                    type: Boolean,
                                    default: !1
                                }
                            },
                            emits: ["background-clicked"],
                            data: () => ({
                                visible: !1
                            }),
                            mounted() {
                                this.closeOnEscPress && window.addEventListener("keyup", this.onKeyPress), this.autoShow && this.show()
                            },
                            beforeDestroy() {
                                this.closeOnEscPress && window.removeEventListener("keyup", this.onKeyPress)
                            },
                            methods: {
                                hide() {
                                    this.visible = !1, this.$emit(o)
                                },
                                onBackgroundClick() {
                                    this.closeOnBackgroundClick && (this.hide(), this.$emit("background-clicked"))
                                },
                                onKeyPress(e) {
                                    27 === e.keyCode && this.hide()
                                },
                                show() {
                                    this.visible = !0
                                }
                            }
                        },
                        b = {
                            component: "modal-container-component",
                            "parent-centered": "modal-container-parent-centered",
                            bg: "modal-container-bg",
                            enter: "modal-container-enter",
                            leave: "modal-container-leave",
                            "content-centered": "modal-container-content-centered"
                        };
                    var g = (0, s(1900).Z)(p, (function() {
                        var e, t, s = this,
                            a = s.$createElement,
                            o = s._self._c || a;
                        return o("transition", {
                            attrs: {
                                "enter-active-class": s.$style.enter,
                                "leave-active-class": s.$style.leave
                            }
                        }, [s.visible ? o("div", {
                            class: [s.$style.component, (e = {}, e[s.$style["parent-centered"]] = s.centerOverParent, e), (t = {}, t[s.$style["content-centered"]] = s.centerOverContent, t)]
                        }, [s.centerOverParent ? s._e() : o("div", {
                            class: s.$style.bg,
                            on: {
                                click: s.onBackgroundClick
                            }
                        }), s._v(" "), s._t("default")], 2) : s._e()])
                    }), [], !1, (function injectStyles(e) {
                        this.$style = b.locals || b
                    }), null, null).exports
                },
                5823: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        Z: function() {
                            return l
                        }
                    });
                    var a = {
                            name: "SectionContainer",
                            mixins: [s(9947).Z],
                            props: {
                                overflow: {
                                    type: String,
                                    required: !1
                                }
                            },
                            computed: {
                                componentClasses() {
                                    const {
                                        overflow: e,
                                        $style: t
                                    } = this;
                                    return [t.component, {
                                        [t[e]]: e
                                    }, this.themeClasses]
                                }
                            }
                        },
                        o = {
                            component: "section-container-component",
                            visible: "section-container-visible"
                        },
                        n = s(1900);
                    var r = {
                            name: "ModalContent",
                            components: {
                                SectionContainer: (0, n.Z)(a, (function() {
                                    var e = this,
                                        t = e.$createElement;
                                    return (e._self._c || t)("div", {
                                        class: e.componentClasses
                                    }, [e._t("default")], 2)
                                }), [], !1, (function injectStyles(e) {
                                    this.$style = o.locals || o
                                }), null, null).exports
                            },
                            props: {
                                overflow: String
                            }
                        },
                        i = {
                            component: "modal-content-component"
                        };
                    var l = (0, n.Z)(r, (function() {
                        var e = this,
                            t = e.$createElement;
                        return (e._self._c || t)("section-container", {
                            class: e.$style.component,
                            attrs: {
                                "light-mode": "",
                                overflow: e.overflow
                            }
                        }, [e._t("default")], 2)
                    }), [], !1, (function modal_content_injectStyles(e) {
                        this.$style = i.locals || i
                    }), null, null).exports
                },
                8848: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        Z: function() {
                            return i
                        }
                    });
                    var a = s(6279),
                        o = s(7597),
                        n = s(8160),
                        r = {
                            name: "Pagination",
                            components: {
                                PaginationItem: a.PaginationItem,
                                PaginationSpread: a.PaginationSpread
                            },
                            props: {
                                changePage: {
                                    type: Function,
                                    required: !0
                                },
                                currentPage: {
                                    type: Number,
                                    required: !0
                                },
                                forceTheme: {
                                    type: String,
                                    default: null
                                },
                                hasMoreProp: {
                                    type: Boolean
                                },
                                morePages: {
                                    type: Boolean,
                                    default: !1
                                },
                                totalPages: {
                                    type: Number,
                                    default: 0
                                },
                                totalResultsCount: {
                                    type: Number,
                                    required: !1
                                },
                                scrollOnPageChange: {
                                    type: Boolean,
                                    default: !1
                                },
                                scrollTo: {
                                    type: String
                                },
                                shouldHide: {
                                    type: Boolean,
                                    default: !1
                                },
                                showFirstLastButtons: {
                                    type: Boolean,
                                    default: !0
                                },
                                showTopButton: {
                                    type: Boolean,
                                    default: !1
                                },
                                updateURL: {
                                    type: Boolean,
                                    default: !1
                                }
                            },
                            data: () => ({
                                tabLimit: 4
                            }),
                            computed: {
                                isFirstPage() {
                                    return 1 === this.currentPage
                                },
                                isLastPage() {
                                    return this.hasMoreProp ? !1 === this.morePages : this.currentPage === this.totalPages
                                },
                                isLastPageHidden() {
                                    return !this.pages.includes(this.totalPages)
                                },
                                pages() {
                                    if (this.totalPages > 1) return this.generatePagesFromTotalPages();
                                    if (this.hasMoreProp && this.morePages && 1 === this.currentPage) return [1, 2];
                                    if (this.hasMoreProp && this.morePages && this.currentPage > 1) {
                                        const e = [];
                                        for (let t = this.currentPage + 1; t > 0; t -= 1) e.push(t);
                                        return e.reverse()
                                    }
                                    if (this.hasMoreProp && !this.morePages) {
                                        const e = [];
                                        for (let t = this.currentPage; t > 0; t -= 1) e.push(t);
                                        return e.reverse()
                                    }
                                    return [1]
                                },
                                showLowerEllipsis() {
                                    return this.currentPage > 1 && -1 === this.pages.indexOf(1) && !this.hasMoreProp
                                },
                                showPaginator() {
                                    return !this.shouldHide && (!(!this.hasMoreProp && this.totalPages <= 1) && !(this.hasMoreProp && !this.morePages && 1 === this.currentPage))
                                },
                                showUpperEllipsis() {
                                    return this.isLastPageHidden && !this.hasMoreProp
                                }
                            },
                            methods: {
                                isSamePage(e) {
                                    return this.currentPage === e
                                },
                                generatePagesFromTotalPages() {
                                    const e = [];
                                    if (this.totalPages <= this.tabLimit) {
                                        for (let t = 1; t <= this.totalPages; t += 1) e.push(t);
                                        return e
                                    }
                                    if (this.currentPage + this.tabLimit <= this.totalPages) {
                                        for (let t = this.currentPage; t < this.currentPage + this.tabLimit; t += 1) e.push(t);
                                        return e
                                    }
                                    for (let t = this.totalPages; t > this.totalPages - 4; t -= 1) e.push(t);
                                    return e.reverse()
                                },
                                pageNumber(e) {
                                    return this.isSamePage(e) ? n.Z.trans("Current Page, Page %pageNumber%", {
                                        "%pageNumber%": e
                                    }) : (this.scrollOnPageChange && this.goToTop(), n.Z.trans("Page %pageNumber%", {
                                        "%pageNumber%": e
                                    }))
                                },
                                goToTop() {
                                    let e = document.getElementById(this.scrollTo);
                                    e || (e = document.getElementById(o.xL.SCROLL_TOP_ANCHOR)), e.scrollIntoView({
                                        behavior: "smooth",
                                        block: "start"
                                    })
                                }
                            }
                        },
                        i = (0, s(1900).Z)(r, (function() {
                            var e = this,
                                t = e.$createElement,
                                s = e._self._c || t;
                            return s("div", {
                                staticClass: "ui_pagination-component"
                            }, [e.showTopButton ? s("PaginationItem", {
                                staticClass: "ui_pagination-top",
                                attrs: {
                                    icon: "chevron-up",
                                    "aria-label": e.$trans("Back to Top"),
                                    content: e.$trans("Top"),
                                    "force-theme": e.forceTheme
                                },
                                on: {
                                    click: function(t) {
                                        return e.goToTop()
                                    }
                                }
                            }) : e._e(), e._v(" "), e.showPaginator ? s("nav", {
                                staticClass: "ui_pagination-navigation"
                            }, [e.isFirstPage || e.hasMoreProp || !e.showFirstLastButtons ? e._e() : s("PaginationItem", {
                                attrs: {
                                    "aria-label": e.$trans("First Page"),
                                    content: e.$trans("First"),
                                    "force-theme": e.forceTheme
                                },
                                on: {
                                    click: function(t) {
                                        return e.changePage(1)
                                    }
                                }
                            }), e._v(" "), s("PaginationItem", {
                                attrs: {
                                    icon: "chevron-left",
                                    "aria-label": e.$trans("Previous Page"),
                                    disabled: e.isFirstPage,
                                    "force-theme": e.forceTheme
                                },
                                on: {
                                    click: function(t) {
                                        return e.changePage(e.currentPage - 1)
                                    }
                                }
                            }), e._v(" "), e.showLowerEllipsis ? s("PaginationSpread", {
                                attrs: {
                                    "force-theme": e.forceTheme
                                }
                            }) : e._e(), e._v(" "), e._l(e.pages, (function(t, a) {
                                return s("PaginationItem", {
                                    key: a,
                                    attrs: {
                                        active: e.isSamePage(t),
                                        "aria-label": e.pageNumber(t),
                                        "force-theme": e.forceTheme
                                    },
                                    domProps: {
                                        textContent: e._s(t.toString())
                                    },
                                    on: {
                                        click: function(s) {
                                            return e.changePage(t)
                                        }
                                    }
                                })
                            })), e._v(" "), e.showUpperEllipsis ? s("PaginationSpread", {
                                attrs: {
                                    "force-theme": e.forceTheme
                                }
                            }) : e._e(), e._v(" "), s("PaginationItem", {
                                attrs: {
                                    icon: "chevron-right",
                                    "aria-label": e.$trans("Next Page"),
                                    disabled: e.isLastPage,
                                    "force-theme": e.forceTheme
                                },
                                on: {
                                    click: function(t) {
                                        return e.changePage(e.currentPage + 1)
                                    }
                                }
                            }), e._v(" "), e.isLastPage || e.hasMoreProp || !e.showFirstLastButtons ? e._e() : s("PaginationItem", {
                                attrs: {
                                    "aria-label": e.$trans("Last Page"),
                                    content: e.$trans("Last"),
                                    "force-theme": e.forceTheme
                                },
                                on: {
                                    click: function(t) {
                                        return e.changePage(-1)
                                    }
                                }
                            })], 2) : e._e()], 1)
                        }), [], !1, null, null, null).exports
                },
                8398: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        Z: function() {
                            return v
                        }
                    });
                    var a = s(4089),
                        o = s(2793),
                        n = s(3754),
                        r = s(8160);
                    const i = (0, o.j7)().slice(0, -13),
                        l = "report-tv-video",
                        config_routes_android = () => n.Z.generate("web_play_app_view", {
                            type: "android"
                        }, !0),
                        config_routes_ios = () => n.Z.generate("web_play_app_view", {
                            type: "ios"
                        }, !0),
                        config_routes_register = () => n.Z.generate("web_security_register", {}, !0),
                        c = {
                            discord: () => "https://go.chess.com/Discord",
                            facebook: e => {
                                var t;
                                return `http://www.facebook.com/sharer.php?u=${null!=(t=encodeURIComponent(e))?t:(0,o.bM)()}`
                            },
                            linkedin: e => {
                                var t;
                                return `https://www.linkedin.com/shareArticle?mini=true&url=${null!=(t=encodeURIComponent(e))?t:(0,o.bM)()}&title=${(0,o.j7)()}&summary=${(0,o.j7)()}&source=Chess.com`
                            },
                            mix: e => {
                                var t;
                                return `http://www.mix.com/submit?url=${null!=(t=encodeURIComponent(e))?t:(0,o.bM)()}&title=${(0,o.j7)()}`
                            },
                            reddit: e => {
                                var t;
                                return `http://reddit.com/r/Chesscom/submit?url=${null!=(t=encodeURIComponent(e))?t:(0,o.bM)()}&title=${(0,o.j7)()}`
                            },
                            tumblr: e => {
                                var t;
                                return `http://www.tumblr.com/share/link?url=${null!=(t=encodeURIComponent(e))?t:(0,o.bM)()}&name=${(0,o.j7)()}&description=${(0,o.j7)()}`
                            },
                            twitch: () => "https://www.chess.com/twitch",
                            twitter: e => {
                                var t;
                                return `https://twitter.com/intent/tweet?text=${i}&url=${null!=(t=encodeURIComponent(e))?t:(0,o.bM)()}`
                            }
                        },
                        d = {
                            addFavorites: r.Z.trans("Add to Favorites"),
                            android: r.Z.trans("Android App"),
                            discord: r.Z.trans("Discord"),
                            facebook: r.Z.trans("Facebook"),
                            gamesToday: r.Z.trans("Games Today"),
                            google: r.Z.trans("Google+"),
                            instagram: r.Z.trans("Instagram"),
                            ios: r.Z.trans("iOS App"),
                            members: r.Z.trans("Members"),
                            playersOnline: r.Z.trans("Players Online"),
                            print: r.Z.trans("Print"),
                            report: r.Z.trans("Report"),
                            sendEmail: r.Z.trans("Send by Mail"),
                            titledOnline: r.Z.trans("Titled Online"),
                            twitch: r.Z.trans("Twitch"),
                            twitter: r.Z.trans("Twitter"),
                            windows: r.Z.trans("Windows App"),
                            youtube: r.Z.trans("Youtube"),
                            shareFacebook: r.Z.trans("Share on Facebook"),
                            shareGplus: r.Z.trans("Share on Google Plus"),
                            shareLinkedIn: r.Z.trans("Share on LinkedIn"),
                            shareMix: r.Z.trans("Share on Mix"),
                            shareReddit: r.Z.trans("Share on Reddit"),
                            shareTumblr: r.Z.trans("Post to Tumblr"),
                            shareTwitter: r.Z.trans("Share on Twitter"),
                            showMore: r.Z.trans("More")
                        },
                        u = {
                            facebook: "https://www.facebook.com/chess",
                            instagram: "https://www.instagram.com/wwwchesscom/",
                            twitch: "https://www.twitch.tv/chess",
                            twitter: "https://twitter.com/chesscom",
                            youtube: "https://www.youtube.com/user/wwwChesscom"
                        };
                    var m = s(5700);
                    const window_openWindow = e => {
                        !async function logSocialShare() {
                            await (0, m.K)("Social - SocialShare", null, null, {
                                numSocialShares: 1
                            })
                        }();
                        const t = `left=${window.screen.width/2-280}, top=${window.screen.height/2-340}`;
                        window.open(e, "_blank", `width=560, height=510,${t},resizable=no, status=no, menubar=no, scrollbars=no`)
                    };
                    var h = s(2433);
                    s(1353);
                    var p = s(6673),
                        b = {
                            name: "SocialShare",
                            components: {
                                IconFont: a.Z
                            },
                            props: {
                                background: {
                                    type: String,
                                    default: "default"
                                },
                                url: {
                                    type: String,
                                    required: !1
                                },
                                userId: {
                                    type: String,
                                    required: !1
                                },
                                username: {
                                    type: String,
                                    required: !1
                                },
                                chessTvExtraButtons: {
                                    type: Boolean,
                                    default: !1
                                }
                            },
                            data: () => ({
                                isExpanded: !1,
                                translations: d,
                                share: c,
                                web: u
                            }),
                            methods: {
                                bookmarkPage: o.sJ,
                                printWindow: o.kY,
                                sendInvitation: (e, t) => {
                                    const s = e ? `?friend=${e}` : "";
                                    let a = `body=${"/settings"===o.k_?"":`${o.qD} ${o.e0} %0D%0A%0D%0A`}I play at Chess.com! Download their free app:%0D%0A%0D%0A\n      … for Android - ${config_routes_android()}\n      … for iPhone %26 iPad - ${config_routes_ios()} %0D%0A\n      … or sign up online at ${config_routes_register()}${s}\n      %0D%0A%0D%0A ... %0D%0A%0D%0A`;
                                    t && (a += `Then challenge me! %22${t}%22 is my username! %0D%0A\n            http://www.chess.com/members/view/${t}`), (0, o.Cz)("subject=Check out Chess.com", a)
                                },
                                shareWindow(e) {
                                    var t;
                                    "facebook" !== e && "twitter" !== e || (t = e, h.Z.post(n.Z.generate("web_game_callback_shared", {
                                        type: t
                                    }))), "function" == typeof c[e] && window_openWindow(c[e](this.url || window.location.href))
                                },
                                toggleExpanded() {
                                    this.isExpanded = !this.isExpanded
                                },
                                handleReport() {
                                    p.Z.emit(l)
                                }
                            }
                        },
                        g = {
                            component: "social-share-component",
                            transparent: "social-share-transparent",
                            background: "social-share-background",
                            preloader: "social-share-preloader",
                            expanded: "social-share-expanded",
                            primary: "social-share-primary",
                            link: "social-share-link",
                            icon: "social-share-icon",
                            secondary: "social-share-secondary",
                            visible: "social-share-visible",
                            facebook: "social-share-facebook",
                            twitter: "social-share-twitter",
                            reddit: "social-share-reddit",
                            google: "social-share-google",
                            more: "social-share-more",
                            "more-icon": "social-share-more-icon"
                        };
                    var v = (0, s(1900).Z)(b, (function() {
                        var e, t, s, a, o = this,
                            n = o.$createElement,
                            r = o._self._c || n;
                        return r("div", {
                            class: [o.$style.component, (e = {}, e[o.$style[o.background]] = o.background, e)]
                        }, [r("div", {
                            class: [o.$style.background, (t = {}, t[o.$style.expanded] = o.isExpanded, t)]
                        }, [r("div", {
                            class: o.$style.primary
                        }, [o.chessTvExtraButtons ? [r("a", {
                            class: [o.$style.link, o.$style.twitch],
                            attrs: {
                                target: "_blank",
                                "aria-label": o.translations.twitch,
                                href: o.share.twitch(),
                                title: o.translations.twitch
                            }
                        }, [r("icon-font", {
                            class: o.$style.icon,
                            attrs: {
                                "aria-hidden": "true",
                                family: "chess",
                                name: "twitch",
                                theme: "secondary"
                            }
                        })], 1), o._v(" "), r("a", {
                            class: [o.$style.link, o.$style.youtube],
                            attrs: {
                                target: "_blank",
                                "aria-label": o.translations.youtube,
                                href: o.web.youtube,
                                title: o.translations.youtube
                            }
                        }, [r("icon-font", {
                            class: o.$style.icon,
                            attrs: {
                                "aria-hidden": "true",
                                family: "chess",
                                name: "youtube",
                                theme: "secondary"
                            }
                        })], 1), o._v(" "), r("a", {
                            class: [o.$style.link, o.$style.instagram],
                            attrs: {
                                target: "_blank",
                                "aria-label": o.translations.instagram,
                                href: o.web.instagram,
                                title: o.translations.instagram
                            }
                        }, [r("icon-font", {
                            class: o.$style.icon,
                            attrs: {
                                "aria-hidden": "true",
                                family: "chess",
                                name: "instagram",
                                theme: "secondary"
                            }
                        })], 1), o._v(" "), r("a", {
                            class: [o.$style.link, o.$style.discord],
                            attrs: {
                                target: "_blank",
                                "aria-label": o.translations.discord,
                                href: o.share.discord(),
                                title: o.translations.discord
                            }
                        }, [r("icon-font", {
                            class: o.$style.icon,
                            attrs: {
                                "aria-hidden": "true",
                                family: "chess",
                                name: "discord",
                                theme: "secondary"
                            }
                        })], 1)] : o._e(), o._v(" "), r("button", {
                            class: [o.$style.link, o.$style.facebook],
                            attrs: {
                                type: "button",
                                "aria-label": o.translations.shareFacebook,
                                title: o.translations.shareFacebook
                            },
                            on: {
                                click: function(e) {
                                    return o.shareWindow("facebook")
                                }
                            }
                        }, [r("icon-font", {
                            class: o.$style.icon,
                            attrs: {
                                "aria-hidden": "true",
                                family: "chess",
                                name: "facebook",
                                theme: "secondary"
                            }
                        })], 1), o._v(" "), r("button", {
                            class: [o.$style.link, o.$style.twitter],
                            attrs: {
                                type: "button",
                                "aria-label": o.translations.shareTwitter,
                                title: o.translations.shareTwitter
                            },
                            on: {
                                click: function(e) {
                                    return o.shareWindow("twitter")
                                }
                            }
                        }, [r("icon-font", {
                            class: o.$style.icon,
                            attrs: {
                                "aria-hidden": "true",
                                family: "chess",
                                name: "twitter",
                                theme: "secondary"
                            }
                        })], 1), o._v(" "), r("button", {
                            class: [o.$style.link, o.$style.reddit],
                            attrs: {
                                type: "button",
                                "aria-label": o.translations.shareReddit,
                                title: o.translations.shareReddit
                            },
                            on: {
                                click: function(e) {
                                    return o.shareWindow("reddit")
                                }
                            }
                        }, [r("icon-font", {
                            class: o.$style.icon,
                            attrs: {
                                "aria-hidden": "true",
                                family: "chess",
                                name: "reddit",
                                theme: "secondary"
                            }
                        })], 1), o._v(" "), r("button", {
                            class: [o.$style.link, o.$style.more],
                            attrs: {
                                type: "button",
                                "aria-label": o.translations.showMore,
                                title: o.translations.showMore
                            },
                            on: {
                                click: o.toggleExpanded
                            }
                        }, [r("icon-font", {
                            class: [o.$style.icon, (s = {}, s[o.$style["more-icon"]] = !o.isExpanded, s)],
                            attrs: {
                                "aria-hidden": "true",
                                family: "chess",
                                theme: "secondary",
                                name: o.isExpanded ? "x" : "circle-3-dots"
                            }
                        })], 1), o._v(" "), o.chessTvExtraButtons ? r("button", {
                            class: [o.$style.link, o.$style.share],
                            attrs: {
                                type: "button",
                                "aria-label": o.translations.report,
                                title: o.translations.report
                            },
                            on: {
                                click: o.handleReport
                            }
                        }, [r("icon-font", {
                            class: o.$style.icon,
                            attrs: {
                                "aria-hidden": "true",
                                family: "chess",
                                name: "circle-danger",
                                theme: "secondary"
                            }
                        })], 1) : o._e()], 2), o._v(" "), r("div", {
                            class: [o.$style.secondary, (a = {}, a[o.$style.visible] = o.isExpanded, a)]
                        }, [r("button", {
                            class: o.$style.link,
                            attrs: {
                                type: "button",
                                "aria-label": o.translations.shareLinkedIn,
                                title: o.translations.shareLinkedIn
                            },
                            on: {
                                click: function(e) {
                                    return o.shareWindow("linkedin")
                                }
                            }
                        }, [r("icon-font", {
                            class: o.$style.icon,
                            attrs: {
                                "aria-hidden": "true",
                                family: "chess",
                                name: "linkedin",
                                theme: "secondary"
                            }
                        })], 1), o._v(" "), r("button", {
                            class: o.$style.link,
                            attrs: {
                                type: "button",
                                "aria-label": o.translations.shareMix,
                                title: o.translations.shareMix
                            },
                            on: {
                                click: function(e) {
                                    return o.shareWindow("mix")
                                }
                            }
                        }, [r("icon-font", {
                            class: o.$style.icon,
                            attrs: {
                                "aria-hidden": "true",
                                family: "chess",
                                name: "mix",
                                theme: "secondary"
                            }
                        })], 1), o._v(" "), r("button", {
                            class: o.$style.link,
                            attrs: {
                                type: "button",
                                "aria-label": o.translations.shareTumblr,
                                title: o.translations.shareTumblr
                            },
                            on: {
                                click: function(e) {
                                    return o.shareWindow("tumblr")
                                }
                            }
                        }, [r("icon-font", {
                            class: o.$style.icon,
                            attrs: {
                                "aria-hidden": "true",
                                family: "chess",
                                name: "tumblr",
                                theme: "secondary"
                            }
                        })], 1), o._v(" "), r("button", {
                            class: o.$style.link,
                            attrs: {
                                type: "button",
                                "aria-label": o.translations.addFavorites,
                                title: o.translations.addFavorites
                            },
                            on: {
                                click: o.bookmarkPage
                            }
                        }, [r("icon-font", {
                            class: o.$style.icon,
                            attrs: {
                                "aria-hidden": "true",
                                family: "chess",
                                name: "favorites",
                                theme: "secondary"
                            }
                        })], 1), o._v(" "), r("button", {
                            class: o.$style.link,
                            attrs: {
                                type: "button",
                                "aria-label": o.translations.sendEmail,
                                title: o.translations.sendEmail
                            },
                            on: {
                                click: function(e) {
                                    return o.sendInvitation(o.userId, o.username)
                                }
                            }
                        }, [r("icon-font", {
                            class: o.$style.icon,
                            attrs: {
                                "aria-hidden": "true",
                                family: "chess",
                                name: "mail",
                                theme: "secondary"
                            }
                        })], 1), o._v(" "), r("button", {
                            class: o.$style.link,
                            attrs: {
                                type: "button",
                                "aria-label": o.translations.print,
                                title: o.translations.print
                            },
                            on: {
                                click: o.printWindow
                            }
                        }, [r("icon-font", {
                            class: o.$style.icon,
                            attrs: {
                                "aria-hidden": "true",
                                family: "chess",
                                name: "printer",
                                theme: "secondary"
                            }
                        })], 1)])])])
                    }), [], !1, (function injectStyles(e) {
                        this.$style = g.locals || g
                    }), null, null).exports
                },
                7660: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        Z: function() {
                            return i
                        }
                    });
                    var a = s(7241),
                        o = s(7692),
                        n = {
                            name: "UserChessTitle",
                            directives: {
                                Tooltip: a.Z
                            },
                            props: {
                                title: {
                                    type: String,
                                    required: !0
                                },
                                url: {
                                    type: String,
                                    required: !1
                                },
                                openNewTab: {
                                    type: Boolean,
                                    required: !1
                                }
                            },
                            data() {
                                return {
                                    fullTitle: o.rP[this.title]
                                }
                            },
                            computed: {
                                isLink() {
                                    return Boolean(this.url)
                                },
                                target() {
                                    return this.openNewTab ? "_blank" : null
                                }
                            }
                        },
                        r = {
                            component: "user-chess-title-component"
                        };
                    var i = (0, s(1900).Z)(n, (function() {
                        var e = this,
                            t = e.$createElement,
                            s = e._self._c || t;
                        return e.isLink ? s("a", {
                            directives: [{
                                name: "tooltip",
                                rawName: "v-tooltip",
                                value: e.fullTitle,
                                expression: "fullTitle"
                            }],
                            class: e.$style.component,
                            attrs: {
                                href: e.url,
                                target: e.target
                            },
                            domProps: {
                                textContent: e._s(e.title)
                            }
                        }) : s("span", {
                            directives: [{
                                name: "tooltip",
                                rawName: "v-tooltip",
                                value: e.fullTitle,
                                expression: "fullTitle"
                            }],
                            class: e.$style.component,
                            domProps: {
                                textContent: e._s(e.title)
                            }
                        })
                    }), [], !1, (function injectStyles(e) {
                        this.$style = r.locals || r
                    }), null, null).exports
                },
                5775: function(e, t, s) {
                    "use strict";
                    s.d(t, {
                        Z: function() {
                            return n
                        }
                    });
                    var a = {
                            name: "UserUsername",
                            props: {
                                theme: {
                                    type: String,
                                    required: !0
                                },
                                isClickable: {
                                    type: Boolean,
                                    default: !0
                                },
                                url: {
                                    type: String,
                                    required: !1
                                },
                                username: {
                                    type: String,
                                    required: !0
                                },
                                openNewTab: {
                                    type: Boolean,
                                    required: !1
                                }
                            },
                            computed: {
                                getTargetIfClickable() {
                                    return this.openNewTab ? "_blank" : null
                                },
                                isLink() {
                                    return Boolean(this.url)
                                }
                            }
                        },
                        o = {
                            component: "user-username-component",
                            link: "user-username-link",
                            gray: "user-username-gray",
                            blue: "user-username-blue",
                            lightgray: "user-username-lightgray",
                            current: "user-username-current",
                            dark: "user-username-dark",
                            "blue-with-dark-mode": "user-username-blue-with-dark-mode",
                            "blue-to-water": "user-username-blue-to-water"
                        };
                    var n = (0, s(1900).Z)(a, (function() {
                        var e, t = this,
                            s = t.$createElement;
                        return (t._self._c || s)(t.isClickable ? "a" : "span", {
                            tag: "component",
                            class: [t.$style.component, t.$style[t.theme], (e = {}, e[t.$style.link] = t.isClickable, e)],
                            attrs: {
                                href: t.isClickable ? t.url : null,
                                target: t.getTargetIfClickable
                            },
                            domProps: {
                                textContent: t._s(t.username)
                            }
                        })
                    }), [], !1, (function injectStyles(e) {
                        this.$style = o.locals || o
                    }), null, null).exports
                },
                3950: function(e) {
                    "use strict";
                    e.exports = JSON.parse('{"name":"@chesscom/classroom-client","version":"1.3.0","scripts":{"install-package":"../../build/bin/build run install-client-packages","release":"../../build/bin/build release @chesscom/classroom-client"},"license":"UNLICENSED","repository":{"type":"git","url":"git+https://github.com/ChessCom/client-packages.git"},"publishConfig":{"registry":"https://npm.pkg.github.com/"},"files":["dist/*","release-history.md"]}')
                }
            },
            m = {};

        function __webpack_require__(e) {
            var t = m[e];
            if (void 0 !== t) return t.exports;
            var s = m[e] = {
                id: e,
                loaded: !1,
                exports: {}
            };
            return u[e].call(s.exports, s, s.exports, __webpack_require__), s.loaded = !0, s.exports
        }
        __webpack_require__.m = u, e = [], __webpack_require__.O = function(t, s, a, o) {
                if (!s) {
                    var n = 1 / 0;
                    for (c = 0; c < e.length; c++) {
                        s = e[c][0], a = e[c][1], o = e[c][2];
                        for (var r = !0, i = 0; i < s.length; i++)(!1 & o || n >= o) && Object.keys(__webpack_require__.O).every((function(e) {
                            return __webpack_require__.O[e](s[i])
                        })) ? s.splice(i--, 1) : (r = !1, o < n && (n = o));
                        if (r) {
                            e.splice(c--, 1);
                            var l = a();
                            void 0 !== l && (t = l)
                        }
                    }
                    return t
                }
                o = o || 0;
                for (var c = e.length; c > 0 && e[c - 1][2] > o; c--) e[c] = e[c - 1];
                e[c] = [s, a, o]
            }, __webpack_require__.n = function(e) {
                var t = e && e.__esModule ? function() {
                    return e.default
                } : function() {
                    return e
                };
                return __webpack_require__.d(t, {
                    a: t
                }), t
            }, s = Object.getPrototypeOf ? function(e) {
                return Object.getPrototypeOf(e)
            } : function(e) {
                return e.__proto__
            }, __webpack_require__.t = function(e, a) {
                if (1 & a && (e = this(e)), 8 & a) return e;
                if ("object" == typeof e && e) {
                    if (4 & a && e.__esModule) return e;
                    if (16 & a && "function" == typeof e.then) return e
                }
                var o = Object.create(null);
                __webpack_require__.r(o);
                var n = {};
                t = t || [null, s({}), s([]), s(s)];
                for (var r = 2 & a && e;
                    "object" == typeof r && !~t.indexOf(r); r = s(r)) Object.getOwnPropertyNames(r).forEach((function(t) {
                    n[t] = function() {
                        return e[t]
                    }
                }));
                return n.default = function() {
                    return e
                }, __webpack_require__.d(o, n), o
            }, __webpack_require__.d = function(e, t) {
                for (var s in t) __webpack_require__.o(t, s) && !__webpack_require__.o(e, s) && Object.defineProperty(e, s, {
                    enumerable: !0,
                    get: t[s]
                })
            }, __webpack_require__.f = {}, __webpack_require__.e = function(e) {
                return Promise.all(Object.keys(__webpack_require__.f).reduce((function(t, s) {
                    return __webpack_require__.f[s](e, t), t
                }), []))
            }, __webpack_require__.u = function(e) {
                return "classroom-" + ({
                    210: "user-report-modal",
                    284: "trophy-popover",
                    614: "gift-membership-modal",
                    631: "sentry-browser",
                    966: "pubsub-client"
                } [e] || e) + ".chunk.client." + {
                    43: "160d2e96",
                    210: "f17f215d",
                    248: "80e2b2e9",
                    276: "922a025f",
                    283: "d3c89e6b",
                    284: "320857af",
                    347: "e7f72b26",
                    416: "a7ddf2f3",
                    448: "97216049",
                    588: "d6d556cd",
                    614: "f09e60ab",
                    631: "814ff854",
                    647: "abe30c08",
                    690: "d1c2152e",
                    790: "d0ec8639",
                    797: "2100ad05",
                    934: "a3443328",
                    966: "bcbfbf43"
                } [e] + ".js"
            }, __webpack_require__.miniCssF = function(e) {
                return 216 === e ? "classroom-vendors.client.a8921e67.css" : 741 === e ? "classroom.client.9472d401.css" : 276 === e ? "classroom-web.chunk.client.9c18b925.css" : 614 === e ? "classroom-gift-membership-modal.chunk.client.6dd3b74d.css" : 210 === e ? "classroom-user-report-modal.chunk.client.26f09080.css" : 284 === e ? "classroom-trophy-popover.chunk.client.0fedec04.css" : 690 === e ? "classroom-web.chunk.client.c11d053d.css" : 43 === e ? "classroom-web.chunk.client.05d34fdc.css" : void 0
            }, __webpack_require__.g = function() {
                if ("object" == typeof globalThis) return globalThis;
                try {
                    return this || new Function("return this")()
                } catch (e) {
                    if ("object" == typeof window) return window
                }
            }(), __webpack_require__.hmd = function(e) {
                return (e = Object.create(e)).children || (e.children = []), Object.defineProperty(e, "exports", {
                    enumerable: !0,
                    set: function() {
                        throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: " + e.id)
                    }
                }), e
            }, __webpack_require__.o = function(e, t) {
                return Object.prototype.hasOwnProperty.call(e, t)
            }, a = {}, o = "client:", __webpack_require__.l = function(e, t, s, n) {
                if (a[e]) a[e].push(t);
                else {
                    var r, i;
                    if (void 0 !== s)
                        for (var l = document.getElementsByTagName("script"), c = 0; c < l.length; c++) {
                            var d = l[c];
                            if (d.getAttribute("src") == e || d.getAttribute("data-webpack") == o + s) {
                                r = d;
                                break
                            }
                        }
                    r || (i = !0, (r = document.createElement("script")).charset = "utf-8", r.timeout = 120, __webpack_require__.nc && r.setAttribute("nonce", __webpack_require__.nc), r.setAttribute("data-webpack", o + s), r.src = e), a[e] = [t];
                    var onScriptComplete = function(t, s) {
                            r.onerror = r.onload = null, clearTimeout(u);
                            var o = a[e];
                            if (delete a[e], r.parentNode && r.parentNode.removeChild(r), o && o.forEach((function(e) {
                                    return e(s)
                                })), t) return t(s)
                        },
                        u = setTimeout(onScriptComplete.bind(null, void 0, {
                            type: "timeout",
                            target: r
                        }), 12e4);
                    r.onerror = onScriptComplete.bind(null, r.onerror), r.onload = onScriptComplete.bind(null, r.onload), i && document.head.appendChild(r)
                }
            }, __webpack_require__.r = function(e) {
                "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
                    value: "Module"
                }), Object.defineProperty(e, "__esModule", {
                    value: !0
                })
            }, __webpack_require__.p = "/bundles/app/js/", n = __webpack_require__.u, r = __webpack_require__.e, i = new Map, l = new Map, __webpack_require__.u = function(e) {
                return n(e) + (i.has(e) ? "?" + i.get(e) : "")
            }, __webpack_require__.e = function(e) {
                return r(e).catch((function(t) {
                    var s = l.has(e) ? l.get(e) : 2;
                    if (s < 1) {
                        var a = n(e);
                        throw t.message = "Loading chunk " + e + " failed after 2 retries.\n(" + a + ")", t.request = a, t
                    }
                    return new Promise((function(t) {
                        setTimeout((function() {
                            var a = "cache-bust=true&retry-attempt=" + (2 - s + 1);
                            i.set(e, a), l.set(e, s - 1), t(__webpack_require__.e(e))
                        }), 0)
                    }))
                }))
            }, c = function(e) {
                return new Promise((function(t, s) {
                    var a = __webpack_require__.miniCssF(e),
                        o = window.__CHESSCOM_RTL__,
                        n = "/bundles/app/css/" + a;
                    if (function(e, t) {
                            for (var s = document.getElementsByTagName("link"), a = 0; a < s.length; a++) {
                                var o = (r = s[a]).getAttribute("data-href") || r.getAttribute("href");
                                if ("stylesheet" === r.rel && (o === e || o === t)) return r
                            }
                            var n = document.getElementsByTagName("style");
                            for (a = 0; a < n.length; a++) {
                                var r;
                                if ((o = (r = n[a]).getAttribute("data-href")) === e || o === t) return r
                            }
                        }(a, n)) return t();
                    o && (n = n.replace(/\.css/i, ".rtl.css")),
                        function(e, t, s, a) {
                            var o = document.createElement("link");
                            o.rel = "stylesheet", o.type = "text/css", o.onerror = o.onload = function(n) {
                                if (o.onerror = o.onload = null, "load" === n.type) s();
                                else {
                                    var r = n && ("load" === n.type ? "missing" : n.type),
                                        i = n && n.target && n.target.href || t,
                                        l = new Error("Loading CSS chunk " + e + " failed.\n(" + i + ")");
                                    l.code = "CSS_CHUNK_LOAD_FAILED", l.type = r, l.request = i, o.parentNode.removeChild(o), a(l)
                                }
                            }, o.href = t, document.head.appendChild(o)
                        }(e, n, t, s)
                }))
            }, d = {
                741: 0
            }, __webpack_require__.f.miniCss = function(e, t) {
                d[e] ? t.push(d[e]) : 0 !== d[e] && {
                    43: 1,
                    210: 1,
                    276: 1,
                    284: 1,
                    614: 1,
                    690: 1
                } [e] && t.push(d[e] = c(e).then((function() {
                    d[e] = 0
                }), (function(t) {
                    throw delete d[e], t
                })))
            },
            function() {
                var e = {
                    741: 0
                };
                __webpack_require__.f.j = function(t, s) {
                    var a = __webpack_require__.o(e, t) ? e[t] : void 0;
                    if (0 !== a)
                        if (a) s.push(a[2]);
                        else {
                            var o = new Promise((function(s, o) {
                                a = e[t] = [s, o]
                            }));
                            s.push(a[2] = o);
                            var n = __webpack_require__.p + __webpack_require__.u(t),
                                r = new Error;
                            __webpack_require__.l(n, (function(s) {
                                if (__webpack_require__.o(e, t) && (0 !== (a = e[t]) && (e[t] = void 0), a)) {
                                    var o = s && ("load" === s.type ? "missing" : s.type),
                                        n = s && s.target && s.target.src;
                                    r.message = "Loading chunk " + t + " failed.\n(" + o + ": " + n + ")", r.name = "ChunkLoadError", r.type = o, r.request = n, a[1](r)
                                }
                            }), "chunk-" + t, t)
                        }
                }, __webpack_require__.O.j = function(t) {
                    return 0 === e[t]
                };
                var webpackJsonpCallback = function(t, s) {
                        var a, o, n = s[0],
                            r = s[1],
                            i = s[2],
                            l = 0;
                        if (n.some((function(t) {
                                return 0 !== e[t]
                            }))) {
                            for (a in r) __webpack_require__.o(r, a) && (__webpack_require__.m[a] = r[a]);
                            if (i) var c = i(__webpack_require__)
                        }
                        for (t && t(s); l < n.length; l++) o = n[l], __webpack_require__.o(e, o) && e[o] && e[o][0](), e[o] = 0;
                        return __webpack_require__.O(c)
                    },
                    t = ("undefined" != typeof self ? self : this).wpJsonpChessCom_classroom = ("undefined" != typeof self ? self : this).wpJsonpChessCom_classroom || [];
                t.forEach(webpackJsonpCallback.bind(null, 0)), t.push = webpackJsonpCallback.bind(null, t.push.bind(t))
            }();
        var h = __webpack_require__.O(void 0, [216], (function() {
            return __webpack_require__(4176)
        }));
        h = __webpack_require__.O(h)
    }();
